// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  // typeSafeにするためoutputを設定してはいけない
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Level {
  Info
  Warn
  Error
}

enum LogAbout {
  Checkout
}

enum Gender {
  male
  female
  middle
}

enum checkoutStatus {
  ordered
  processing
  shipped
  cancel
}

enum OneTimeNumberUsage {
  signIn
}

model Grade {
  id        Int      @id @default(autoincrement())
  grade     String
  gradeJp   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Grammar Grammar[]
}

model Grammar {
  id        Int      @id @default(autoincrement())
  unit      String
  tangen    String
  localId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Grade           Grade             @relation(fields: [gradeId], references: [id])
  gradeId         Int
  GrammarQuestion GrammarQuestion[]

  @@index([gradeId])
}

model GrammarQuestion {
  id          Int      @id @default(autoincrement())
  title       String
  sentence    String
  q1          String
  q2          String
  q3          String?
  q4          String?
  q5          String?
  q6          String?
  answer      String
  explanation String
  localId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  Grammar   Grammar @relation(fields: [grammarId], references: [id])
  grammarId Int

  @@index([grammarId])
}

model Log {
  id      Int      @id @default(autoincrement())
  about   LogAbout
  level   Level
  message String
  meta    Json?
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Int
  image       Json
  priceId     String
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ProductReview  ProductReview[]
  StripeCheckout StripeCheckout[]
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  text      String   @db.Text
  // 購入と結びつけた方がいいのでゆくゆくはリレーション
  reviewer  String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product        Product         @relation(fields: [productId], references: [id])
  productId      Int
  StripeCheckout StripeCheckout? @relation(fields: [checkoutId], references: [id])
  checkoutId     Int?

  @@index([productId])
  @@index([checkoutId])
}

model OneTimePassword {
  id Int @id @default(autoincrement())

  usage OneTimeNumberUsage

  oneTimePassword String

  updatedAt DateTime @default(now()) @updatedAt

  User   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

model StripeCheckout {
  id Int @id @default(autoincrement())

  // customerIdがある = EngnessのUserと結びついたStripeCustomerのデータがStripe側にある
  StripeCustomer StripeCustomer? @relation(fields: [customerId], references: [customerId])
  customerId     String?

  Product   Product @relation(fields: [productId], references: [id])
  productId Int

  paymentId    String
  name         String
  email        String
  postCode     String
  address      String
  serialNumber String

  status  checkoutStatus
  manager String?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ProductReview ProductReview[]

  @@index([customerId])
  @@index([productId])
}

model StripeCustomer {
  id String @id @default(uuid())

  // Userが複数のCustomerを持つ場合も想定
  customerId String @unique

  User           User             @relation(fields: [userId], references: [id])
  userId         String
  StripeCheckout StripeCheckout[]

  @@index([userId])
}

model User {
  id              String            @id @default(uuid())
  userName        String
  gender          Gender
  country         String
  city            String
  email           String            @unique
  birthYear       String
  activated       Boolean           @default(false)
  invited         Boolean           @default(false)
  invitedUntil    DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  StripeCustomer  StripeCustomer[]
  OneTimePassword OneTimePassword[]
}
