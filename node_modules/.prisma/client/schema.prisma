// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  //   previewFeatures = ["driverAdapters"]
  //   // typeSafeにするためoutputを設定してはいけない
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum LogLevel {
  Info
  Warn
  Error
}

enum LogAbout {
  Checkout
  Subscription
  Passage
  PassageSentence
  PassageQuestion
}

enum Gender {
  male
  female
  middle
}

// 文化省の英語レベル表より
enum EnglishLevelRange {
  C2
  C1
  B2
  B1
  A2
  A1
}

enum checkoutStatus {
  ordered
  processing
  shipped
  cancel
}

enum checkoutType {
  checkout
  subscription
}

enum subscriptionStatus {
  trialing
  active
  canceled
}

enum OneTimeNumberUsage {
  signIn
}

enum AdminRole {
  super
  write
  read
}

model AdminUser {
  id              String            @id @default(uuid())
  role            AdminRole
  adminName       String
  adminEmail      String            @unique
  password        String
  OneTimePassword OneTimePassword[]
}

model AmazonProduct {
  id   Int    @id @default(autoincrement())
  name String

  imgHtmlTag   String @db.VarChar(300)
  affiliateUrl String @db.VarChar(300)

  EnglishLevel   EnglishLevel @relation(fields: [englishLevelId], references: [id])
  englishLevelId Int

  @@index([englishLevelId])
}

model Article {
  id          Int             @id @default(autoincrement())
  Category    ArticleCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  published   Boolean         @default(false)
  name        String
  // 検索タイトル
  title       String
  description String?

  body Json?

  ArticleUniversityDepartment ArticleUniversityDepartment[]

  @@index([categoryId])
}

model ArticleCategory {
  id       Int       @id @default(autoincrement())
  category String
  Article  Article[]
}

model ArticleUniversity {
  id                          Int                           @id @default(autoincrement())
  schoolName                  String
  publicSchool                Boolean                       @default(false)
  region                      Int
  eikenUsable                 Boolean                       @default(false)
  schoolUrl                   String?
  ArticleUniversityDepartment ArticleUniversityDepartment[]
}

model ArticleUniversityDepartment {
  id           Int               @id @default(autoincrement())
  Article      Article?          @relation(fields: [articleId], references: [id])
  articleId    Int?
  University   ArticleUniversity @relation(fields: [universityId], references: [id])
  universityId Int
  name         String
  rikei        Boolean           @default(false)
  examType     Int?
  articleYear  String?

  @@index([articleId])
  @@index([universityId])
}

model EnglishLevel {
  id         Int               @id @default(autoincrement())
  level      EnglishLevelRange
  levelRange String

  Passage       Passage[]
  AmazonProduct AmazonProduct[]
}

model Grade {
  id      Int    @id @default(autoincrement())
  grade   String
  gradeJp String

  Grammar Grammar[]
}

model Grammar {
  id      Int    @id @default(autoincrement())
  unit    String
  tangen  String
  localId Int

  Grade           Grade             @relation(fields: [gradeId], references: [id])
  gradeId         Int
  GrammarQuestion GrammarQuestion[]

  @@index([gradeId])
}

model GrammarQuestion {
  id          Int    @id @default(autoincrement())
  title       String
  sentence    String
  question    Json
  answer      String
  explanation String
  localId     Int

  Grammar             Grammar               @relation(fields: [grammarId], references: [id])
  grammarId           Int
  LikeGrammarQuestion LikeGrammarQuestion[]

  @@index([grammarId])
}

model LikeGrammarQuestion {
  id Int @id @default(autoincrement())

  User   User   @relation(fields: [userId], references: [id])
  userId String

  GrammarQuestion   GrammarQuestion @relation(fields: [grammarQuestionId], references: [id])
  grammarQuestionId Int

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([grammarQuestionId])
}

model LikeListening {
  id Int @id @default(autoincrement())

  User   User   @relation(fields: [userId], references: [id])
  userId String

  Listening   Listening @relation(fields: [listeningId], references: [id])
  listeningId Int

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([listeningId])
}

model Listening {
  id      Int    @id @default(autoincrement())
  title   String
  url     String
  lap     Int
  localId Int

  LikeListening LikeListening[]
}

model Log {
  id      Int      @id @default(autoincrement())
  about   LogAbout
  level   LogLevel
  message String
  meta    Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Product {
  id           Int          @id @default(autoincrement())
  name         String
  price        Int
  checkoutType checkoutType
  image        Json?
  priceId      String
  description  String?      @db.Text
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  ProductReview  ProductReview[]
  StripeCheckout StripeCheckout[]
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  text      String   @db.Text
  // 購入と結びつけた方がいいのでゆくゆくはリレーション
  reviewer  String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product        Product         @relation(fields: [productId], references: [id])
  productId      Int
  StripeCheckout StripeCheckout? @relation(fields: [checkoutId], references: [id])
  checkoutId     Int?

  @@index([productId])
  @@index([checkoutId])
}

model OneTimePassword {
  id Int @id @default(autoincrement())

  usage OneTimeNumberUsage

  oneTimePassword String
  validated       Boolean @default(false)

  updatedAt DateTime @default(now()) @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  AdminUser   AdminUser? @relation(fields: [adminUserId], references: [id])
  adminUserId String?

  @@index([userId])
  @@index([adminUserId])
}

model StripeCheckout {
  id Int @id @default(autoincrement())

  // customerIdがある = EngnessのUserと結びついたStripeCustomerのデータがStripe側にある
  StripeCustomer StripeCustomer? @relation(fields: [customerId], references: [customerId])
  customerId     String?

  Product   Product @relation(fields: [productId], references: [id])
  productId Int

  paymentId    String
  name         String
  email        String
  postCode     String
  address      String
  serialNumber String

  status  checkoutStatus
  manager String?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ProductReview ProductReview[]

  @@index([customerId])
  @@index([productId])
}

model StripeCustomer {
  id Int @id @default(autoincrement())

  // Userが複数のCustomerを持つ場合も想定
  customerId String @unique

  User               User                 @relation(fields: [userId], references: [id])
  userId             String
  StripeCheckout     StripeCheckout[]
  StripeSubscription StripeSubscription[]

  @@index([userId])
}

model StripeSubscription {
  id Int @id @default(autoincrement())

  subscriptionId String

  plan   String
  status subscriptionStatus

  periodStart String
  periodEnd   String

  cancelAt          String?
  cancelAtPeriodEnd Boolean @default(false)

  StripeCustomer   StripeCustomer @relation(fields: [stripeCustomerId], references: [id])
  stripeCustomerId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stripeCustomerId])
}

model User {
  id                  String                @id @default(uuid())
  userName            String
  gender              Gender
  country             String
  city                String
  email               String                @unique
  birthYear           String
  activated           Boolean               @default(false)
  // testUser            Boolean               @default(false)
  invited             Boolean               @default(false)
  invitedUntil        DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  StripeCustomer      StripeCustomer[]
  OneTimePassword     OneTimePassword[]
  LikeGrammarQuestion LikeGrammarQuestion[]
  LikeListening       LikeListening[]
}

model Passage {
  id Int @id @default(autoincrement())

  EnglishLevel   EnglishLevel? @relation(fields: [englishLevelId], references: [id])
  englishLevelId Int?          @unique

  englishTitle  String?
  japaneseTitle String?

  free       Boolean @default(false)
  accessible Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PassageQuestion PassageQuestion?
  PassageSentence PassageSentence?

  @@index([englishLevelId])
}

model PassageQuestion {
  id           Int  @id @default(autoincrement())
  questionList Json

  Passage   Passage @relation(fields: [passageId], references: [id])
  passageId Int     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([passageId])
}

model PassageSentence {
  id           Int  @id @default(autoincrement())
  sentenceList Json

  Passage   Passage @relation(fields: [passageId], references: [id])
  passageId Int     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([passageId])
}
