
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model AdminUser
 * 
 */
export type AdminUser = $Result.DefaultSelection<Prisma.$AdminUserPayload>
/**
 * Model Blog
 * 
 */
export type Blog = $Result.DefaultSelection<Prisma.$BlogPayload>
/**
 * Model BlogCategory
 * 
 */
export type BlogCategory = $Result.DefaultSelection<Prisma.$BlogCategoryPayload>
/**
 * Model BlogUniversity
 * 
 */
export type BlogUniversity = $Result.DefaultSelection<Prisma.$BlogUniversityPayload>
/**
 * Model BlogUniversityDepartment
 * 
 */
export type BlogUniversityDepartment = $Result.DefaultSelection<Prisma.$BlogUniversityDepartmentPayload>
/**
 * Model Grade
 * 
 */
export type Grade = $Result.DefaultSelection<Prisma.$GradePayload>
/**
 * Model Grammar
 * 
 */
export type Grammar = $Result.DefaultSelection<Prisma.$GrammarPayload>
/**
 * Model GrammarQuestion
 * 
 */
export type GrammarQuestion = $Result.DefaultSelection<Prisma.$GrammarQuestionPayload>
/**
 * Model LikeGrammarQuestion
 * 
 */
export type LikeGrammarQuestion = $Result.DefaultSelection<Prisma.$LikeGrammarQuestionPayload>
/**
 * Model LikeListening
 * 
 */
export type LikeListening = $Result.DefaultSelection<Prisma.$LikeListeningPayload>
/**
 * Model Listening
 * 
 */
export type Listening = $Result.DefaultSelection<Prisma.$ListeningPayload>
/**
 * Model Log
 * 
 */
export type Log = $Result.DefaultSelection<Prisma.$LogPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model ProductReview
 * 
 */
export type ProductReview = $Result.DefaultSelection<Prisma.$ProductReviewPayload>
/**
 * Model OneTimePassword
 * 
 */
export type OneTimePassword = $Result.DefaultSelection<Prisma.$OneTimePasswordPayload>
/**
 * Model StripeCheckout
 * 
 */
export type StripeCheckout = $Result.DefaultSelection<Prisma.$StripeCheckoutPayload>
/**
 * Model StripeCustomer
 * 
 */
export type StripeCustomer = $Result.DefaultSelection<Prisma.$StripeCustomerPayload>
/**
 * Model StripeSubscription
 * 
 */
export type StripeSubscription = $Result.DefaultSelection<Prisma.$StripeSubscriptionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Passage
 * 
 */
export type Passage = $Result.DefaultSelection<Prisma.$PassagePayload>
/**
 * Model PassageQuestion
 * 
 */
export type PassageQuestion = $Result.DefaultSelection<Prisma.$PassageQuestionPayload>
/**
 * Model PassageSentence
 * 
 */
export type PassageSentence = $Result.DefaultSelection<Prisma.$PassageSentencePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AdminRole: {
  super: 'super',
  write: 'write',
  read: 'read'
};

export type AdminRole = (typeof AdminRole)[keyof typeof AdminRole]


export const LogAbout: {
  Checkout: 'Checkout',
  Subscription: 'Subscription'
};

export type LogAbout = (typeof LogAbout)[keyof typeof LogAbout]


export const LogLevel: {
  Info: 'Info',
  Warn: 'Warn',
  Error: 'Error'
};

export type LogLevel = (typeof LogLevel)[keyof typeof LogLevel]


export const checkoutType: {
  checkout: 'checkout',
  subscription: 'subscription'
};

export type checkoutType = (typeof checkoutType)[keyof typeof checkoutType]


export const OneTimeNumberUsage: {
  signIn: 'signIn'
};

export type OneTimeNumberUsage = (typeof OneTimeNumberUsage)[keyof typeof OneTimeNumberUsage]


export const checkoutStatus: {
  ordered: 'ordered',
  processing: 'processing',
  shipped: 'shipped',
  cancel: 'cancel'
};

export type checkoutStatus = (typeof checkoutStatus)[keyof typeof checkoutStatus]


export const subscriptionStatus: {
  trialing: 'trialing',
  active: 'active',
  canceled: 'canceled'
};

export type subscriptionStatus = (typeof subscriptionStatus)[keyof typeof subscriptionStatus]


export const Gender: {
  male: 'male',
  female: 'female',
  middle: 'middle'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const PassageLevel: {
  C2: 'C2',
  C1: 'C1',
  B2: 'B2',
  B1: 'B1',
  A2: 'A2',
  A1: 'A1'
};

export type PassageLevel = (typeof PassageLevel)[keyof typeof PassageLevel]

}

export type AdminRole = $Enums.AdminRole

export const AdminRole: typeof $Enums.AdminRole

export type LogAbout = $Enums.LogAbout

export const LogAbout: typeof $Enums.LogAbout

export type LogLevel = $Enums.LogLevel

export const LogLevel: typeof $Enums.LogLevel

export type checkoutType = $Enums.checkoutType

export const checkoutType: typeof $Enums.checkoutType

export type OneTimeNumberUsage = $Enums.OneTimeNumberUsage

export const OneTimeNumberUsage: typeof $Enums.OneTimeNumberUsage

export type checkoutStatus = $Enums.checkoutStatus

export const checkoutStatus: typeof $Enums.checkoutStatus

export type subscriptionStatus = $Enums.subscriptionStatus

export const subscriptionStatus: typeof $Enums.subscriptionStatus

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type PassageLevel = $Enums.PassageLevel

export const PassageLevel: typeof $Enums.PassageLevel

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more AdminUsers
 * const adminUsers = await prisma.adminUser.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more AdminUsers
   * const adminUsers = await prisma.adminUser.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.adminUser`: Exposes CRUD operations for the **AdminUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminUsers
    * const adminUsers = await prisma.adminUser.findMany()
    * ```
    */
  get adminUser(): Prisma.AdminUserDelegate<ExtArgs>;

  /**
   * `prisma.blog`: Exposes CRUD operations for the **Blog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Blogs
    * const blogs = await prisma.blog.findMany()
    * ```
    */
  get blog(): Prisma.BlogDelegate<ExtArgs>;

  /**
   * `prisma.blogCategory`: Exposes CRUD operations for the **BlogCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BlogCategories
    * const blogCategories = await prisma.blogCategory.findMany()
    * ```
    */
  get blogCategory(): Prisma.BlogCategoryDelegate<ExtArgs>;

  /**
   * `prisma.blogUniversity`: Exposes CRUD operations for the **BlogUniversity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BlogUniversities
    * const blogUniversities = await prisma.blogUniversity.findMany()
    * ```
    */
  get blogUniversity(): Prisma.BlogUniversityDelegate<ExtArgs>;

  /**
   * `prisma.blogUniversityDepartment`: Exposes CRUD operations for the **BlogUniversityDepartment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BlogUniversityDepartments
    * const blogUniversityDepartments = await prisma.blogUniversityDepartment.findMany()
    * ```
    */
  get blogUniversityDepartment(): Prisma.BlogUniversityDepartmentDelegate<ExtArgs>;

  /**
   * `prisma.grade`: Exposes CRUD operations for the **Grade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grades
    * const grades = await prisma.grade.findMany()
    * ```
    */
  get grade(): Prisma.GradeDelegate<ExtArgs>;

  /**
   * `prisma.grammar`: Exposes CRUD operations for the **Grammar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grammars
    * const grammars = await prisma.grammar.findMany()
    * ```
    */
  get grammar(): Prisma.GrammarDelegate<ExtArgs>;

  /**
   * `prisma.grammarQuestion`: Exposes CRUD operations for the **GrammarQuestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GrammarQuestions
    * const grammarQuestions = await prisma.grammarQuestion.findMany()
    * ```
    */
  get grammarQuestion(): Prisma.GrammarQuestionDelegate<ExtArgs>;

  /**
   * `prisma.likeGrammarQuestion`: Exposes CRUD operations for the **LikeGrammarQuestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LikeGrammarQuestions
    * const likeGrammarQuestions = await prisma.likeGrammarQuestion.findMany()
    * ```
    */
  get likeGrammarQuestion(): Prisma.LikeGrammarQuestionDelegate<ExtArgs>;

  /**
   * `prisma.likeListening`: Exposes CRUD operations for the **LikeListening** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LikeListenings
    * const likeListenings = await prisma.likeListening.findMany()
    * ```
    */
  get likeListening(): Prisma.LikeListeningDelegate<ExtArgs>;

  /**
   * `prisma.listening`: Exposes CRUD operations for the **Listening** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Listenings
    * const listenings = await prisma.listening.findMany()
    * ```
    */
  get listening(): Prisma.ListeningDelegate<ExtArgs>;

  /**
   * `prisma.log`: Exposes CRUD operations for the **Log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.log.findMany()
    * ```
    */
  get log(): Prisma.LogDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.productReview`: Exposes CRUD operations for the **ProductReview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductReviews
    * const productReviews = await prisma.productReview.findMany()
    * ```
    */
  get productReview(): Prisma.ProductReviewDelegate<ExtArgs>;

  /**
   * `prisma.oneTimePassword`: Exposes CRUD operations for the **OneTimePassword** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OneTimePasswords
    * const oneTimePasswords = await prisma.oneTimePassword.findMany()
    * ```
    */
  get oneTimePassword(): Prisma.OneTimePasswordDelegate<ExtArgs>;

  /**
   * `prisma.stripeCheckout`: Exposes CRUD operations for the **StripeCheckout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StripeCheckouts
    * const stripeCheckouts = await prisma.stripeCheckout.findMany()
    * ```
    */
  get stripeCheckout(): Prisma.StripeCheckoutDelegate<ExtArgs>;

  /**
   * `prisma.stripeCustomer`: Exposes CRUD operations for the **StripeCustomer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StripeCustomers
    * const stripeCustomers = await prisma.stripeCustomer.findMany()
    * ```
    */
  get stripeCustomer(): Prisma.StripeCustomerDelegate<ExtArgs>;

  /**
   * `prisma.stripeSubscription`: Exposes CRUD operations for the **StripeSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StripeSubscriptions
    * const stripeSubscriptions = await prisma.stripeSubscription.findMany()
    * ```
    */
  get stripeSubscription(): Prisma.StripeSubscriptionDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.passage`: Exposes CRUD operations for the **Passage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Passages
    * const passages = await prisma.passage.findMany()
    * ```
    */
  get passage(): Prisma.PassageDelegate<ExtArgs>;

  /**
   * `prisma.passageQuestion`: Exposes CRUD operations for the **PassageQuestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PassageQuestions
    * const passageQuestions = await prisma.passageQuestion.findMany()
    * ```
    */
  get passageQuestion(): Prisma.PassageQuestionDelegate<ExtArgs>;

  /**
   * `prisma.passageSentence`: Exposes CRUD operations for the **PassageSentence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PassageSentences
    * const passageSentences = await prisma.passageSentence.findMany()
    * ```
    */
  get passageSentence(): Prisma.PassageSentenceDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.1
   * Query Engine version: 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    AdminUser: 'AdminUser',
    Blog: 'Blog',
    BlogCategory: 'BlogCategory',
    BlogUniversity: 'BlogUniversity',
    BlogUniversityDepartment: 'BlogUniversityDepartment',
    Grade: 'Grade',
    Grammar: 'Grammar',
    GrammarQuestion: 'GrammarQuestion',
    LikeGrammarQuestion: 'LikeGrammarQuestion',
    LikeListening: 'LikeListening',
    Listening: 'Listening',
    Log: 'Log',
    Product: 'Product',
    ProductReview: 'ProductReview',
    OneTimePassword: 'OneTimePassword',
    StripeCheckout: 'StripeCheckout',
    StripeCustomer: 'StripeCustomer',
    StripeSubscription: 'StripeSubscription',
    User: 'User',
    Passage: 'Passage',
    PassageQuestion: 'PassageQuestion',
    PassageSentence: 'PassageSentence'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'adminUser' | 'blog' | 'blogCategory' | 'blogUniversity' | 'blogUniversityDepartment' | 'grade' | 'grammar' | 'grammarQuestion' | 'likeGrammarQuestion' | 'likeListening' | 'listening' | 'log' | 'product' | 'productReview' | 'oneTimePassword' | 'stripeCheckout' | 'stripeCustomer' | 'stripeSubscription' | 'user' | 'passage' | 'passageQuestion' | 'passageSentence'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      AdminUser: {
        payload: Prisma.$AdminUserPayload<ExtArgs>
        fields: Prisma.AdminUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminUserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminUserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          findFirst: {
            args: Prisma.AdminUserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminUserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          findMany: {
            args: Prisma.AdminUserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>[]
          }
          create: {
            args: Prisma.AdminUserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          createMany: {
            args: Prisma.AdminUserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AdminUserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          update: {
            args: Prisma.AdminUserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          deleteMany: {
            args: Prisma.AdminUserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdminUserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          aggregate: {
            args: Prisma.AdminUserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdminUser>
          }
          groupBy: {
            args: Prisma.AdminUserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdminUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminUserCountArgs<ExtArgs>,
            result: $Utils.Optional<AdminUserCountAggregateOutputType> | number
          }
        }
      }
      Blog: {
        payload: Prisma.$BlogPayload<ExtArgs>
        fields: Prisma.BlogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BlogFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BlogFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          findFirst: {
            args: Prisma.BlogFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BlogFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          findMany: {
            args: Prisma.BlogFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>[]
          }
          create: {
            args: Prisma.BlogCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          createMany: {
            args: Prisma.BlogCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BlogDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          update: {
            args: Prisma.BlogUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          deleteMany: {
            args: Prisma.BlogDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BlogUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BlogUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          aggregate: {
            args: Prisma.BlogAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBlog>
          }
          groupBy: {
            args: Prisma.BlogGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BlogGroupByOutputType>[]
          }
          count: {
            args: Prisma.BlogCountArgs<ExtArgs>,
            result: $Utils.Optional<BlogCountAggregateOutputType> | number
          }
        }
      }
      BlogCategory: {
        payload: Prisma.$BlogCategoryPayload<ExtArgs>
        fields: Prisma.BlogCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BlogCategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BlogCategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogCategoryPayload>
          }
          findFirst: {
            args: Prisma.BlogCategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BlogCategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogCategoryPayload>
          }
          findMany: {
            args: Prisma.BlogCategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogCategoryPayload>[]
          }
          create: {
            args: Prisma.BlogCategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogCategoryPayload>
          }
          createMany: {
            args: Prisma.BlogCategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BlogCategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogCategoryPayload>
          }
          update: {
            args: Prisma.BlogCategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogCategoryPayload>
          }
          deleteMany: {
            args: Prisma.BlogCategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BlogCategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BlogCategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogCategoryPayload>
          }
          aggregate: {
            args: Prisma.BlogCategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBlogCategory>
          }
          groupBy: {
            args: Prisma.BlogCategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BlogCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.BlogCategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<BlogCategoryCountAggregateOutputType> | number
          }
        }
      }
      BlogUniversity: {
        payload: Prisma.$BlogUniversityPayload<ExtArgs>
        fields: Prisma.BlogUniversityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BlogUniversityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BlogUniversityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityPayload>
          }
          findFirst: {
            args: Prisma.BlogUniversityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BlogUniversityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityPayload>
          }
          findMany: {
            args: Prisma.BlogUniversityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityPayload>[]
          }
          create: {
            args: Prisma.BlogUniversityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityPayload>
          }
          createMany: {
            args: Prisma.BlogUniversityCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BlogUniversityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityPayload>
          }
          update: {
            args: Prisma.BlogUniversityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityPayload>
          }
          deleteMany: {
            args: Prisma.BlogUniversityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BlogUniversityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BlogUniversityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityPayload>
          }
          aggregate: {
            args: Prisma.BlogUniversityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBlogUniversity>
          }
          groupBy: {
            args: Prisma.BlogUniversityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BlogUniversityGroupByOutputType>[]
          }
          count: {
            args: Prisma.BlogUniversityCountArgs<ExtArgs>,
            result: $Utils.Optional<BlogUniversityCountAggregateOutputType> | number
          }
        }
      }
      BlogUniversityDepartment: {
        payload: Prisma.$BlogUniversityDepartmentPayload<ExtArgs>
        fields: Prisma.BlogUniversityDepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BlogUniversityDepartmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityDepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BlogUniversityDepartmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityDepartmentPayload>
          }
          findFirst: {
            args: Prisma.BlogUniversityDepartmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityDepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BlogUniversityDepartmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityDepartmentPayload>
          }
          findMany: {
            args: Prisma.BlogUniversityDepartmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityDepartmentPayload>[]
          }
          create: {
            args: Prisma.BlogUniversityDepartmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityDepartmentPayload>
          }
          createMany: {
            args: Prisma.BlogUniversityDepartmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BlogUniversityDepartmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityDepartmentPayload>
          }
          update: {
            args: Prisma.BlogUniversityDepartmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityDepartmentPayload>
          }
          deleteMany: {
            args: Prisma.BlogUniversityDepartmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BlogUniversityDepartmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BlogUniversityDepartmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogUniversityDepartmentPayload>
          }
          aggregate: {
            args: Prisma.BlogUniversityDepartmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBlogUniversityDepartment>
          }
          groupBy: {
            args: Prisma.BlogUniversityDepartmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BlogUniversityDepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.BlogUniversityDepartmentCountArgs<ExtArgs>,
            result: $Utils.Optional<BlogUniversityDepartmentCountAggregateOutputType> | number
          }
        }
      }
      Grade: {
        payload: Prisma.$GradePayload<ExtArgs>
        fields: Prisma.GradeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GradeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GradePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GradeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          findFirst: {
            args: Prisma.GradeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GradePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GradeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          findMany: {
            args: Prisma.GradeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GradePayload>[]
          }
          create: {
            args: Prisma.GradeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          createMany: {
            args: Prisma.GradeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GradeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          update: {
            args: Prisma.GradeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          deleteMany: {
            args: Prisma.GradeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GradeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GradeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          aggregate: {
            args: Prisma.GradeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGrade>
          }
          groupBy: {
            args: Prisma.GradeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GradeGroupByOutputType>[]
          }
          count: {
            args: Prisma.GradeCountArgs<ExtArgs>,
            result: $Utils.Optional<GradeCountAggregateOutputType> | number
          }
        }
      }
      Grammar: {
        payload: Prisma.$GrammarPayload<ExtArgs>
        fields: Prisma.GrammarFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GrammarFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GrammarFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarPayload>
          }
          findFirst: {
            args: Prisma.GrammarFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GrammarFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarPayload>
          }
          findMany: {
            args: Prisma.GrammarFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarPayload>[]
          }
          create: {
            args: Prisma.GrammarCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarPayload>
          }
          createMany: {
            args: Prisma.GrammarCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GrammarDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarPayload>
          }
          update: {
            args: Prisma.GrammarUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarPayload>
          }
          deleteMany: {
            args: Prisma.GrammarDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GrammarUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GrammarUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarPayload>
          }
          aggregate: {
            args: Prisma.GrammarAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGrammar>
          }
          groupBy: {
            args: Prisma.GrammarGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GrammarGroupByOutputType>[]
          }
          count: {
            args: Prisma.GrammarCountArgs<ExtArgs>,
            result: $Utils.Optional<GrammarCountAggregateOutputType> | number
          }
        }
      }
      GrammarQuestion: {
        payload: Prisma.$GrammarQuestionPayload<ExtArgs>
        fields: Prisma.GrammarQuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GrammarQuestionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarQuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GrammarQuestionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarQuestionPayload>
          }
          findFirst: {
            args: Prisma.GrammarQuestionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarQuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GrammarQuestionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarQuestionPayload>
          }
          findMany: {
            args: Prisma.GrammarQuestionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarQuestionPayload>[]
          }
          create: {
            args: Prisma.GrammarQuestionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarQuestionPayload>
          }
          createMany: {
            args: Prisma.GrammarQuestionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GrammarQuestionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarQuestionPayload>
          }
          update: {
            args: Prisma.GrammarQuestionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarQuestionPayload>
          }
          deleteMany: {
            args: Prisma.GrammarQuestionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GrammarQuestionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GrammarQuestionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrammarQuestionPayload>
          }
          aggregate: {
            args: Prisma.GrammarQuestionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGrammarQuestion>
          }
          groupBy: {
            args: Prisma.GrammarQuestionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GrammarQuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.GrammarQuestionCountArgs<ExtArgs>,
            result: $Utils.Optional<GrammarQuestionCountAggregateOutputType> | number
          }
        }
      }
      LikeGrammarQuestion: {
        payload: Prisma.$LikeGrammarQuestionPayload<ExtArgs>
        fields: Prisma.LikeGrammarQuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikeGrammarQuestionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeGrammarQuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikeGrammarQuestionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeGrammarQuestionPayload>
          }
          findFirst: {
            args: Prisma.LikeGrammarQuestionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeGrammarQuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikeGrammarQuestionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeGrammarQuestionPayload>
          }
          findMany: {
            args: Prisma.LikeGrammarQuestionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeGrammarQuestionPayload>[]
          }
          create: {
            args: Prisma.LikeGrammarQuestionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeGrammarQuestionPayload>
          }
          createMany: {
            args: Prisma.LikeGrammarQuestionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LikeGrammarQuestionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeGrammarQuestionPayload>
          }
          update: {
            args: Prisma.LikeGrammarQuestionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeGrammarQuestionPayload>
          }
          deleteMany: {
            args: Prisma.LikeGrammarQuestionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LikeGrammarQuestionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LikeGrammarQuestionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeGrammarQuestionPayload>
          }
          aggregate: {
            args: Prisma.LikeGrammarQuestionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLikeGrammarQuestion>
          }
          groupBy: {
            args: Prisma.LikeGrammarQuestionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LikeGrammarQuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikeGrammarQuestionCountArgs<ExtArgs>,
            result: $Utils.Optional<LikeGrammarQuestionCountAggregateOutputType> | number
          }
        }
      }
      LikeListening: {
        payload: Prisma.$LikeListeningPayload<ExtArgs>
        fields: Prisma.LikeListeningFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikeListeningFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeListeningPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikeListeningFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeListeningPayload>
          }
          findFirst: {
            args: Prisma.LikeListeningFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeListeningPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikeListeningFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeListeningPayload>
          }
          findMany: {
            args: Prisma.LikeListeningFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeListeningPayload>[]
          }
          create: {
            args: Prisma.LikeListeningCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeListeningPayload>
          }
          createMany: {
            args: Prisma.LikeListeningCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LikeListeningDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeListeningPayload>
          }
          update: {
            args: Prisma.LikeListeningUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeListeningPayload>
          }
          deleteMany: {
            args: Prisma.LikeListeningDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LikeListeningUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LikeListeningUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeListeningPayload>
          }
          aggregate: {
            args: Prisma.LikeListeningAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLikeListening>
          }
          groupBy: {
            args: Prisma.LikeListeningGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LikeListeningGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikeListeningCountArgs<ExtArgs>,
            result: $Utils.Optional<LikeListeningCountAggregateOutputType> | number
          }
        }
      }
      Listening: {
        payload: Prisma.$ListeningPayload<ExtArgs>
        fields: Prisma.ListeningFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ListeningFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListeningPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ListeningFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListeningPayload>
          }
          findFirst: {
            args: Prisma.ListeningFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListeningPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ListeningFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListeningPayload>
          }
          findMany: {
            args: Prisma.ListeningFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListeningPayload>[]
          }
          create: {
            args: Prisma.ListeningCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListeningPayload>
          }
          createMany: {
            args: Prisma.ListeningCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ListeningDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListeningPayload>
          }
          update: {
            args: Prisma.ListeningUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListeningPayload>
          }
          deleteMany: {
            args: Prisma.ListeningDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ListeningUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ListeningUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListeningPayload>
          }
          aggregate: {
            args: Prisma.ListeningAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateListening>
          }
          groupBy: {
            args: Prisma.ListeningGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ListeningGroupByOutputType>[]
          }
          count: {
            args: Prisma.ListeningCountArgs<ExtArgs>,
            result: $Utils.Optional<ListeningCountAggregateOutputType> | number
          }
        }
      }
      Log: {
        payload: Prisma.$LogPayload<ExtArgs>
        fields: Prisma.LogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findFirst: {
            args: Prisma.LogFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findMany: {
            args: Prisma.LogFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          create: {
            args: Prisma.LogCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          createMany: {
            args: Prisma.LogCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LogDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          update: {
            args: Prisma.LogUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          deleteMany: {
            args: Prisma.LogDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LogUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LogUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          aggregate: {
            args: Prisma.LogAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLog>
          }
          groupBy: {
            args: Prisma.LogGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LogGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogCountArgs<ExtArgs>,
            result: $Utils.Optional<LogCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      ProductReview: {
        payload: Prisma.$ProductReviewPayload<ExtArgs>
        fields: Prisma.ProductReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductReviewFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductReviewFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductReviewPayload>
          }
          findFirst: {
            args: Prisma.ProductReviewFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductReviewFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductReviewPayload>
          }
          findMany: {
            args: Prisma.ProductReviewFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductReviewPayload>[]
          }
          create: {
            args: Prisma.ProductReviewCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductReviewPayload>
          }
          createMany: {
            args: Prisma.ProductReviewCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductReviewDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductReviewPayload>
          }
          update: {
            args: Prisma.ProductReviewUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductReviewPayload>
          }
          deleteMany: {
            args: Prisma.ProductReviewDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductReviewUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductReviewUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductReviewPayload>
          }
          aggregate: {
            args: Prisma.ProductReviewAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductReview>
          }
          groupBy: {
            args: Prisma.ProductReviewGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductReviewCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductReviewCountAggregateOutputType> | number
          }
        }
      }
      OneTimePassword: {
        payload: Prisma.$OneTimePasswordPayload<ExtArgs>
        fields: Prisma.OneTimePasswordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OneTimePasswordFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OneTimePasswordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OneTimePasswordFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OneTimePasswordPayload>
          }
          findFirst: {
            args: Prisma.OneTimePasswordFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OneTimePasswordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OneTimePasswordFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OneTimePasswordPayload>
          }
          findMany: {
            args: Prisma.OneTimePasswordFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OneTimePasswordPayload>[]
          }
          create: {
            args: Prisma.OneTimePasswordCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OneTimePasswordPayload>
          }
          createMany: {
            args: Prisma.OneTimePasswordCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OneTimePasswordDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OneTimePasswordPayload>
          }
          update: {
            args: Prisma.OneTimePasswordUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OneTimePasswordPayload>
          }
          deleteMany: {
            args: Prisma.OneTimePasswordDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OneTimePasswordUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OneTimePasswordUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OneTimePasswordPayload>
          }
          aggregate: {
            args: Prisma.OneTimePasswordAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOneTimePassword>
          }
          groupBy: {
            args: Prisma.OneTimePasswordGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OneTimePasswordGroupByOutputType>[]
          }
          count: {
            args: Prisma.OneTimePasswordCountArgs<ExtArgs>,
            result: $Utils.Optional<OneTimePasswordCountAggregateOutputType> | number
          }
        }
      }
      StripeCheckout: {
        payload: Prisma.$StripeCheckoutPayload<ExtArgs>
        fields: Prisma.StripeCheckoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StripeCheckoutFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCheckoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StripeCheckoutFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCheckoutPayload>
          }
          findFirst: {
            args: Prisma.StripeCheckoutFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCheckoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StripeCheckoutFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCheckoutPayload>
          }
          findMany: {
            args: Prisma.StripeCheckoutFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCheckoutPayload>[]
          }
          create: {
            args: Prisma.StripeCheckoutCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCheckoutPayload>
          }
          createMany: {
            args: Prisma.StripeCheckoutCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StripeCheckoutDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCheckoutPayload>
          }
          update: {
            args: Prisma.StripeCheckoutUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCheckoutPayload>
          }
          deleteMany: {
            args: Prisma.StripeCheckoutDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StripeCheckoutUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StripeCheckoutUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCheckoutPayload>
          }
          aggregate: {
            args: Prisma.StripeCheckoutAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStripeCheckout>
          }
          groupBy: {
            args: Prisma.StripeCheckoutGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StripeCheckoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.StripeCheckoutCountArgs<ExtArgs>,
            result: $Utils.Optional<StripeCheckoutCountAggregateOutputType> | number
          }
        }
      }
      StripeCustomer: {
        payload: Prisma.$StripeCustomerPayload<ExtArgs>
        fields: Prisma.StripeCustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StripeCustomerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StripeCustomerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCustomerPayload>
          }
          findFirst: {
            args: Prisma.StripeCustomerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StripeCustomerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCustomerPayload>
          }
          findMany: {
            args: Prisma.StripeCustomerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCustomerPayload>[]
          }
          create: {
            args: Prisma.StripeCustomerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCustomerPayload>
          }
          createMany: {
            args: Prisma.StripeCustomerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StripeCustomerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCustomerPayload>
          }
          update: {
            args: Prisma.StripeCustomerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCustomerPayload>
          }
          deleteMany: {
            args: Prisma.StripeCustomerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StripeCustomerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StripeCustomerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeCustomerPayload>
          }
          aggregate: {
            args: Prisma.StripeCustomerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStripeCustomer>
          }
          groupBy: {
            args: Prisma.StripeCustomerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StripeCustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.StripeCustomerCountArgs<ExtArgs>,
            result: $Utils.Optional<StripeCustomerCountAggregateOutputType> | number
          }
        }
      }
      StripeSubscription: {
        payload: Prisma.$StripeSubscriptionPayload<ExtArgs>
        fields: Prisma.StripeSubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StripeSubscriptionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeSubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StripeSubscriptionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeSubscriptionPayload>
          }
          findFirst: {
            args: Prisma.StripeSubscriptionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeSubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StripeSubscriptionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeSubscriptionPayload>
          }
          findMany: {
            args: Prisma.StripeSubscriptionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeSubscriptionPayload>[]
          }
          create: {
            args: Prisma.StripeSubscriptionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeSubscriptionPayload>
          }
          createMany: {
            args: Prisma.StripeSubscriptionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StripeSubscriptionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeSubscriptionPayload>
          }
          update: {
            args: Prisma.StripeSubscriptionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeSubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.StripeSubscriptionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StripeSubscriptionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StripeSubscriptionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StripeSubscriptionPayload>
          }
          aggregate: {
            args: Prisma.StripeSubscriptionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStripeSubscription>
          }
          groupBy: {
            args: Prisma.StripeSubscriptionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StripeSubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.StripeSubscriptionCountArgs<ExtArgs>,
            result: $Utils.Optional<StripeSubscriptionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Passage: {
        payload: Prisma.$PassagePayload<ExtArgs>
        fields: Prisma.PassageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PassageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PassageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagePayload>
          }
          findFirst: {
            args: Prisma.PassageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PassageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagePayload>
          }
          findMany: {
            args: Prisma.PassageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagePayload>[]
          }
          create: {
            args: Prisma.PassageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagePayload>
          }
          createMany: {
            args: Prisma.PassageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PassageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagePayload>
          }
          update: {
            args: Prisma.PassageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagePayload>
          }
          deleteMany: {
            args: Prisma.PassageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PassageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PassageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassagePayload>
          }
          aggregate: {
            args: Prisma.PassageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePassage>
          }
          groupBy: {
            args: Prisma.PassageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PassageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PassageCountArgs<ExtArgs>,
            result: $Utils.Optional<PassageCountAggregateOutputType> | number
          }
        }
      }
      PassageQuestion: {
        payload: Prisma.$PassageQuestionPayload<ExtArgs>
        fields: Prisma.PassageQuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PassageQuestionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageQuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PassageQuestionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageQuestionPayload>
          }
          findFirst: {
            args: Prisma.PassageQuestionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageQuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PassageQuestionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageQuestionPayload>
          }
          findMany: {
            args: Prisma.PassageQuestionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageQuestionPayload>[]
          }
          create: {
            args: Prisma.PassageQuestionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageQuestionPayload>
          }
          createMany: {
            args: Prisma.PassageQuestionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PassageQuestionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageQuestionPayload>
          }
          update: {
            args: Prisma.PassageQuestionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageQuestionPayload>
          }
          deleteMany: {
            args: Prisma.PassageQuestionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PassageQuestionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PassageQuestionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageQuestionPayload>
          }
          aggregate: {
            args: Prisma.PassageQuestionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePassageQuestion>
          }
          groupBy: {
            args: Prisma.PassageQuestionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PassageQuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PassageQuestionCountArgs<ExtArgs>,
            result: $Utils.Optional<PassageQuestionCountAggregateOutputType> | number
          }
        }
      }
      PassageSentence: {
        payload: Prisma.$PassageSentencePayload<ExtArgs>
        fields: Prisma.PassageSentenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PassageSentenceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageSentencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PassageSentenceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageSentencePayload>
          }
          findFirst: {
            args: Prisma.PassageSentenceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageSentencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PassageSentenceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageSentencePayload>
          }
          findMany: {
            args: Prisma.PassageSentenceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageSentencePayload>[]
          }
          create: {
            args: Prisma.PassageSentenceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageSentencePayload>
          }
          createMany: {
            args: Prisma.PassageSentenceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PassageSentenceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageSentencePayload>
          }
          update: {
            args: Prisma.PassageSentenceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageSentencePayload>
          }
          deleteMany: {
            args: Prisma.PassageSentenceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PassageSentenceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PassageSentenceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageSentencePayload>
          }
          aggregate: {
            args: Prisma.PassageSentenceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePassageSentence>
          }
          groupBy: {
            args: Prisma.PassageSentenceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PassageSentenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PassageSentenceCountArgs<ExtArgs>,
            result: $Utils.Optional<PassageSentenceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AdminUserCountOutputType
   */

  export type AdminUserCountOutputType = {
    OneTimePassword: number
  }

  export type AdminUserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    OneTimePassword?: boolean | AdminUserCountOutputTypeCountOneTimePasswordArgs
  }

  // Custom InputTypes

  /**
   * AdminUserCountOutputType without action
   */
  export type AdminUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUserCountOutputType
     */
    select?: AdminUserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AdminUserCountOutputType without action
   */
  export type AdminUserCountOutputTypeCountOneTimePasswordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OneTimePasswordWhereInput
  }



  /**
   * Count Type BlogCountOutputType
   */

  export type BlogCountOutputType = {
    BlogUniversityDepartment: number
  }

  export type BlogCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BlogUniversityDepartment?: boolean | BlogCountOutputTypeCountBlogUniversityDepartmentArgs
  }

  // Custom InputTypes

  /**
   * BlogCountOutputType without action
   */
  export type BlogCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogCountOutputType
     */
    select?: BlogCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BlogCountOutputType without action
   */
  export type BlogCountOutputTypeCountBlogUniversityDepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlogUniversityDepartmentWhereInput
  }



  /**
   * Count Type BlogCategoryCountOutputType
   */

  export type BlogCategoryCountOutputType = {
    Blog: number
  }

  export type BlogCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Blog?: boolean | BlogCategoryCountOutputTypeCountBlogArgs
  }

  // Custom InputTypes

  /**
   * BlogCategoryCountOutputType without action
   */
  export type BlogCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogCategoryCountOutputType
     */
    select?: BlogCategoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BlogCategoryCountOutputType without action
   */
  export type BlogCategoryCountOutputTypeCountBlogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlogWhereInput
  }



  /**
   * Count Type BlogUniversityCountOutputType
   */

  export type BlogUniversityCountOutputType = {
    BlogUniversityDepartment: number
  }

  export type BlogUniversityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BlogUniversityDepartment?: boolean | BlogUniversityCountOutputTypeCountBlogUniversityDepartmentArgs
  }

  // Custom InputTypes

  /**
   * BlogUniversityCountOutputType without action
   */
  export type BlogUniversityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversityCountOutputType
     */
    select?: BlogUniversityCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BlogUniversityCountOutputType without action
   */
  export type BlogUniversityCountOutputTypeCountBlogUniversityDepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlogUniversityDepartmentWhereInput
  }



  /**
   * Count Type GradeCountOutputType
   */

  export type GradeCountOutputType = {
    Grammar: number
  }

  export type GradeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Grammar?: boolean | GradeCountOutputTypeCountGrammarArgs
  }

  // Custom InputTypes

  /**
   * GradeCountOutputType without action
   */
  export type GradeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeCountOutputType
     */
    select?: GradeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GradeCountOutputType without action
   */
  export type GradeCountOutputTypeCountGrammarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrammarWhereInput
  }



  /**
   * Count Type GrammarCountOutputType
   */

  export type GrammarCountOutputType = {
    GrammarQuestion: number
  }

  export type GrammarCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    GrammarQuestion?: boolean | GrammarCountOutputTypeCountGrammarQuestionArgs
  }

  // Custom InputTypes

  /**
   * GrammarCountOutputType without action
   */
  export type GrammarCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrammarCountOutputType
     */
    select?: GrammarCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GrammarCountOutputType without action
   */
  export type GrammarCountOutputTypeCountGrammarQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrammarQuestionWhereInput
  }



  /**
   * Count Type GrammarQuestionCountOutputType
   */

  export type GrammarQuestionCountOutputType = {
    LikeGrammarQuestion: number
  }

  export type GrammarQuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    LikeGrammarQuestion?: boolean | GrammarQuestionCountOutputTypeCountLikeGrammarQuestionArgs
  }

  // Custom InputTypes

  /**
   * GrammarQuestionCountOutputType without action
   */
  export type GrammarQuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrammarQuestionCountOutputType
     */
    select?: GrammarQuestionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GrammarQuestionCountOutputType without action
   */
  export type GrammarQuestionCountOutputTypeCountLikeGrammarQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeGrammarQuestionWhereInput
  }



  /**
   * Count Type ListeningCountOutputType
   */

  export type ListeningCountOutputType = {
    LikeListening: number
  }

  export type ListeningCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    LikeListening?: boolean | ListeningCountOutputTypeCountLikeListeningArgs
  }

  // Custom InputTypes

  /**
   * ListeningCountOutputType without action
   */
  export type ListeningCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListeningCountOutputType
     */
    select?: ListeningCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ListeningCountOutputType without action
   */
  export type ListeningCountOutputTypeCountLikeListeningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeListeningWhereInput
  }



  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    ProductReview: number
    StripeCheckout: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ProductReview?: boolean | ProductCountOutputTypeCountProductReviewArgs
    StripeCheckout?: boolean | ProductCountOutputTypeCountStripeCheckoutArgs
  }

  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountProductReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductReviewWhereInput
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountStripeCheckoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StripeCheckoutWhereInput
  }



  /**
   * Count Type StripeCheckoutCountOutputType
   */

  export type StripeCheckoutCountOutputType = {
    ProductReview: number
  }

  export type StripeCheckoutCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ProductReview?: boolean | StripeCheckoutCountOutputTypeCountProductReviewArgs
  }

  // Custom InputTypes

  /**
   * StripeCheckoutCountOutputType without action
   */
  export type StripeCheckoutCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCheckoutCountOutputType
     */
    select?: StripeCheckoutCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StripeCheckoutCountOutputType without action
   */
  export type StripeCheckoutCountOutputTypeCountProductReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductReviewWhereInput
  }



  /**
   * Count Type StripeCustomerCountOutputType
   */

  export type StripeCustomerCountOutputType = {
    StripeCheckout: number
    StripeSubscription: number
  }

  export type StripeCustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    StripeCheckout?: boolean | StripeCustomerCountOutputTypeCountStripeCheckoutArgs
    StripeSubscription?: boolean | StripeCustomerCountOutputTypeCountStripeSubscriptionArgs
  }

  // Custom InputTypes

  /**
   * StripeCustomerCountOutputType without action
   */
  export type StripeCustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCustomerCountOutputType
     */
    select?: StripeCustomerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StripeCustomerCountOutputType without action
   */
  export type StripeCustomerCountOutputTypeCountStripeCheckoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StripeCheckoutWhereInput
  }


  /**
   * StripeCustomerCountOutputType without action
   */
  export type StripeCustomerCountOutputTypeCountStripeSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StripeSubscriptionWhereInput
  }



  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    StripeCustomer: number
    OneTimePassword: number
    LikeGrammarQuestion: number
    LikeListening: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    StripeCustomer?: boolean | UserCountOutputTypeCountStripeCustomerArgs
    OneTimePassword?: boolean | UserCountOutputTypeCountOneTimePasswordArgs
    LikeGrammarQuestion?: boolean | UserCountOutputTypeCountLikeGrammarQuestionArgs
    LikeListening?: boolean | UserCountOutputTypeCountLikeListeningArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStripeCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StripeCustomerWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOneTimePasswordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OneTimePasswordWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikeGrammarQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeGrammarQuestionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikeListeningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeListeningWhereInput
  }



  /**
   * Count Type PassageCountOutputType
   */

  export type PassageCountOutputType = {
    PassageQuestion: number
    PassageSentence: number
  }

  export type PassageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PassageQuestion?: boolean | PassageCountOutputTypeCountPassageQuestionArgs
    PassageSentence?: boolean | PassageCountOutputTypeCountPassageSentenceArgs
  }

  // Custom InputTypes

  /**
   * PassageCountOutputType without action
   */
  export type PassageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageCountOutputType
     */
    select?: PassageCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PassageCountOutputType without action
   */
  export type PassageCountOutputTypeCountPassageQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassageQuestionWhereInput
  }


  /**
   * PassageCountOutputType without action
   */
  export type PassageCountOutputTypeCountPassageSentenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassageSentenceWhereInput
  }



  /**
   * Models
   */

  /**
   * Model AdminUser
   */

  export type AggregateAdminUser = {
    _count: AdminUserCountAggregateOutputType | null
    _min: AdminUserMinAggregateOutputType | null
    _max: AdminUserMaxAggregateOutputType | null
  }

  export type AdminUserMinAggregateOutputType = {
    id: string | null
    role: $Enums.AdminRole | null
    adminName: string | null
    adminEmail: string | null
    password: string | null
  }

  export type AdminUserMaxAggregateOutputType = {
    id: string | null
    role: $Enums.AdminRole | null
    adminName: string | null
    adminEmail: string | null
    password: string | null
  }

  export type AdminUserCountAggregateOutputType = {
    id: number
    role: number
    adminName: number
    adminEmail: number
    password: number
    _all: number
  }


  export type AdminUserMinAggregateInputType = {
    id?: true
    role?: true
    adminName?: true
    adminEmail?: true
    password?: true
  }

  export type AdminUserMaxAggregateInputType = {
    id?: true
    role?: true
    adminName?: true
    adminEmail?: true
    password?: true
  }

  export type AdminUserCountAggregateInputType = {
    id?: true
    role?: true
    adminName?: true
    adminEmail?: true
    password?: true
    _all?: true
  }

  export type AdminUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminUser to aggregate.
     */
    where?: AdminUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminUsers to fetch.
     */
    orderBy?: AdminUserOrderByWithRelationInput | AdminUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminUsers
    **/
    _count?: true | AdminUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminUserMaxAggregateInputType
  }

  export type GetAdminUserAggregateType<T extends AdminUserAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminUser[P]>
      : GetScalarType<T[P], AggregateAdminUser[P]>
  }




  export type AdminUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminUserWhereInput
    orderBy?: AdminUserOrderByWithAggregationInput | AdminUserOrderByWithAggregationInput[]
    by: AdminUserScalarFieldEnum[] | AdminUserScalarFieldEnum
    having?: AdminUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminUserCountAggregateInputType | true
    _min?: AdminUserMinAggregateInputType
    _max?: AdminUserMaxAggregateInputType
  }

  export type AdminUserGroupByOutputType = {
    id: string
    role: $Enums.AdminRole
    adminName: string
    adminEmail: string
    password: string
    _count: AdminUserCountAggregateOutputType | null
    _min: AdminUserMinAggregateOutputType | null
    _max: AdminUserMaxAggregateOutputType | null
  }

  type GetAdminUserGroupByPayload<T extends AdminUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminUserGroupByOutputType[P]>
            : GetScalarType<T[P], AdminUserGroupByOutputType[P]>
        }
      >
    >


  export type AdminUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    adminName?: boolean
    adminEmail?: boolean
    password?: boolean
    OneTimePassword?: boolean | AdminUser$OneTimePasswordArgs<ExtArgs>
    _count?: boolean | AdminUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminUser"]>

  export type AdminUserSelectScalar = {
    id?: boolean
    role?: boolean
    adminName?: boolean
    adminEmail?: boolean
    password?: boolean
  }

  export type AdminUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    OneTimePassword?: boolean | AdminUser$OneTimePasswordArgs<ExtArgs>
    _count?: boolean | AdminUserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AdminUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminUser"
    objects: {
      OneTimePassword: Prisma.$OneTimePasswordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: $Enums.AdminRole
      adminName: string
      adminEmail: string
      password: string
    }, ExtArgs["result"]["adminUser"]>
    composites: {}
  }


  type AdminUserGetPayload<S extends boolean | null | undefined | AdminUserDefaultArgs> = $Result.GetResult<Prisma.$AdminUserPayload, S>

  type AdminUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminUserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AdminUserCountAggregateInputType | true
    }

  export interface AdminUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminUser'], meta: { name: 'AdminUser' } }
    /**
     * Find zero or one AdminUser that matches the filter.
     * @param {AdminUserFindUniqueArgs} args - Arguments to find a AdminUser
     * @example
     * // Get one AdminUser
     * const adminUser = await prisma.adminUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminUserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUserFindUniqueArgs<ExtArgs>>
    ): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AdminUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdminUserFindUniqueOrThrowArgs} args - Arguments to find a AdminUser
     * @example
     * // Get one AdminUser
     * const adminUser = await prisma.adminUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminUserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminUserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AdminUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserFindFirstArgs} args - Arguments to find a AdminUser
     * @example
     * // Get one AdminUser
     * const adminUser = await prisma.adminUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminUserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminUserFindFirstArgs<ExtArgs>>
    ): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AdminUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserFindFirstOrThrowArgs} args - Arguments to find a AdminUser
     * @example
     * // Get one AdminUser
     * const adminUser = await prisma.adminUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminUserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminUserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AdminUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminUsers
     * const adminUsers = await prisma.adminUser.findMany()
     * 
     * // Get first 10 AdminUsers
     * const adminUsers = await prisma.adminUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminUserWithIdOnly = await prisma.adminUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdminUserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminUserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AdminUser.
     * @param {AdminUserCreateArgs} args - Arguments to create a AdminUser.
     * @example
     * // Create one AdminUser
     * const AdminUser = await prisma.adminUser.create({
     *   data: {
     *     // ... data to create a AdminUser
     *   }
     * })
     * 
    **/
    create<T extends AdminUserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUserCreateArgs<ExtArgs>>
    ): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AdminUsers.
     *     @param {AdminUserCreateManyArgs} args - Arguments to create many AdminUsers.
     *     @example
     *     // Create many AdminUsers
     *     const adminUser = await prisma.adminUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdminUserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminUserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AdminUser.
     * @param {AdminUserDeleteArgs} args - Arguments to delete one AdminUser.
     * @example
     * // Delete one AdminUser
     * const AdminUser = await prisma.adminUser.delete({
     *   where: {
     *     // ... filter to delete one AdminUser
     *   }
     * })
     * 
    **/
    delete<T extends AdminUserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUserDeleteArgs<ExtArgs>>
    ): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AdminUser.
     * @param {AdminUserUpdateArgs} args - Arguments to update one AdminUser.
     * @example
     * // Update one AdminUser
     * const adminUser = await prisma.adminUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUserUpdateArgs<ExtArgs>>
    ): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AdminUsers.
     * @param {AdminUserDeleteManyArgs} args - Arguments to filter AdminUsers to delete.
     * @example
     * // Delete a few AdminUsers
     * const { count } = await prisma.adminUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminUserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminUserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminUsers
     * const adminUser = await prisma.adminUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AdminUser.
     * @param {AdminUserUpsertArgs} args - Arguments to update or create a AdminUser.
     * @example
     * // Update or create a AdminUser
     * const adminUser = await prisma.adminUser.upsert({
     *   create: {
     *     // ... data to create a AdminUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminUser we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUserUpsertArgs<ExtArgs>>
    ): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AdminUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserCountArgs} args - Arguments to filter AdminUsers to count.
     * @example
     * // Count the number of AdminUsers
     * const count = await prisma.adminUser.count({
     *   where: {
     *     // ... the filter for the AdminUsers we want to count
     *   }
     * })
    **/
    count<T extends AdminUserCountArgs>(
      args?: Subset<T, AdminUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminUserAggregateArgs>(args: Subset<T, AdminUserAggregateArgs>): Prisma.PrismaPromise<GetAdminUserAggregateType<T>>

    /**
     * Group by AdminUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminUserGroupByArgs['orderBy'] }
        : { orderBy?: AdminUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminUser model
   */
  readonly fields: AdminUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    OneTimePassword<T extends AdminUser$OneTimePasswordArgs<ExtArgs> = {}>(args?: Subset<T, AdminUser$OneTimePasswordArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OneTimePasswordPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AdminUser model
   */ 
  interface AdminUserFieldRefs {
    readonly id: FieldRef<"AdminUser", 'String'>
    readonly role: FieldRef<"AdminUser", 'AdminRole'>
    readonly adminName: FieldRef<"AdminUser", 'String'>
    readonly adminEmail: FieldRef<"AdminUser", 'String'>
    readonly password: FieldRef<"AdminUser", 'String'>
  }
    

  // Custom InputTypes

  /**
   * AdminUser findUnique
   */
  export type AdminUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter, which AdminUser to fetch.
     */
    where: AdminUserWhereUniqueInput
  }


  /**
   * AdminUser findUniqueOrThrow
   */
  export type AdminUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter, which AdminUser to fetch.
     */
    where: AdminUserWhereUniqueInput
  }


  /**
   * AdminUser findFirst
   */
  export type AdminUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter, which AdminUser to fetch.
     */
    where?: AdminUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminUsers to fetch.
     */
    orderBy?: AdminUserOrderByWithRelationInput | AdminUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminUsers.
     */
    cursor?: AdminUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminUsers.
     */
    distinct?: AdminUserScalarFieldEnum | AdminUserScalarFieldEnum[]
  }


  /**
   * AdminUser findFirstOrThrow
   */
  export type AdminUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter, which AdminUser to fetch.
     */
    where?: AdminUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminUsers to fetch.
     */
    orderBy?: AdminUserOrderByWithRelationInput | AdminUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminUsers.
     */
    cursor?: AdminUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminUsers.
     */
    distinct?: AdminUserScalarFieldEnum | AdminUserScalarFieldEnum[]
  }


  /**
   * AdminUser findMany
   */
  export type AdminUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter, which AdminUsers to fetch.
     */
    where?: AdminUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminUsers to fetch.
     */
    orderBy?: AdminUserOrderByWithRelationInput | AdminUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminUsers.
     */
    cursor?: AdminUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminUsers.
     */
    skip?: number
    distinct?: AdminUserScalarFieldEnum | AdminUserScalarFieldEnum[]
  }


  /**
   * AdminUser create
   */
  export type AdminUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminUser.
     */
    data: XOR<AdminUserCreateInput, AdminUserUncheckedCreateInput>
  }


  /**
   * AdminUser createMany
   */
  export type AdminUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminUsers.
     */
    data: AdminUserCreateManyInput | AdminUserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AdminUser update
   */
  export type AdminUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminUser.
     */
    data: XOR<AdminUserUpdateInput, AdminUserUncheckedUpdateInput>
    /**
     * Choose, which AdminUser to update.
     */
    where: AdminUserWhereUniqueInput
  }


  /**
   * AdminUser updateMany
   */
  export type AdminUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminUsers.
     */
    data: XOR<AdminUserUpdateManyMutationInput, AdminUserUncheckedUpdateManyInput>
    /**
     * Filter which AdminUsers to update
     */
    where?: AdminUserWhereInput
  }


  /**
   * AdminUser upsert
   */
  export type AdminUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminUser to update in case it exists.
     */
    where: AdminUserWhereUniqueInput
    /**
     * In case the AdminUser found by the `where` argument doesn't exist, create a new AdminUser with this data.
     */
    create: XOR<AdminUserCreateInput, AdminUserUncheckedCreateInput>
    /**
     * In case the AdminUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUserUpdateInput, AdminUserUncheckedUpdateInput>
  }


  /**
   * AdminUser delete
   */
  export type AdminUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter which AdminUser to delete.
     */
    where: AdminUserWhereUniqueInput
  }


  /**
   * AdminUser deleteMany
   */
  export type AdminUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminUsers to delete
     */
    where?: AdminUserWhereInput
  }


  /**
   * AdminUser.OneTimePassword
   */
  export type AdminUser$OneTimePasswordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OneTimePassword
     */
    select?: OneTimePasswordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneTimePasswordInclude<ExtArgs> | null
    where?: OneTimePasswordWhereInput
    orderBy?: OneTimePasswordOrderByWithRelationInput | OneTimePasswordOrderByWithRelationInput[]
    cursor?: OneTimePasswordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OneTimePasswordScalarFieldEnum | OneTimePasswordScalarFieldEnum[]
  }


  /**
   * AdminUser without action
   */
  export type AdminUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminUserInclude<ExtArgs> | null
  }



  /**
   * Model Blog
   */

  export type AggregateBlog = {
    _count: BlogCountAggregateOutputType | null
    _avg: BlogAvgAggregateOutputType | null
    _sum: BlogSumAggregateOutputType | null
    _min: BlogMinAggregateOutputType | null
    _max: BlogMaxAggregateOutputType | null
  }

  export type BlogAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type BlogSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type BlogMinAggregateOutputType = {
    id: number | null
    categoryId: number | null
    published: boolean | null
    name: string | null
    title: string | null
    keywordList: string | null
    description: string | null
  }

  export type BlogMaxAggregateOutputType = {
    id: number | null
    categoryId: number | null
    published: boolean | null
    name: string | null
    title: string | null
    keywordList: string | null
    description: string | null
  }

  export type BlogCountAggregateOutputType = {
    id: number
    categoryId: number
    published: number
    name: number
    title: number
    keywordList: number
    description: number
    _all: number
  }


  export type BlogAvgAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type BlogSumAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type BlogMinAggregateInputType = {
    id?: true
    categoryId?: true
    published?: true
    name?: true
    title?: true
    keywordList?: true
    description?: true
  }

  export type BlogMaxAggregateInputType = {
    id?: true
    categoryId?: true
    published?: true
    name?: true
    title?: true
    keywordList?: true
    description?: true
  }

  export type BlogCountAggregateInputType = {
    id?: true
    categoryId?: true
    published?: true
    name?: true
    title?: true
    keywordList?: true
    description?: true
    _all?: true
  }

  export type BlogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Blog to aggregate.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Blogs
    **/
    _count?: true | BlogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BlogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BlogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlogMaxAggregateInputType
  }

  export type GetBlogAggregateType<T extends BlogAggregateArgs> = {
        [P in keyof T & keyof AggregateBlog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlog[P]>
      : GetScalarType<T[P], AggregateBlog[P]>
  }




  export type BlogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlogWhereInput
    orderBy?: BlogOrderByWithAggregationInput | BlogOrderByWithAggregationInput[]
    by: BlogScalarFieldEnum[] | BlogScalarFieldEnum
    having?: BlogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlogCountAggregateInputType | true
    _avg?: BlogAvgAggregateInputType
    _sum?: BlogSumAggregateInputType
    _min?: BlogMinAggregateInputType
    _max?: BlogMaxAggregateInputType
  }

  export type BlogGroupByOutputType = {
    id: number
    categoryId: number
    published: boolean
    name: string
    title: string
    keywordList: string
    description: string
    _count: BlogCountAggregateOutputType | null
    _avg: BlogAvgAggregateOutputType | null
    _sum: BlogSumAggregateOutputType | null
    _min: BlogMinAggregateOutputType | null
    _max: BlogMaxAggregateOutputType | null
  }

  type GetBlogGroupByPayload<T extends BlogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BlogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlogGroupByOutputType[P]>
            : GetScalarType<T[P], BlogGroupByOutputType[P]>
        }
      >
    >


  export type BlogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    published?: boolean
    name?: boolean
    title?: boolean
    keywordList?: boolean
    description?: boolean
    Category?: boolean | BlogCategoryDefaultArgs<ExtArgs>
    BlogUniversityDepartment?: boolean | Blog$BlogUniversityDepartmentArgs<ExtArgs>
    _count?: boolean | BlogCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["blog"]>

  export type BlogSelectScalar = {
    id?: boolean
    categoryId?: boolean
    published?: boolean
    name?: boolean
    title?: boolean
    keywordList?: boolean
    description?: boolean
  }

  export type BlogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Category?: boolean | BlogCategoryDefaultArgs<ExtArgs>
    BlogUniversityDepartment?: boolean | Blog$BlogUniversityDepartmentArgs<ExtArgs>
    _count?: boolean | BlogCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $BlogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Blog"
    objects: {
      Category: Prisma.$BlogCategoryPayload<ExtArgs>
      BlogUniversityDepartment: Prisma.$BlogUniversityDepartmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoryId: number
      published: boolean
      name: string
      title: string
      keywordList: string
      description: string
    }, ExtArgs["result"]["blog"]>
    composites: {}
  }


  type BlogGetPayload<S extends boolean | null | undefined | BlogDefaultArgs> = $Result.GetResult<Prisma.$BlogPayload, S>

  type BlogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BlogFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: BlogCountAggregateInputType | true
    }

  export interface BlogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Blog'], meta: { name: 'Blog' } }
    /**
     * Find zero or one Blog that matches the filter.
     * @param {BlogFindUniqueArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BlogFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BlogFindUniqueArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Blog that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BlogFindUniqueOrThrowArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BlogFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Blog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogFindFirstArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BlogFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogFindFirstArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Blog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogFindFirstOrThrowArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BlogFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Blogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Blogs
     * const blogs = await prisma.blog.findMany()
     * 
     * // Get first 10 Blogs
     * const blogs = await prisma.blog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blogWithIdOnly = await prisma.blog.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BlogFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Blog.
     * @param {BlogCreateArgs} args - Arguments to create a Blog.
     * @example
     * // Create one Blog
     * const Blog = await prisma.blog.create({
     *   data: {
     *     // ... data to create a Blog
     *   }
     * })
     * 
    **/
    create<T extends BlogCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BlogCreateArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Blogs.
     *     @param {BlogCreateManyArgs} args - Arguments to create many Blogs.
     *     @example
     *     // Create many Blogs
     *     const blog = await prisma.blog.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BlogCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Blog.
     * @param {BlogDeleteArgs} args - Arguments to delete one Blog.
     * @example
     * // Delete one Blog
     * const Blog = await prisma.blog.delete({
     *   where: {
     *     // ... filter to delete one Blog
     *   }
     * })
     * 
    **/
    delete<T extends BlogDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BlogDeleteArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Blog.
     * @param {BlogUpdateArgs} args - Arguments to update one Blog.
     * @example
     * // Update one Blog
     * const blog = await prisma.blog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BlogUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUpdateArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Blogs.
     * @param {BlogDeleteManyArgs} args - Arguments to filter Blogs to delete.
     * @example
     * // Delete a few Blogs
     * const { count } = await prisma.blog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BlogDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Blogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Blogs
     * const blog = await prisma.blog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BlogUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Blog.
     * @param {BlogUpsertArgs} args - Arguments to update or create a Blog.
     * @example
     * // Update or create a Blog
     * const blog = await prisma.blog.upsert({
     *   create: {
     *     // ... data to create a Blog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Blog we want to update
     *   }
     * })
    **/
    upsert<T extends BlogUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUpsertArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Blogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogCountArgs} args - Arguments to filter Blogs to count.
     * @example
     * // Count the number of Blogs
     * const count = await prisma.blog.count({
     *   where: {
     *     // ... the filter for the Blogs we want to count
     *   }
     * })
    **/
    count<T extends BlogCountArgs>(
      args?: Subset<T, BlogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Blog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlogAggregateArgs>(args: Subset<T, BlogAggregateArgs>): Prisma.PrismaPromise<GetBlogAggregateType<T>>

    /**
     * Group by Blog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlogGroupByArgs['orderBy'] }
        : { orderBy?: BlogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Blog model
   */
  readonly fields: BlogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Blog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BlogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Category<T extends BlogCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BlogCategoryDefaultArgs<ExtArgs>>): Prisma__BlogCategoryClient<$Result.GetResult<Prisma.$BlogCategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    BlogUniversityDepartment<T extends Blog$BlogUniversityDepartmentArgs<ExtArgs> = {}>(args?: Subset<T, Blog$BlogUniversityDepartmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlogUniversityDepartmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Blog model
   */ 
  interface BlogFieldRefs {
    readonly id: FieldRef<"Blog", 'Int'>
    readonly categoryId: FieldRef<"Blog", 'Int'>
    readonly published: FieldRef<"Blog", 'Boolean'>
    readonly name: FieldRef<"Blog", 'String'>
    readonly title: FieldRef<"Blog", 'String'>
    readonly keywordList: FieldRef<"Blog", 'String'>
    readonly description: FieldRef<"Blog", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Blog findUnique
   */
  export type BlogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude<ExtArgs> | null
    /**
     * Filter, which Blog to fetch.
     */
    where: BlogWhereUniqueInput
  }


  /**
   * Blog findUniqueOrThrow
   */
  export type BlogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude<ExtArgs> | null
    /**
     * Filter, which Blog to fetch.
     */
    where: BlogWhereUniqueInput
  }


  /**
   * Blog findFirst
   */
  export type BlogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude<ExtArgs> | null
    /**
     * Filter, which Blog to fetch.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Blogs.
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Blogs.
     */
    distinct?: BlogScalarFieldEnum | BlogScalarFieldEnum[]
  }


  /**
   * Blog findFirstOrThrow
   */
  export type BlogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude<ExtArgs> | null
    /**
     * Filter, which Blog to fetch.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Blogs.
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Blogs.
     */
    distinct?: BlogScalarFieldEnum | BlogScalarFieldEnum[]
  }


  /**
   * Blog findMany
   */
  export type BlogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude<ExtArgs> | null
    /**
     * Filter, which Blogs to fetch.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Blogs.
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    distinct?: BlogScalarFieldEnum | BlogScalarFieldEnum[]
  }


  /**
   * Blog create
   */
  export type BlogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude<ExtArgs> | null
    /**
     * The data needed to create a Blog.
     */
    data: XOR<BlogCreateInput, BlogUncheckedCreateInput>
  }


  /**
   * Blog createMany
   */
  export type BlogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Blogs.
     */
    data: BlogCreateManyInput | BlogCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Blog update
   */
  export type BlogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude<ExtArgs> | null
    /**
     * The data needed to update a Blog.
     */
    data: XOR<BlogUpdateInput, BlogUncheckedUpdateInput>
    /**
     * Choose, which Blog to update.
     */
    where: BlogWhereUniqueInput
  }


  /**
   * Blog updateMany
   */
  export type BlogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Blogs.
     */
    data: XOR<BlogUpdateManyMutationInput, BlogUncheckedUpdateManyInput>
    /**
     * Filter which Blogs to update
     */
    where?: BlogWhereInput
  }


  /**
   * Blog upsert
   */
  export type BlogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude<ExtArgs> | null
    /**
     * The filter to search for the Blog to update in case it exists.
     */
    where: BlogWhereUniqueInput
    /**
     * In case the Blog found by the `where` argument doesn't exist, create a new Blog with this data.
     */
    create: XOR<BlogCreateInput, BlogUncheckedCreateInput>
    /**
     * In case the Blog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlogUpdateInput, BlogUncheckedUpdateInput>
  }


  /**
   * Blog delete
   */
  export type BlogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude<ExtArgs> | null
    /**
     * Filter which Blog to delete.
     */
    where: BlogWhereUniqueInput
  }


  /**
   * Blog deleteMany
   */
  export type BlogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Blogs to delete
     */
    where?: BlogWhereInput
  }


  /**
   * Blog.BlogUniversityDepartment
   */
  export type Blog$BlogUniversityDepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversityDepartment
     */
    select?: BlogUniversityDepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityDepartmentInclude<ExtArgs> | null
    where?: BlogUniversityDepartmentWhereInput
    orderBy?: BlogUniversityDepartmentOrderByWithRelationInput | BlogUniversityDepartmentOrderByWithRelationInput[]
    cursor?: BlogUniversityDepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BlogUniversityDepartmentScalarFieldEnum | BlogUniversityDepartmentScalarFieldEnum[]
  }


  /**
   * Blog without action
   */
  export type BlogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude<ExtArgs> | null
  }



  /**
   * Model BlogCategory
   */

  export type AggregateBlogCategory = {
    _count: BlogCategoryCountAggregateOutputType | null
    _avg: BlogCategoryAvgAggregateOutputType | null
    _sum: BlogCategorySumAggregateOutputType | null
    _min: BlogCategoryMinAggregateOutputType | null
    _max: BlogCategoryMaxAggregateOutputType | null
  }

  export type BlogCategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type BlogCategorySumAggregateOutputType = {
    id: number | null
  }

  export type BlogCategoryMinAggregateOutputType = {
    id: number | null
    category: string | null
  }

  export type BlogCategoryMaxAggregateOutputType = {
    id: number | null
    category: string | null
  }

  export type BlogCategoryCountAggregateOutputType = {
    id: number
    category: number
    _all: number
  }


  export type BlogCategoryAvgAggregateInputType = {
    id?: true
  }

  export type BlogCategorySumAggregateInputType = {
    id?: true
  }

  export type BlogCategoryMinAggregateInputType = {
    id?: true
    category?: true
  }

  export type BlogCategoryMaxAggregateInputType = {
    id?: true
    category?: true
  }

  export type BlogCategoryCountAggregateInputType = {
    id?: true
    category?: true
    _all?: true
  }

  export type BlogCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BlogCategory to aggregate.
     */
    where?: BlogCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlogCategories to fetch.
     */
    orderBy?: BlogCategoryOrderByWithRelationInput | BlogCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlogCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlogCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlogCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BlogCategories
    **/
    _count?: true | BlogCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BlogCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BlogCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlogCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlogCategoryMaxAggregateInputType
  }

  export type GetBlogCategoryAggregateType<T extends BlogCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateBlogCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlogCategory[P]>
      : GetScalarType<T[P], AggregateBlogCategory[P]>
  }




  export type BlogCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlogCategoryWhereInput
    orderBy?: BlogCategoryOrderByWithAggregationInput | BlogCategoryOrderByWithAggregationInput[]
    by: BlogCategoryScalarFieldEnum[] | BlogCategoryScalarFieldEnum
    having?: BlogCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlogCategoryCountAggregateInputType | true
    _avg?: BlogCategoryAvgAggregateInputType
    _sum?: BlogCategorySumAggregateInputType
    _min?: BlogCategoryMinAggregateInputType
    _max?: BlogCategoryMaxAggregateInputType
  }

  export type BlogCategoryGroupByOutputType = {
    id: number
    category: string
    _count: BlogCategoryCountAggregateOutputType | null
    _avg: BlogCategoryAvgAggregateOutputType | null
    _sum: BlogCategorySumAggregateOutputType | null
    _min: BlogCategoryMinAggregateOutputType | null
    _max: BlogCategoryMaxAggregateOutputType | null
  }

  type GetBlogCategoryGroupByPayload<T extends BlogCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BlogCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlogCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlogCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], BlogCategoryGroupByOutputType[P]>
        }
      >
    >


  export type BlogCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category?: boolean
    Blog?: boolean | BlogCategory$BlogArgs<ExtArgs>
    _count?: boolean | BlogCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["blogCategory"]>

  export type BlogCategorySelectScalar = {
    id?: boolean
    category?: boolean
  }

  export type BlogCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Blog?: boolean | BlogCategory$BlogArgs<ExtArgs>
    _count?: boolean | BlogCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $BlogCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BlogCategory"
    objects: {
      Blog: Prisma.$BlogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      category: string
    }, ExtArgs["result"]["blogCategory"]>
    composites: {}
  }


  type BlogCategoryGetPayload<S extends boolean | null | undefined | BlogCategoryDefaultArgs> = $Result.GetResult<Prisma.$BlogCategoryPayload, S>

  type BlogCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BlogCategoryFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: BlogCategoryCountAggregateInputType | true
    }

  export interface BlogCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BlogCategory'], meta: { name: 'BlogCategory' } }
    /**
     * Find zero or one BlogCategory that matches the filter.
     * @param {BlogCategoryFindUniqueArgs} args - Arguments to find a BlogCategory
     * @example
     * // Get one BlogCategory
     * const blogCategory = await prisma.blogCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BlogCategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BlogCategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__BlogCategoryClient<$Result.GetResult<Prisma.$BlogCategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BlogCategory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BlogCategoryFindUniqueOrThrowArgs} args - Arguments to find a BlogCategory
     * @example
     * // Get one BlogCategory
     * const blogCategory = await prisma.blogCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BlogCategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogCategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BlogCategoryClient<$Result.GetResult<Prisma.$BlogCategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BlogCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogCategoryFindFirstArgs} args - Arguments to find a BlogCategory
     * @example
     * // Get one BlogCategory
     * const blogCategory = await prisma.blogCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BlogCategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogCategoryFindFirstArgs<ExtArgs>>
    ): Prisma__BlogCategoryClient<$Result.GetResult<Prisma.$BlogCategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BlogCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogCategoryFindFirstOrThrowArgs} args - Arguments to find a BlogCategory
     * @example
     * // Get one BlogCategory
     * const blogCategory = await prisma.blogCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BlogCategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogCategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BlogCategoryClient<$Result.GetResult<Prisma.$BlogCategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BlogCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BlogCategories
     * const blogCategories = await prisma.blogCategory.findMany()
     * 
     * // Get first 10 BlogCategories
     * const blogCategories = await prisma.blogCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blogCategoryWithIdOnly = await prisma.blogCategory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BlogCategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogCategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlogCategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BlogCategory.
     * @param {BlogCategoryCreateArgs} args - Arguments to create a BlogCategory.
     * @example
     * // Create one BlogCategory
     * const BlogCategory = await prisma.blogCategory.create({
     *   data: {
     *     // ... data to create a BlogCategory
     *   }
     * })
     * 
    **/
    create<T extends BlogCategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BlogCategoryCreateArgs<ExtArgs>>
    ): Prisma__BlogCategoryClient<$Result.GetResult<Prisma.$BlogCategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BlogCategories.
     *     @param {BlogCategoryCreateManyArgs} args - Arguments to create many BlogCategories.
     *     @example
     *     // Create many BlogCategories
     *     const blogCategory = await prisma.blogCategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BlogCategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogCategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BlogCategory.
     * @param {BlogCategoryDeleteArgs} args - Arguments to delete one BlogCategory.
     * @example
     * // Delete one BlogCategory
     * const BlogCategory = await prisma.blogCategory.delete({
     *   where: {
     *     // ... filter to delete one BlogCategory
     *   }
     * })
     * 
    **/
    delete<T extends BlogCategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BlogCategoryDeleteArgs<ExtArgs>>
    ): Prisma__BlogCategoryClient<$Result.GetResult<Prisma.$BlogCategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BlogCategory.
     * @param {BlogCategoryUpdateArgs} args - Arguments to update one BlogCategory.
     * @example
     * // Update one BlogCategory
     * const blogCategory = await prisma.blogCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BlogCategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BlogCategoryUpdateArgs<ExtArgs>>
    ): Prisma__BlogCategoryClient<$Result.GetResult<Prisma.$BlogCategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BlogCategories.
     * @param {BlogCategoryDeleteManyArgs} args - Arguments to filter BlogCategories to delete.
     * @example
     * // Delete a few BlogCategories
     * const { count } = await prisma.blogCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BlogCategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogCategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BlogCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BlogCategories
     * const blogCategory = await prisma.blogCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BlogCategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BlogCategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BlogCategory.
     * @param {BlogCategoryUpsertArgs} args - Arguments to update or create a BlogCategory.
     * @example
     * // Update or create a BlogCategory
     * const blogCategory = await prisma.blogCategory.upsert({
     *   create: {
     *     // ... data to create a BlogCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BlogCategory we want to update
     *   }
     * })
    **/
    upsert<T extends BlogCategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BlogCategoryUpsertArgs<ExtArgs>>
    ): Prisma__BlogCategoryClient<$Result.GetResult<Prisma.$BlogCategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BlogCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogCategoryCountArgs} args - Arguments to filter BlogCategories to count.
     * @example
     * // Count the number of BlogCategories
     * const count = await prisma.blogCategory.count({
     *   where: {
     *     // ... the filter for the BlogCategories we want to count
     *   }
     * })
    **/
    count<T extends BlogCategoryCountArgs>(
      args?: Subset<T, BlogCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlogCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BlogCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlogCategoryAggregateArgs>(args: Subset<T, BlogCategoryAggregateArgs>): Prisma.PrismaPromise<GetBlogCategoryAggregateType<T>>

    /**
     * Group by BlogCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlogCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlogCategoryGroupByArgs['orderBy'] }
        : { orderBy?: BlogCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlogCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlogCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BlogCategory model
   */
  readonly fields: BlogCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BlogCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BlogCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Blog<T extends BlogCategory$BlogArgs<ExtArgs> = {}>(args?: Subset<T, BlogCategory$BlogArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BlogCategory model
   */ 
  interface BlogCategoryFieldRefs {
    readonly id: FieldRef<"BlogCategory", 'Int'>
    readonly category: FieldRef<"BlogCategory", 'String'>
  }
    

  // Custom InputTypes

  /**
   * BlogCategory findUnique
   */
  export type BlogCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogCategory
     */
    select?: BlogCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogCategoryInclude<ExtArgs> | null
    /**
     * Filter, which BlogCategory to fetch.
     */
    where: BlogCategoryWhereUniqueInput
  }


  /**
   * BlogCategory findUniqueOrThrow
   */
  export type BlogCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogCategory
     */
    select?: BlogCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogCategoryInclude<ExtArgs> | null
    /**
     * Filter, which BlogCategory to fetch.
     */
    where: BlogCategoryWhereUniqueInput
  }


  /**
   * BlogCategory findFirst
   */
  export type BlogCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogCategory
     */
    select?: BlogCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogCategoryInclude<ExtArgs> | null
    /**
     * Filter, which BlogCategory to fetch.
     */
    where?: BlogCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlogCategories to fetch.
     */
    orderBy?: BlogCategoryOrderByWithRelationInput | BlogCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlogCategories.
     */
    cursor?: BlogCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlogCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlogCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlogCategories.
     */
    distinct?: BlogCategoryScalarFieldEnum | BlogCategoryScalarFieldEnum[]
  }


  /**
   * BlogCategory findFirstOrThrow
   */
  export type BlogCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogCategory
     */
    select?: BlogCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogCategoryInclude<ExtArgs> | null
    /**
     * Filter, which BlogCategory to fetch.
     */
    where?: BlogCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlogCategories to fetch.
     */
    orderBy?: BlogCategoryOrderByWithRelationInput | BlogCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlogCategories.
     */
    cursor?: BlogCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlogCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlogCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlogCategories.
     */
    distinct?: BlogCategoryScalarFieldEnum | BlogCategoryScalarFieldEnum[]
  }


  /**
   * BlogCategory findMany
   */
  export type BlogCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogCategory
     */
    select?: BlogCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogCategoryInclude<ExtArgs> | null
    /**
     * Filter, which BlogCategories to fetch.
     */
    where?: BlogCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlogCategories to fetch.
     */
    orderBy?: BlogCategoryOrderByWithRelationInput | BlogCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BlogCategories.
     */
    cursor?: BlogCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlogCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlogCategories.
     */
    skip?: number
    distinct?: BlogCategoryScalarFieldEnum | BlogCategoryScalarFieldEnum[]
  }


  /**
   * BlogCategory create
   */
  export type BlogCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogCategory
     */
    select?: BlogCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a BlogCategory.
     */
    data: XOR<BlogCategoryCreateInput, BlogCategoryUncheckedCreateInput>
  }


  /**
   * BlogCategory createMany
   */
  export type BlogCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BlogCategories.
     */
    data: BlogCategoryCreateManyInput | BlogCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * BlogCategory update
   */
  export type BlogCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogCategory
     */
    select?: BlogCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a BlogCategory.
     */
    data: XOR<BlogCategoryUpdateInput, BlogCategoryUncheckedUpdateInput>
    /**
     * Choose, which BlogCategory to update.
     */
    where: BlogCategoryWhereUniqueInput
  }


  /**
   * BlogCategory updateMany
   */
  export type BlogCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BlogCategories.
     */
    data: XOR<BlogCategoryUpdateManyMutationInput, BlogCategoryUncheckedUpdateManyInput>
    /**
     * Filter which BlogCategories to update
     */
    where?: BlogCategoryWhereInput
  }


  /**
   * BlogCategory upsert
   */
  export type BlogCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogCategory
     */
    select?: BlogCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the BlogCategory to update in case it exists.
     */
    where: BlogCategoryWhereUniqueInput
    /**
     * In case the BlogCategory found by the `where` argument doesn't exist, create a new BlogCategory with this data.
     */
    create: XOR<BlogCategoryCreateInput, BlogCategoryUncheckedCreateInput>
    /**
     * In case the BlogCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlogCategoryUpdateInput, BlogCategoryUncheckedUpdateInput>
  }


  /**
   * BlogCategory delete
   */
  export type BlogCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogCategory
     */
    select?: BlogCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogCategoryInclude<ExtArgs> | null
    /**
     * Filter which BlogCategory to delete.
     */
    where: BlogCategoryWhereUniqueInput
  }


  /**
   * BlogCategory deleteMany
   */
  export type BlogCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BlogCategories to delete
     */
    where?: BlogCategoryWhereInput
  }


  /**
   * BlogCategory.Blog
   */
  export type BlogCategory$BlogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude<ExtArgs> | null
    where?: BlogWhereInput
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    cursor?: BlogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BlogScalarFieldEnum | BlogScalarFieldEnum[]
  }


  /**
   * BlogCategory without action
   */
  export type BlogCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogCategory
     */
    select?: BlogCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogCategoryInclude<ExtArgs> | null
  }



  /**
   * Model BlogUniversity
   */

  export type AggregateBlogUniversity = {
    _count: BlogUniversityCountAggregateOutputType | null
    _avg: BlogUniversityAvgAggregateOutputType | null
    _sum: BlogUniversitySumAggregateOutputType | null
    _min: BlogUniversityMinAggregateOutputType | null
    _max: BlogUniversityMaxAggregateOutputType | null
  }

  export type BlogUniversityAvgAggregateOutputType = {
    id: number | null
    region: number | null
  }

  export type BlogUniversitySumAggregateOutputType = {
    id: number | null
    region: number | null
  }

  export type BlogUniversityMinAggregateOutputType = {
    id: number | null
    schoolName: string | null
    publicSchool: boolean | null
    region: number | null
    eikenUsable: boolean | null
    schoolUrl: string | null
  }

  export type BlogUniversityMaxAggregateOutputType = {
    id: number | null
    schoolName: string | null
    publicSchool: boolean | null
    region: number | null
    eikenUsable: boolean | null
    schoolUrl: string | null
  }

  export type BlogUniversityCountAggregateOutputType = {
    id: number
    schoolName: number
    publicSchool: number
    region: number
    eikenUsable: number
    schoolUrl: number
    _all: number
  }


  export type BlogUniversityAvgAggregateInputType = {
    id?: true
    region?: true
  }

  export type BlogUniversitySumAggregateInputType = {
    id?: true
    region?: true
  }

  export type BlogUniversityMinAggregateInputType = {
    id?: true
    schoolName?: true
    publicSchool?: true
    region?: true
    eikenUsable?: true
    schoolUrl?: true
  }

  export type BlogUniversityMaxAggregateInputType = {
    id?: true
    schoolName?: true
    publicSchool?: true
    region?: true
    eikenUsable?: true
    schoolUrl?: true
  }

  export type BlogUniversityCountAggregateInputType = {
    id?: true
    schoolName?: true
    publicSchool?: true
    region?: true
    eikenUsable?: true
    schoolUrl?: true
    _all?: true
  }

  export type BlogUniversityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BlogUniversity to aggregate.
     */
    where?: BlogUniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlogUniversities to fetch.
     */
    orderBy?: BlogUniversityOrderByWithRelationInput | BlogUniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlogUniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlogUniversities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlogUniversities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BlogUniversities
    **/
    _count?: true | BlogUniversityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BlogUniversityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BlogUniversitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlogUniversityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlogUniversityMaxAggregateInputType
  }

  export type GetBlogUniversityAggregateType<T extends BlogUniversityAggregateArgs> = {
        [P in keyof T & keyof AggregateBlogUniversity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlogUniversity[P]>
      : GetScalarType<T[P], AggregateBlogUniversity[P]>
  }




  export type BlogUniversityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlogUniversityWhereInput
    orderBy?: BlogUniversityOrderByWithAggregationInput | BlogUniversityOrderByWithAggregationInput[]
    by: BlogUniversityScalarFieldEnum[] | BlogUniversityScalarFieldEnum
    having?: BlogUniversityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlogUniversityCountAggregateInputType | true
    _avg?: BlogUniversityAvgAggregateInputType
    _sum?: BlogUniversitySumAggregateInputType
    _min?: BlogUniversityMinAggregateInputType
    _max?: BlogUniversityMaxAggregateInputType
  }

  export type BlogUniversityGroupByOutputType = {
    id: number
    schoolName: string
    publicSchool: boolean
    region: number
    eikenUsable: boolean
    schoolUrl: string | null
    _count: BlogUniversityCountAggregateOutputType | null
    _avg: BlogUniversityAvgAggregateOutputType | null
    _sum: BlogUniversitySumAggregateOutputType | null
    _min: BlogUniversityMinAggregateOutputType | null
    _max: BlogUniversityMaxAggregateOutputType | null
  }

  type GetBlogUniversityGroupByPayload<T extends BlogUniversityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BlogUniversityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlogUniversityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlogUniversityGroupByOutputType[P]>
            : GetScalarType<T[P], BlogUniversityGroupByOutputType[P]>
        }
      >
    >


  export type BlogUniversitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolName?: boolean
    publicSchool?: boolean
    region?: boolean
    eikenUsable?: boolean
    schoolUrl?: boolean
    BlogUniversityDepartment?: boolean | BlogUniversity$BlogUniversityDepartmentArgs<ExtArgs>
    _count?: boolean | BlogUniversityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["blogUniversity"]>

  export type BlogUniversitySelectScalar = {
    id?: boolean
    schoolName?: boolean
    publicSchool?: boolean
    region?: boolean
    eikenUsable?: boolean
    schoolUrl?: boolean
  }

  export type BlogUniversityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BlogUniversityDepartment?: boolean | BlogUniversity$BlogUniversityDepartmentArgs<ExtArgs>
    _count?: boolean | BlogUniversityCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $BlogUniversityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BlogUniversity"
    objects: {
      BlogUniversityDepartment: Prisma.$BlogUniversityDepartmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      schoolName: string
      publicSchool: boolean
      region: number
      eikenUsable: boolean
      schoolUrl: string | null
    }, ExtArgs["result"]["blogUniversity"]>
    composites: {}
  }


  type BlogUniversityGetPayload<S extends boolean | null | undefined | BlogUniversityDefaultArgs> = $Result.GetResult<Prisma.$BlogUniversityPayload, S>

  type BlogUniversityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BlogUniversityFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: BlogUniversityCountAggregateInputType | true
    }

  export interface BlogUniversityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BlogUniversity'], meta: { name: 'BlogUniversity' } }
    /**
     * Find zero or one BlogUniversity that matches the filter.
     * @param {BlogUniversityFindUniqueArgs} args - Arguments to find a BlogUniversity
     * @example
     * // Get one BlogUniversity
     * const blogUniversity = await prisma.blogUniversity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BlogUniversityFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUniversityFindUniqueArgs<ExtArgs>>
    ): Prisma__BlogUniversityClient<$Result.GetResult<Prisma.$BlogUniversityPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BlogUniversity that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BlogUniversityFindUniqueOrThrowArgs} args - Arguments to find a BlogUniversity
     * @example
     * // Get one BlogUniversity
     * const blogUniversity = await prisma.blogUniversity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BlogUniversityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogUniversityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BlogUniversityClient<$Result.GetResult<Prisma.$BlogUniversityPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BlogUniversity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUniversityFindFirstArgs} args - Arguments to find a BlogUniversity
     * @example
     * // Get one BlogUniversity
     * const blogUniversity = await prisma.blogUniversity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BlogUniversityFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogUniversityFindFirstArgs<ExtArgs>>
    ): Prisma__BlogUniversityClient<$Result.GetResult<Prisma.$BlogUniversityPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BlogUniversity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUniversityFindFirstOrThrowArgs} args - Arguments to find a BlogUniversity
     * @example
     * // Get one BlogUniversity
     * const blogUniversity = await prisma.blogUniversity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BlogUniversityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogUniversityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BlogUniversityClient<$Result.GetResult<Prisma.$BlogUniversityPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BlogUniversities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUniversityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BlogUniversities
     * const blogUniversities = await prisma.blogUniversity.findMany()
     * 
     * // Get first 10 BlogUniversities
     * const blogUniversities = await prisma.blogUniversity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blogUniversityWithIdOnly = await prisma.blogUniversity.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BlogUniversityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogUniversityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlogUniversityPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BlogUniversity.
     * @param {BlogUniversityCreateArgs} args - Arguments to create a BlogUniversity.
     * @example
     * // Create one BlogUniversity
     * const BlogUniversity = await prisma.blogUniversity.create({
     *   data: {
     *     // ... data to create a BlogUniversity
     *   }
     * })
     * 
    **/
    create<T extends BlogUniversityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUniversityCreateArgs<ExtArgs>>
    ): Prisma__BlogUniversityClient<$Result.GetResult<Prisma.$BlogUniversityPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BlogUniversities.
     *     @param {BlogUniversityCreateManyArgs} args - Arguments to create many BlogUniversities.
     *     @example
     *     // Create many BlogUniversities
     *     const blogUniversity = await prisma.blogUniversity.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BlogUniversityCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogUniversityCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BlogUniversity.
     * @param {BlogUniversityDeleteArgs} args - Arguments to delete one BlogUniversity.
     * @example
     * // Delete one BlogUniversity
     * const BlogUniversity = await prisma.blogUniversity.delete({
     *   where: {
     *     // ... filter to delete one BlogUniversity
     *   }
     * })
     * 
    **/
    delete<T extends BlogUniversityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUniversityDeleteArgs<ExtArgs>>
    ): Prisma__BlogUniversityClient<$Result.GetResult<Prisma.$BlogUniversityPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BlogUniversity.
     * @param {BlogUniversityUpdateArgs} args - Arguments to update one BlogUniversity.
     * @example
     * // Update one BlogUniversity
     * const blogUniversity = await prisma.blogUniversity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BlogUniversityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUniversityUpdateArgs<ExtArgs>>
    ): Prisma__BlogUniversityClient<$Result.GetResult<Prisma.$BlogUniversityPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BlogUniversities.
     * @param {BlogUniversityDeleteManyArgs} args - Arguments to filter BlogUniversities to delete.
     * @example
     * // Delete a few BlogUniversities
     * const { count } = await prisma.blogUniversity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BlogUniversityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogUniversityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BlogUniversities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUniversityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BlogUniversities
     * const blogUniversity = await prisma.blogUniversity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BlogUniversityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUniversityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BlogUniversity.
     * @param {BlogUniversityUpsertArgs} args - Arguments to update or create a BlogUniversity.
     * @example
     * // Update or create a BlogUniversity
     * const blogUniversity = await prisma.blogUniversity.upsert({
     *   create: {
     *     // ... data to create a BlogUniversity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BlogUniversity we want to update
     *   }
     * })
    **/
    upsert<T extends BlogUniversityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUniversityUpsertArgs<ExtArgs>>
    ): Prisma__BlogUniversityClient<$Result.GetResult<Prisma.$BlogUniversityPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BlogUniversities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUniversityCountArgs} args - Arguments to filter BlogUniversities to count.
     * @example
     * // Count the number of BlogUniversities
     * const count = await prisma.blogUniversity.count({
     *   where: {
     *     // ... the filter for the BlogUniversities we want to count
     *   }
     * })
    **/
    count<T extends BlogUniversityCountArgs>(
      args?: Subset<T, BlogUniversityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlogUniversityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BlogUniversity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUniversityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlogUniversityAggregateArgs>(args: Subset<T, BlogUniversityAggregateArgs>): Prisma.PrismaPromise<GetBlogUniversityAggregateType<T>>

    /**
     * Group by BlogUniversity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUniversityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlogUniversityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlogUniversityGroupByArgs['orderBy'] }
        : { orderBy?: BlogUniversityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlogUniversityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlogUniversityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BlogUniversity model
   */
  readonly fields: BlogUniversityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BlogUniversity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BlogUniversityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    BlogUniversityDepartment<T extends BlogUniversity$BlogUniversityDepartmentArgs<ExtArgs> = {}>(args?: Subset<T, BlogUniversity$BlogUniversityDepartmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlogUniversityDepartmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BlogUniversity model
   */ 
  interface BlogUniversityFieldRefs {
    readonly id: FieldRef<"BlogUniversity", 'Int'>
    readonly schoolName: FieldRef<"BlogUniversity", 'String'>
    readonly publicSchool: FieldRef<"BlogUniversity", 'Boolean'>
    readonly region: FieldRef<"BlogUniversity", 'Int'>
    readonly eikenUsable: FieldRef<"BlogUniversity", 'Boolean'>
    readonly schoolUrl: FieldRef<"BlogUniversity", 'String'>
  }
    

  // Custom InputTypes

  /**
   * BlogUniversity findUnique
   */
  export type BlogUniversityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversity
     */
    select?: BlogUniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityInclude<ExtArgs> | null
    /**
     * Filter, which BlogUniversity to fetch.
     */
    where: BlogUniversityWhereUniqueInput
  }


  /**
   * BlogUniversity findUniqueOrThrow
   */
  export type BlogUniversityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversity
     */
    select?: BlogUniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityInclude<ExtArgs> | null
    /**
     * Filter, which BlogUniversity to fetch.
     */
    where: BlogUniversityWhereUniqueInput
  }


  /**
   * BlogUniversity findFirst
   */
  export type BlogUniversityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversity
     */
    select?: BlogUniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityInclude<ExtArgs> | null
    /**
     * Filter, which BlogUniversity to fetch.
     */
    where?: BlogUniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlogUniversities to fetch.
     */
    orderBy?: BlogUniversityOrderByWithRelationInput | BlogUniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlogUniversities.
     */
    cursor?: BlogUniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlogUniversities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlogUniversities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlogUniversities.
     */
    distinct?: BlogUniversityScalarFieldEnum | BlogUniversityScalarFieldEnum[]
  }


  /**
   * BlogUniversity findFirstOrThrow
   */
  export type BlogUniversityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversity
     */
    select?: BlogUniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityInclude<ExtArgs> | null
    /**
     * Filter, which BlogUniversity to fetch.
     */
    where?: BlogUniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlogUniversities to fetch.
     */
    orderBy?: BlogUniversityOrderByWithRelationInput | BlogUniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlogUniversities.
     */
    cursor?: BlogUniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlogUniversities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlogUniversities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlogUniversities.
     */
    distinct?: BlogUniversityScalarFieldEnum | BlogUniversityScalarFieldEnum[]
  }


  /**
   * BlogUniversity findMany
   */
  export type BlogUniversityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversity
     */
    select?: BlogUniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityInclude<ExtArgs> | null
    /**
     * Filter, which BlogUniversities to fetch.
     */
    where?: BlogUniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlogUniversities to fetch.
     */
    orderBy?: BlogUniversityOrderByWithRelationInput | BlogUniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BlogUniversities.
     */
    cursor?: BlogUniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlogUniversities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlogUniversities.
     */
    skip?: number
    distinct?: BlogUniversityScalarFieldEnum | BlogUniversityScalarFieldEnum[]
  }


  /**
   * BlogUniversity create
   */
  export type BlogUniversityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversity
     */
    select?: BlogUniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityInclude<ExtArgs> | null
    /**
     * The data needed to create a BlogUniversity.
     */
    data: XOR<BlogUniversityCreateInput, BlogUniversityUncheckedCreateInput>
  }


  /**
   * BlogUniversity createMany
   */
  export type BlogUniversityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BlogUniversities.
     */
    data: BlogUniversityCreateManyInput | BlogUniversityCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * BlogUniversity update
   */
  export type BlogUniversityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversity
     */
    select?: BlogUniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityInclude<ExtArgs> | null
    /**
     * The data needed to update a BlogUniversity.
     */
    data: XOR<BlogUniversityUpdateInput, BlogUniversityUncheckedUpdateInput>
    /**
     * Choose, which BlogUniversity to update.
     */
    where: BlogUniversityWhereUniqueInput
  }


  /**
   * BlogUniversity updateMany
   */
  export type BlogUniversityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BlogUniversities.
     */
    data: XOR<BlogUniversityUpdateManyMutationInput, BlogUniversityUncheckedUpdateManyInput>
    /**
     * Filter which BlogUniversities to update
     */
    where?: BlogUniversityWhereInput
  }


  /**
   * BlogUniversity upsert
   */
  export type BlogUniversityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversity
     */
    select?: BlogUniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityInclude<ExtArgs> | null
    /**
     * The filter to search for the BlogUniversity to update in case it exists.
     */
    where: BlogUniversityWhereUniqueInput
    /**
     * In case the BlogUniversity found by the `where` argument doesn't exist, create a new BlogUniversity with this data.
     */
    create: XOR<BlogUniversityCreateInput, BlogUniversityUncheckedCreateInput>
    /**
     * In case the BlogUniversity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlogUniversityUpdateInput, BlogUniversityUncheckedUpdateInput>
  }


  /**
   * BlogUniversity delete
   */
  export type BlogUniversityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversity
     */
    select?: BlogUniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityInclude<ExtArgs> | null
    /**
     * Filter which BlogUniversity to delete.
     */
    where: BlogUniversityWhereUniqueInput
  }


  /**
   * BlogUniversity deleteMany
   */
  export type BlogUniversityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BlogUniversities to delete
     */
    where?: BlogUniversityWhereInput
  }


  /**
   * BlogUniversity.BlogUniversityDepartment
   */
  export type BlogUniversity$BlogUniversityDepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversityDepartment
     */
    select?: BlogUniversityDepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityDepartmentInclude<ExtArgs> | null
    where?: BlogUniversityDepartmentWhereInput
    orderBy?: BlogUniversityDepartmentOrderByWithRelationInput | BlogUniversityDepartmentOrderByWithRelationInput[]
    cursor?: BlogUniversityDepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BlogUniversityDepartmentScalarFieldEnum | BlogUniversityDepartmentScalarFieldEnum[]
  }


  /**
   * BlogUniversity without action
   */
  export type BlogUniversityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversity
     */
    select?: BlogUniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityInclude<ExtArgs> | null
  }



  /**
   * Model BlogUniversityDepartment
   */

  export type AggregateBlogUniversityDepartment = {
    _count: BlogUniversityDepartmentCountAggregateOutputType | null
    _avg: BlogUniversityDepartmentAvgAggregateOutputType | null
    _sum: BlogUniversityDepartmentSumAggregateOutputType | null
    _min: BlogUniversityDepartmentMinAggregateOutputType | null
    _max: BlogUniversityDepartmentMaxAggregateOutputType | null
  }

  export type BlogUniversityDepartmentAvgAggregateOutputType = {
    id: number | null
    blogId: number | null
    universityId: number | null
    examType: number | null
  }

  export type BlogUniversityDepartmentSumAggregateOutputType = {
    id: number | null
    blogId: number | null
    universityId: number | null
    examType: number | null
  }

  export type BlogUniversityDepartmentMinAggregateOutputType = {
    id: number | null
    blogId: number | null
    universityId: number | null
    name: string | null
    rikei: boolean | null
    examType: number | null
    articleYear: string | null
  }

  export type BlogUniversityDepartmentMaxAggregateOutputType = {
    id: number | null
    blogId: number | null
    universityId: number | null
    name: string | null
    rikei: boolean | null
    examType: number | null
    articleYear: string | null
  }

  export type BlogUniversityDepartmentCountAggregateOutputType = {
    id: number
    blogId: number
    universityId: number
    name: number
    rikei: number
    examType: number
    articleYear: number
    _all: number
  }


  export type BlogUniversityDepartmentAvgAggregateInputType = {
    id?: true
    blogId?: true
    universityId?: true
    examType?: true
  }

  export type BlogUniversityDepartmentSumAggregateInputType = {
    id?: true
    blogId?: true
    universityId?: true
    examType?: true
  }

  export type BlogUniversityDepartmentMinAggregateInputType = {
    id?: true
    blogId?: true
    universityId?: true
    name?: true
    rikei?: true
    examType?: true
    articleYear?: true
  }

  export type BlogUniversityDepartmentMaxAggregateInputType = {
    id?: true
    blogId?: true
    universityId?: true
    name?: true
    rikei?: true
    examType?: true
    articleYear?: true
  }

  export type BlogUniversityDepartmentCountAggregateInputType = {
    id?: true
    blogId?: true
    universityId?: true
    name?: true
    rikei?: true
    examType?: true
    articleYear?: true
    _all?: true
  }

  export type BlogUniversityDepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BlogUniversityDepartment to aggregate.
     */
    where?: BlogUniversityDepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlogUniversityDepartments to fetch.
     */
    orderBy?: BlogUniversityDepartmentOrderByWithRelationInput | BlogUniversityDepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlogUniversityDepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlogUniversityDepartments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlogUniversityDepartments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BlogUniversityDepartments
    **/
    _count?: true | BlogUniversityDepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BlogUniversityDepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BlogUniversityDepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlogUniversityDepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlogUniversityDepartmentMaxAggregateInputType
  }

  export type GetBlogUniversityDepartmentAggregateType<T extends BlogUniversityDepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateBlogUniversityDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlogUniversityDepartment[P]>
      : GetScalarType<T[P], AggregateBlogUniversityDepartment[P]>
  }




  export type BlogUniversityDepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlogUniversityDepartmentWhereInput
    orderBy?: BlogUniversityDepartmentOrderByWithAggregationInput | BlogUniversityDepartmentOrderByWithAggregationInput[]
    by: BlogUniversityDepartmentScalarFieldEnum[] | BlogUniversityDepartmentScalarFieldEnum
    having?: BlogUniversityDepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlogUniversityDepartmentCountAggregateInputType | true
    _avg?: BlogUniversityDepartmentAvgAggregateInputType
    _sum?: BlogUniversityDepartmentSumAggregateInputType
    _min?: BlogUniversityDepartmentMinAggregateInputType
    _max?: BlogUniversityDepartmentMaxAggregateInputType
  }

  export type BlogUniversityDepartmentGroupByOutputType = {
    id: number
    blogId: number | null
    universityId: number
    name: string
    rikei: boolean
    examType: number | null
    articleYear: string | null
    _count: BlogUniversityDepartmentCountAggregateOutputType | null
    _avg: BlogUniversityDepartmentAvgAggregateOutputType | null
    _sum: BlogUniversityDepartmentSumAggregateOutputType | null
    _min: BlogUniversityDepartmentMinAggregateOutputType | null
    _max: BlogUniversityDepartmentMaxAggregateOutputType | null
  }

  type GetBlogUniversityDepartmentGroupByPayload<T extends BlogUniversityDepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BlogUniversityDepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlogUniversityDepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlogUniversityDepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], BlogUniversityDepartmentGroupByOutputType[P]>
        }
      >
    >


  export type BlogUniversityDepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    blogId?: boolean
    universityId?: boolean
    name?: boolean
    rikei?: boolean
    examType?: boolean
    articleYear?: boolean
    Blog?: boolean | BlogUniversityDepartment$BlogArgs<ExtArgs>
    University?: boolean | BlogUniversityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["blogUniversityDepartment"]>

  export type BlogUniversityDepartmentSelectScalar = {
    id?: boolean
    blogId?: boolean
    universityId?: boolean
    name?: boolean
    rikei?: boolean
    examType?: boolean
    articleYear?: boolean
  }

  export type BlogUniversityDepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Blog?: boolean | BlogUniversityDepartment$BlogArgs<ExtArgs>
    University?: boolean | BlogUniversityDefaultArgs<ExtArgs>
  }


  export type $BlogUniversityDepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BlogUniversityDepartment"
    objects: {
      Blog: Prisma.$BlogPayload<ExtArgs> | null
      University: Prisma.$BlogUniversityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      blogId: number | null
      universityId: number
      name: string
      rikei: boolean
      examType: number | null
      articleYear: string | null
    }, ExtArgs["result"]["blogUniversityDepartment"]>
    composites: {}
  }


  type BlogUniversityDepartmentGetPayload<S extends boolean | null | undefined | BlogUniversityDepartmentDefaultArgs> = $Result.GetResult<Prisma.$BlogUniversityDepartmentPayload, S>

  type BlogUniversityDepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BlogUniversityDepartmentFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: BlogUniversityDepartmentCountAggregateInputType | true
    }

  export interface BlogUniversityDepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BlogUniversityDepartment'], meta: { name: 'BlogUniversityDepartment' } }
    /**
     * Find zero or one BlogUniversityDepartment that matches the filter.
     * @param {BlogUniversityDepartmentFindUniqueArgs} args - Arguments to find a BlogUniversityDepartment
     * @example
     * // Get one BlogUniversityDepartment
     * const blogUniversityDepartment = await prisma.blogUniversityDepartment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BlogUniversityDepartmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUniversityDepartmentFindUniqueArgs<ExtArgs>>
    ): Prisma__BlogUniversityDepartmentClient<$Result.GetResult<Prisma.$BlogUniversityDepartmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BlogUniversityDepartment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BlogUniversityDepartmentFindUniqueOrThrowArgs} args - Arguments to find a BlogUniversityDepartment
     * @example
     * // Get one BlogUniversityDepartment
     * const blogUniversityDepartment = await prisma.blogUniversityDepartment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BlogUniversityDepartmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogUniversityDepartmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BlogUniversityDepartmentClient<$Result.GetResult<Prisma.$BlogUniversityDepartmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BlogUniversityDepartment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUniversityDepartmentFindFirstArgs} args - Arguments to find a BlogUniversityDepartment
     * @example
     * // Get one BlogUniversityDepartment
     * const blogUniversityDepartment = await prisma.blogUniversityDepartment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BlogUniversityDepartmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogUniversityDepartmentFindFirstArgs<ExtArgs>>
    ): Prisma__BlogUniversityDepartmentClient<$Result.GetResult<Prisma.$BlogUniversityDepartmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BlogUniversityDepartment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUniversityDepartmentFindFirstOrThrowArgs} args - Arguments to find a BlogUniversityDepartment
     * @example
     * // Get one BlogUniversityDepartment
     * const blogUniversityDepartment = await prisma.blogUniversityDepartment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BlogUniversityDepartmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogUniversityDepartmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BlogUniversityDepartmentClient<$Result.GetResult<Prisma.$BlogUniversityDepartmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BlogUniversityDepartments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUniversityDepartmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BlogUniversityDepartments
     * const blogUniversityDepartments = await prisma.blogUniversityDepartment.findMany()
     * 
     * // Get first 10 BlogUniversityDepartments
     * const blogUniversityDepartments = await prisma.blogUniversityDepartment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blogUniversityDepartmentWithIdOnly = await prisma.blogUniversityDepartment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BlogUniversityDepartmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogUniversityDepartmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlogUniversityDepartmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BlogUniversityDepartment.
     * @param {BlogUniversityDepartmentCreateArgs} args - Arguments to create a BlogUniversityDepartment.
     * @example
     * // Create one BlogUniversityDepartment
     * const BlogUniversityDepartment = await prisma.blogUniversityDepartment.create({
     *   data: {
     *     // ... data to create a BlogUniversityDepartment
     *   }
     * })
     * 
    **/
    create<T extends BlogUniversityDepartmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUniversityDepartmentCreateArgs<ExtArgs>>
    ): Prisma__BlogUniversityDepartmentClient<$Result.GetResult<Prisma.$BlogUniversityDepartmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BlogUniversityDepartments.
     *     @param {BlogUniversityDepartmentCreateManyArgs} args - Arguments to create many BlogUniversityDepartments.
     *     @example
     *     // Create many BlogUniversityDepartments
     *     const blogUniversityDepartment = await prisma.blogUniversityDepartment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BlogUniversityDepartmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogUniversityDepartmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BlogUniversityDepartment.
     * @param {BlogUniversityDepartmentDeleteArgs} args - Arguments to delete one BlogUniversityDepartment.
     * @example
     * // Delete one BlogUniversityDepartment
     * const BlogUniversityDepartment = await prisma.blogUniversityDepartment.delete({
     *   where: {
     *     // ... filter to delete one BlogUniversityDepartment
     *   }
     * })
     * 
    **/
    delete<T extends BlogUniversityDepartmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUniversityDepartmentDeleteArgs<ExtArgs>>
    ): Prisma__BlogUniversityDepartmentClient<$Result.GetResult<Prisma.$BlogUniversityDepartmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BlogUniversityDepartment.
     * @param {BlogUniversityDepartmentUpdateArgs} args - Arguments to update one BlogUniversityDepartment.
     * @example
     * // Update one BlogUniversityDepartment
     * const blogUniversityDepartment = await prisma.blogUniversityDepartment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BlogUniversityDepartmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUniversityDepartmentUpdateArgs<ExtArgs>>
    ): Prisma__BlogUniversityDepartmentClient<$Result.GetResult<Prisma.$BlogUniversityDepartmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BlogUniversityDepartments.
     * @param {BlogUniversityDepartmentDeleteManyArgs} args - Arguments to filter BlogUniversityDepartments to delete.
     * @example
     * // Delete a few BlogUniversityDepartments
     * const { count } = await prisma.blogUniversityDepartment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BlogUniversityDepartmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogUniversityDepartmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BlogUniversityDepartments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUniversityDepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BlogUniversityDepartments
     * const blogUniversityDepartment = await prisma.blogUniversityDepartment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BlogUniversityDepartmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUniversityDepartmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BlogUniversityDepartment.
     * @param {BlogUniversityDepartmentUpsertArgs} args - Arguments to update or create a BlogUniversityDepartment.
     * @example
     * // Update or create a BlogUniversityDepartment
     * const blogUniversityDepartment = await prisma.blogUniversityDepartment.upsert({
     *   create: {
     *     // ... data to create a BlogUniversityDepartment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BlogUniversityDepartment we want to update
     *   }
     * })
    **/
    upsert<T extends BlogUniversityDepartmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUniversityDepartmentUpsertArgs<ExtArgs>>
    ): Prisma__BlogUniversityDepartmentClient<$Result.GetResult<Prisma.$BlogUniversityDepartmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BlogUniversityDepartments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUniversityDepartmentCountArgs} args - Arguments to filter BlogUniversityDepartments to count.
     * @example
     * // Count the number of BlogUniversityDepartments
     * const count = await prisma.blogUniversityDepartment.count({
     *   where: {
     *     // ... the filter for the BlogUniversityDepartments we want to count
     *   }
     * })
    **/
    count<T extends BlogUniversityDepartmentCountArgs>(
      args?: Subset<T, BlogUniversityDepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlogUniversityDepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BlogUniversityDepartment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUniversityDepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlogUniversityDepartmentAggregateArgs>(args: Subset<T, BlogUniversityDepartmentAggregateArgs>): Prisma.PrismaPromise<GetBlogUniversityDepartmentAggregateType<T>>

    /**
     * Group by BlogUniversityDepartment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUniversityDepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlogUniversityDepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlogUniversityDepartmentGroupByArgs['orderBy'] }
        : { orderBy?: BlogUniversityDepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlogUniversityDepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlogUniversityDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BlogUniversityDepartment model
   */
  readonly fields: BlogUniversityDepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BlogUniversityDepartment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BlogUniversityDepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Blog<T extends BlogUniversityDepartment$BlogArgs<ExtArgs> = {}>(args?: Subset<T, BlogUniversityDepartment$BlogArgs<ExtArgs>>): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    University<T extends BlogUniversityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BlogUniversityDefaultArgs<ExtArgs>>): Prisma__BlogUniversityClient<$Result.GetResult<Prisma.$BlogUniversityPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BlogUniversityDepartment model
   */ 
  interface BlogUniversityDepartmentFieldRefs {
    readonly id: FieldRef<"BlogUniversityDepartment", 'Int'>
    readonly blogId: FieldRef<"BlogUniversityDepartment", 'Int'>
    readonly universityId: FieldRef<"BlogUniversityDepartment", 'Int'>
    readonly name: FieldRef<"BlogUniversityDepartment", 'String'>
    readonly rikei: FieldRef<"BlogUniversityDepartment", 'Boolean'>
    readonly examType: FieldRef<"BlogUniversityDepartment", 'Int'>
    readonly articleYear: FieldRef<"BlogUniversityDepartment", 'String'>
  }
    

  // Custom InputTypes

  /**
   * BlogUniversityDepartment findUnique
   */
  export type BlogUniversityDepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversityDepartment
     */
    select?: BlogUniversityDepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityDepartmentInclude<ExtArgs> | null
    /**
     * Filter, which BlogUniversityDepartment to fetch.
     */
    where: BlogUniversityDepartmentWhereUniqueInput
  }


  /**
   * BlogUniversityDepartment findUniqueOrThrow
   */
  export type BlogUniversityDepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversityDepartment
     */
    select?: BlogUniversityDepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityDepartmentInclude<ExtArgs> | null
    /**
     * Filter, which BlogUniversityDepartment to fetch.
     */
    where: BlogUniversityDepartmentWhereUniqueInput
  }


  /**
   * BlogUniversityDepartment findFirst
   */
  export type BlogUniversityDepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversityDepartment
     */
    select?: BlogUniversityDepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityDepartmentInclude<ExtArgs> | null
    /**
     * Filter, which BlogUniversityDepartment to fetch.
     */
    where?: BlogUniversityDepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlogUniversityDepartments to fetch.
     */
    orderBy?: BlogUniversityDepartmentOrderByWithRelationInput | BlogUniversityDepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlogUniversityDepartments.
     */
    cursor?: BlogUniversityDepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlogUniversityDepartments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlogUniversityDepartments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlogUniversityDepartments.
     */
    distinct?: BlogUniversityDepartmentScalarFieldEnum | BlogUniversityDepartmentScalarFieldEnum[]
  }


  /**
   * BlogUniversityDepartment findFirstOrThrow
   */
  export type BlogUniversityDepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversityDepartment
     */
    select?: BlogUniversityDepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityDepartmentInclude<ExtArgs> | null
    /**
     * Filter, which BlogUniversityDepartment to fetch.
     */
    where?: BlogUniversityDepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlogUniversityDepartments to fetch.
     */
    orderBy?: BlogUniversityDepartmentOrderByWithRelationInput | BlogUniversityDepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlogUniversityDepartments.
     */
    cursor?: BlogUniversityDepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlogUniversityDepartments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlogUniversityDepartments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlogUniversityDepartments.
     */
    distinct?: BlogUniversityDepartmentScalarFieldEnum | BlogUniversityDepartmentScalarFieldEnum[]
  }


  /**
   * BlogUniversityDepartment findMany
   */
  export type BlogUniversityDepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversityDepartment
     */
    select?: BlogUniversityDepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityDepartmentInclude<ExtArgs> | null
    /**
     * Filter, which BlogUniversityDepartments to fetch.
     */
    where?: BlogUniversityDepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlogUniversityDepartments to fetch.
     */
    orderBy?: BlogUniversityDepartmentOrderByWithRelationInput | BlogUniversityDepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BlogUniversityDepartments.
     */
    cursor?: BlogUniversityDepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlogUniversityDepartments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlogUniversityDepartments.
     */
    skip?: number
    distinct?: BlogUniversityDepartmentScalarFieldEnum | BlogUniversityDepartmentScalarFieldEnum[]
  }


  /**
   * BlogUniversityDepartment create
   */
  export type BlogUniversityDepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversityDepartment
     */
    select?: BlogUniversityDepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityDepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a BlogUniversityDepartment.
     */
    data: XOR<BlogUniversityDepartmentCreateInput, BlogUniversityDepartmentUncheckedCreateInput>
  }


  /**
   * BlogUniversityDepartment createMany
   */
  export type BlogUniversityDepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BlogUniversityDepartments.
     */
    data: BlogUniversityDepartmentCreateManyInput | BlogUniversityDepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * BlogUniversityDepartment update
   */
  export type BlogUniversityDepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversityDepartment
     */
    select?: BlogUniversityDepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityDepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a BlogUniversityDepartment.
     */
    data: XOR<BlogUniversityDepartmentUpdateInput, BlogUniversityDepartmentUncheckedUpdateInput>
    /**
     * Choose, which BlogUniversityDepartment to update.
     */
    where: BlogUniversityDepartmentWhereUniqueInput
  }


  /**
   * BlogUniversityDepartment updateMany
   */
  export type BlogUniversityDepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BlogUniversityDepartments.
     */
    data: XOR<BlogUniversityDepartmentUpdateManyMutationInput, BlogUniversityDepartmentUncheckedUpdateManyInput>
    /**
     * Filter which BlogUniversityDepartments to update
     */
    where?: BlogUniversityDepartmentWhereInput
  }


  /**
   * BlogUniversityDepartment upsert
   */
  export type BlogUniversityDepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversityDepartment
     */
    select?: BlogUniversityDepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityDepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the BlogUniversityDepartment to update in case it exists.
     */
    where: BlogUniversityDepartmentWhereUniqueInput
    /**
     * In case the BlogUniversityDepartment found by the `where` argument doesn't exist, create a new BlogUniversityDepartment with this data.
     */
    create: XOR<BlogUniversityDepartmentCreateInput, BlogUniversityDepartmentUncheckedCreateInput>
    /**
     * In case the BlogUniversityDepartment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlogUniversityDepartmentUpdateInput, BlogUniversityDepartmentUncheckedUpdateInput>
  }


  /**
   * BlogUniversityDepartment delete
   */
  export type BlogUniversityDepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversityDepartment
     */
    select?: BlogUniversityDepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityDepartmentInclude<ExtArgs> | null
    /**
     * Filter which BlogUniversityDepartment to delete.
     */
    where: BlogUniversityDepartmentWhereUniqueInput
  }


  /**
   * BlogUniversityDepartment deleteMany
   */
  export type BlogUniversityDepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BlogUniversityDepartments to delete
     */
    where?: BlogUniversityDepartmentWhereInput
  }


  /**
   * BlogUniversityDepartment.Blog
   */
  export type BlogUniversityDepartment$BlogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude<ExtArgs> | null
    where?: BlogWhereInput
  }


  /**
   * BlogUniversityDepartment without action
   */
  export type BlogUniversityDepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogUniversityDepartment
     */
    select?: BlogUniversityDepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogUniversityDepartmentInclude<ExtArgs> | null
  }



  /**
   * Model Grade
   */

  export type AggregateGrade = {
    _count: GradeCountAggregateOutputType | null
    _avg: GradeAvgAggregateOutputType | null
    _sum: GradeSumAggregateOutputType | null
    _min: GradeMinAggregateOutputType | null
    _max: GradeMaxAggregateOutputType | null
  }

  export type GradeAvgAggregateOutputType = {
    id: number | null
  }

  export type GradeSumAggregateOutputType = {
    id: number | null
  }

  export type GradeMinAggregateOutputType = {
    id: number | null
    grade: string | null
    gradeJp: string | null
  }

  export type GradeMaxAggregateOutputType = {
    id: number | null
    grade: string | null
    gradeJp: string | null
  }

  export type GradeCountAggregateOutputType = {
    id: number
    grade: number
    gradeJp: number
    _all: number
  }


  export type GradeAvgAggregateInputType = {
    id?: true
  }

  export type GradeSumAggregateInputType = {
    id?: true
  }

  export type GradeMinAggregateInputType = {
    id?: true
    grade?: true
    gradeJp?: true
  }

  export type GradeMaxAggregateInputType = {
    id?: true
    grade?: true
    gradeJp?: true
  }

  export type GradeCountAggregateInputType = {
    id?: true
    grade?: true
    gradeJp?: true
    _all?: true
  }

  export type GradeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grade to aggregate.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Grades
    **/
    _count?: true | GradeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GradeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GradeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GradeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GradeMaxAggregateInputType
  }

  export type GetGradeAggregateType<T extends GradeAggregateArgs> = {
        [P in keyof T & keyof AggregateGrade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrade[P]>
      : GetScalarType<T[P], AggregateGrade[P]>
  }




  export type GradeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithAggregationInput | GradeOrderByWithAggregationInput[]
    by: GradeScalarFieldEnum[] | GradeScalarFieldEnum
    having?: GradeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GradeCountAggregateInputType | true
    _avg?: GradeAvgAggregateInputType
    _sum?: GradeSumAggregateInputType
    _min?: GradeMinAggregateInputType
    _max?: GradeMaxAggregateInputType
  }

  export type GradeGroupByOutputType = {
    id: number
    grade: string
    gradeJp: string
    _count: GradeCountAggregateOutputType | null
    _avg: GradeAvgAggregateOutputType | null
    _sum: GradeSumAggregateOutputType | null
    _min: GradeMinAggregateOutputType | null
    _max: GradeMaxAggregateOutputType | null
  }

  type GetGradeGroupByPayload<T extends GradeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GradeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GradeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GradeGroupByOutputType[P]>
            : GetScalarType<T[P], GradeGroupByOutputType[P]>
        }
      >
    >


  export type GradeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    grade?: boolean
    gradeJp?: boolean
    Grammar?: boolean | Grade$GrammarArgs<ExtArgs>
    _count?: boolean | GradeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grade"]>

  export type GradeSelectScalar = {
    id?: boolean
    grade?: boolean
    gradeJp?: boolean
  }

  export type GradeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Grammar?: boolean | Grade$GrammarArgs<ExtArgs>
    _count?: boolean | GradeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $GradePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Grade"
    objects: {
      Grammar: Prisma.$GrammarPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      grade: string
      gradeJp: string
    }, ExtArgs["result"]["grade"]>
    composites: {}
  }


  type GradeGetPayload<S extends boolean | null | undefined | GradeDefaultArgs> = $Result.GetResult<Prisma.$GradePayload, S>

  type GradeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GradeFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: GradeCountAggregateInputType | true
    }

  export interface GradeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Grade'], meta: { name: 'Grade' } }
    /**
     * Find zero or one Grade that matches the filter.
     * @param {GradeFindUniqueArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GradeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GradeFindUniqueArgs<ExtArgs>>
    ): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Grade that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GradeFindUniqueOrThrowArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GradeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GradeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Grade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindFirstArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GradeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GradeFindFirstArgs<ExtArgs>>
    ): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Grade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindFirstOrThrowArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GradeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GradeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Grades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Grades
     * const grades = await prisma.grade.findMany()
     * 
     * // Get first 10 Grades
     * const grades = await prisma.grade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gradeWithIdOnly = await prisma.grade.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GradeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GradeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Grade.
     * @param {GradeCreateArgs} args - Arguments to create a Grade.
     * @example
     * // Create one Grade
     * const Grade = await prisma.grade.create({
     *   data: {
     *     // ... data to create a Grade
     *   }
     * })
     * 
    **/
    create<T extends GradeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GradeCreateArgs<ExtArgs>>
    ): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Grades.
     *     @param {GradeCreateManyArgs} args - Arguments to create many Grades.
     *     @example
     *     // Create many Grades
     *     const grade = await prisma.grade.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GradeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GradeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Grade.
     * @param {GradeDeleteArgs} args - Arguments to delete one Grade.
     * @example
     * // Delete one Grade
     * const Grade = await prisma.grade.delete({
     *   where: {
     *     // ... filter to delete one Grade
     *   }
     * })
     * 
    **/
    delete<T extends GradeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GradeDeleteArgs<ExtArgs>>
    ): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Grade.
     * @param {GradeUpdateArgs} args - Arguments to update one Grade.
     * @example
     * // Update one Grade
     * const grade = await prisma.grade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GradeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GradeUpdateArgs<ExtArgs>>
    ): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Grades.
     * @param {GradeDeleteManyArgs} args - Arguments to filter Grades to delete.
     * @example
     * // Delete a few Grades
     * const { count } = await prisma.grade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GradeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GradeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Grades
     * const grade = await prisma.grade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GradeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GradeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Grade.
     * @param {GradeUpsertArgs} args - Arguments to update or create a Grade.
     * @example
     * // Update or create a Grade
     * const grade = await prisma.grade.upsert({
     *   create: {
     *     // ... data to create a Grade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Grade we want to update
     *   }
     * })
    **/
    upsert<T extends GradeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GradeUpsertArgs<ExtArgs>>
    ): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeCountArgs} args - Arguments to filter Grades to count.
     * @example
     * // Count the number of Grades
     * const count = await prisma.grade.count({
     *   where: {
     *     // ... the filter for the Grades we want to count
     *   }
     * })
    **/
    count<T extends GradeCountArgs>(
      args?: Subset<T, GradeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GradeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GradeAggregateArgs>(args: Subset<T, GradeAggregateArgs>): Prisma.PrismaPromise<GetGradeAggregateType<T>>

    /**
     * Group by Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GradeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GradeGroupByArgs['orderBy'] }
        : { orderBy?: GradeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GradeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGradeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Grade model
   */
  readonly fields: GradeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Grade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GradeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Grammar<T extends Grade$GrammarArgs<ExtArgs> = {}>(args?: Subset<T, Grade$GrammarArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrammarPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Grade model
   */ 
  interface GradeFieldRefs {
    readonly id: FieldRef<"Grade", 'Int'>
    readonly grade: FieldRef<"Grade", 'String'>
    readonly gradeJp: FieldRef<"Grade", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Grade findUnique
   */
  export type GradeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where: GradeWhereUniqueInput
  }


  /**
   * Grade findUniqueOrThrow
   */
  export type GradeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where: GradeWhereUniqueInput
  }


  /**
   * Grade findFirst
   */
  export type GradeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grades.
     */
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }


  /**
   * Grade findFirstOrThrow
   */
  export type GradeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grades.
     */
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }


  /**
   * Grade findMany
   */
  export type GradeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grades to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }


  /**
   * Grade create
   */
  export type GradeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The data needed to create a Grade.
     */
    data: XOR<GradeCreateInput, GradeUncheckedCreateInput>
  }


  /**
   * Grade createMany
   */
  export type GradeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Grades.
     */
    data: GradeCreateManyInput | GradeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Grade update
   */
  export type GradeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The data needed to update a Grade.
     */
    data: XOR<GradeUpdateInput, GradeUncheckedUpdateInput>
    /**
     * Choose, which Grade to update.
     */
    where: GradeWhereUniqueInput
  }


  /**
   * Grade updateMany
   */
  export type GradeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Grades.
     */
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyInput>
    /**
     * Filter which Grades to update
     */
    where?: GradeWhereInput
  }


  /**
   * Grade upsert
   */
  export type GradeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The filter to search for the Grade to update in case it exists.
     */
    where: GradeWhereUniqueInput
    /**
     * In case the Grade found by the `where` argument doesn't exist, create a new Grade with this data.
     */
    create: XOR<GradeCreateInput, GradeUncheckedCreateInput>
    /**
     * In case the Grade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GradeUpdateInput, GradeUncheckedUpdateInput>
  }


  /**
   * Grade delete
   */
  export type GradeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter which Grade to delete.
     */
    where: GradeWhereUniqueInput
  }


  /**
   * Grade deleteMany
   */
  export type GradeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grades to delete
     */
    where?: GradeWhereInput
  }


  /**
   * Grade.Grammar
   */
  export type Grade$GrammarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grammar
     */
    select?: GrammarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarInclude<ExtArgs> | null
    where?: GrammarWhereInput
    orderBy?: GrammarOrderByWithRelationInput | GrammarOrderByWithRelationInput[]
    cursor?: GrammarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GrammarScalarFieldEnum | GrammarScalarFieldEnum[]
  }


  /**
   * Grade without action
   */
  export type GradeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GradeInclude<ExtArgs> | null
  }



  /**
   * Model Grammar
   */

  export type AggregateGrammar = {
    _count: GrammarCountAggregateOutputType | null
    _avg: GrammarAvgAggregateOutputType | null
    _sum: GrammarSumAggregateOutputType | null
    _min: GrammarMinAggregateOutputType | null
    _max: GrammarMaxAggregateOutputType | null
  }

  export type GrammarAvgAggregateOutputType = {
    id: number | null
    localId: number | null
    gradeId: number | null
  }

  export type GrammarSumAggregateOutputType = {
    id: number | null
    localId: number | null
    gradeId: number | null
  }

  export type GrammarMinAggregateOutputType = {
    id: number | null
    unit: string | null
    tangen: string | null
    localId: number | null
    gradeId: number | null
  }

  export type GrammarMaxAggregateOutputType = {
    id: number | null
    unit: string | null
    tangen: string | null
    localId: number | null
    gradeId: number | null
  }

  export type GrammarCountAggregateOutputType = {
    id: number
    unit: number
    tangen: number
    localId: number
    gradeId: number
    _all: number
  }


  export type GrammarAvgAggregateInputType = {
    id?: true
    localId?: true
    gradeId?: true
  }

  export type GrammarSumAggregateInputType = {
    id?: true
    localId?: true
    gradeId?: true
  }

  export type GrammarMinAggregateInputType = {
    id?: true
    unit?: true
    tangen?: true
    localId?: true
    gradeId?: true
  }

  export type GrammarMaxAggregateInputType = {
    id?: true
    unit?: true
    tangen?: true
    localId?: true
    gradeId?: true
  }

  export type GrammarCountAggregateInputType = {
    id?: true
    unit?: true
    tangen?: true
    localId?: true
    gradeId?: true
    _all?: true
  }

  export type GrammarAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grammar to aggregate.
     */
    where?: GrammarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grammars to fetch.
     */
    orderBy?: GrammarOrderByWithRelationInput | GrammarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GrammarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grammars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grammars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Grammars
    **/
    _count?: true | GrammarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GrammarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GrammarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GrammarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GrammarMaxAggregateInputType
  }

  export type GetGrammarAggregateType<T extends GrammarAggregateArgs> = {
        [P in keyof T & keyof AggregateGrammar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrammar[P]>
      : GetScalarType<T[P], AggregateGrammar[P]>
  }




  export type GrammarGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrammarWhereInput
    orderBy?: GrammarOrderByWithAggregationInput | GrammarOrderByWithAggregationInput[]
    by: GrammarScalarFieldEnum[] | GrammarScalarFieldEnum
    having?: GrammarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GrammarCountAggregateInputType | true
    _avg?: GrammarAvgAggregateInputType
    _sum?: GrammarSumAggregateInputType
    _min?: GrammarMinAggregateInputType
    _max?: GrammarMaxAggregateInputType
  }

  export type GrammarGroupByOutputType = {
    id: number
    unit: string
    tangen: string
    localId: number
    gradeId: number
    _count: GrammarCountAggregateOutputType | null
    _avg: GrammarAvgAggregateOutputType | null
    _sum: GrammarSumAggregateOutputType | null
    _min: GrammarMinAggregateOutputType | null
    _max: GrammarMaxAggregateOutputType | null
  }

  type GetGrammarGroupByPayload<T extends GrammarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GrammarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GrammarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GrammarGroupByOutputType[P]>
            : GetScalarType<T[P], GrammarGroupByOutputType[P]>
        }
      >
    >


  export type GrammarSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unit?: boolean
    tangen?: boolean
    localId?: boolean
    gradeId?: boolean
    Grade?: boolean | GradeDefaultArgs<ExtArgs>
    GrammarQuestion?: boolean | Grammar$GrammarQuestionArgs<ExtArgs>
    _count?: boolean | GrammarCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grammar"]>

  export type GrammarSelectScalar = {
    id?: boolean
    unit?: boolean
    tangen?: boolean
    localId?: boolean
    gradeId?: boolean
  }

  export type GrammarInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Grade?: boolean | GradeDefaultArgs<ExtArgs>
    GrammarQuestion?: boolean | Grammar$GrammarQuestionArgs<ExtArgs>
    _count?: boolean | GrammarCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $GrammarPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Grammar"
    objects: {
      Grade: Prisma.$GradePayload<ExtArgs>
      GrammarQuestion: Prisma.$GrammarQuestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      unit: string
      tangen: string
      localId: number
      gradeId: number
    }, ExtArgs["result"]["grammar"]>
    composites: {}
  }


  type GrammarGetPayload<S extends boolean | null | undefined | GrammarDefaultArgs> = $Result.GetResult<Prisma.$GrammarPayload, S>

  type GrammarCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GrammarFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: GrammarCountAggregateInputType | true
    }

  export interface GrammarDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Grammar'], meta: { name: 'Grammar' } }
    /**
     * Find zero or one Grammar that matches the filter.
     * @param {GrammarFindUniqueArgs} args - Arguments to find a Grammar
     * @example
     * // Get one Grammar
     * const grammar = await prisma.grammar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GrammarFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GrammarFindUniqueArgs<ExtArgs>>
    ): Prisma__GrammarClient<$Result.GetResult<Prisma.$GrammarPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Grammar that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GrammarFindUniqueOrThrowArgs} args - Arguments to find a Grammar
     * @example
     * // Get one Grammar
     * const grammar = await prisma.grammar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GrammarFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GrammarFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GrammarClient<$Result.GetResult<Prisma.$GrammarPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Grammar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrammarFindFirstArgs} args - Arguments to find a Grammar
     * @example
     * // Get one Grammar
     * const grammar = await prisma.grammar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GrammarFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GrammarFindFirstArgs<ExtArgs>>
    ): Prisma__GrammarClient<$Result.GetResult<Prisma.$GrammarPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Grammar that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrammarFindFirstOrThrowArgs} args - Arguments to find a Grammar
     * @example
     * // Get one Grammar
     * const grammar = await prisma.grammar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GrammarFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GrammarFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GrammarClient<$Result.GetResult<Prisma.$GrammarPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Grammars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrammarFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Grammars
     * const grammars = await prisma.grammar.findMany()
     * 
     * // Get first 10 Grammars
     * const grammars = await prisma.grammar.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const grammarWithIdOnly = await prisma.grammar.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GrammarFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GrammarFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrammarPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Grammar.
     * @param {GrammarCreateArgs} args - Arguments to create a Grammar.
     * @example
     * // Create one Grammar
     * const Grammar = await prisma.grammar.create({
     *   data: {
     *     // ... data to create a Grammar
     *   }
     * })
     * 
    **/
    create<T extends GrammarCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GrammarCreateArgs<ExtArgs>>
    ): Prisma__GrammarClient<$Result.GetResult<Prisma.$GrammarPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Grammars.
     *     @param {GrammarCreateManyArgs} args - Arguments to create many Grammars.
     *     @example
     *     // Create many Grammars
     *     const grammar = await prisma.grammar.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GrammarCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GrammarCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Grammar.
     * @param {GrammarDeleteArgs} args - Arguments to delete one Grammar.
     * @example
     * // Delete one Grammar
     * const Grammar = await prisma.grammar.delete({
     *   where: {
     *     // ... filter to delete one Grammar
     *   }
     * })
     * 
    **/
    delete<T extends GrammarDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GrammarDeleteArgs<ExtArgs>>
    ): Prisma__GrammarClient<$Result.GetResult<Prisma.$GrammarPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Grammar.
     * @param {GrammarUpdateArgs} args - Arguments to update one Grammar.
     * @example
     * // Update one Grammar
     * const grammar = await prisma.grammar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GrammarUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GrammarUpdateArgs<ExtArgs>>
    ): Prisma__GrammarClient<$Result.GetResult<Prisma.$GrammarPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Grammars.
     * @param {GrammarDeleteManyArgs} args - Arguments to filter Grammars to delete.
     * @example
     * // Delete a few Grammars
     * const { count } = await prisma.grammar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GrammarDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GrammarDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grammars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrammarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Grammars
     * const grammar = await prisma.grammar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GrammarUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GrammarUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Grammar.
     * @param {GrammarUpsertArgs} args - Arguments to update or create a Grammar.
     * @example
     * // Update or create a Grammar
     * const grammar = await prisma.grammar.upsert({
     *   create: {
     *     // ... data to create a Grammar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Grammar we want to update
     *   }
     * })
    **/
    upsert<T extends GrammarUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GrammarUpsertArgs<ExtArgs>>
    ): Prisma__GrammarClient<$Result.GetResult<Prisma.$GrammarPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Grammars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrammarCountArgs} args - Arguments to filter Grammars to count.
     * @example
     * // Count the number of Grammars
     * const count = await prisma.grammar.count({
     *   where: {
     *     // ... the filter for the Grammars we want to count
     *   }
     * })
    **/
    count<T extends GrammarCountArgs>(
      args?: Subset<T, GrammarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GrammarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Grammar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrammarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GrammarAggregateArgs>(args: Subset<T, GrammarAggregateArgs>): Prisma.PrismaPromise<GetGrammarAggregateType<T>>

    /**
     * Group by Grammar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrammarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GrammarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GrammarGroupByArgs['orderBy'] }
        : { orderBy?: GrammarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GrammarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGrammarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Grammar model
   */
  readonly fields: GrammarFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Grammar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GrammarClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Grade<T extends GradeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GradeDefaultArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    GrammarQuestion<T extends Grammar$GrammarQuestionArgs<ExtArgs> = {}>(args?: Subset<T, Grammar$GrammarQuestionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrammarQuestionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Grammar model
   */ 
  interface GrammarFieldRefs {
    readonly id: FieldRef<"Grammar", 'Int'>
    readonly unit: FieldRef<"Grammar", 'String'>
    readonly tangen: FieldRef<"Grammar", 'String'>
    readonly localId: FieldRef<"Grammar", 'Int'>
    readonly gradeId: FieldRef<"Grammar", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Grammar findUnique
   */
  export type GrammarFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grammar
     */
    select?: GrammarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarInclude<ExtArgs> | null
    /**
     * Filter, which Grammar to fetch.
     */
    where: GrammarWhereUniqueInput
  }


  /**
   * Grammar findUniqueOrThrow
   */
  export type GrammarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grammar
     */
    select?: GrammarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarInclude<ExtArgs> | null
    /**
     * Filter, which Grammar to fetch.
     */
    where: GrammarWhereUniqueInput
  }


  /**
   * Grammar findFirst
   */
  export type GrammarFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grammar
     */
    select?: GrammarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarInclude<ExtArgs> | null
    /**
     * Filter, which Grammar to fetch.
     */
    where?: GrammarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grammars to fetch.
     */
    orderBy?: GrammarOrderByWithRelationInput | GrammarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grammars.
     */
    cursor?: GrammarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grammars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grammars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grammars.
     */
    distinct?: GrammarScalarFieldEnum | GrammarScalarFieldEnum[]
  }


  /**
   * Grammar findFirstOrThrow
   */
  export type GrammarFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grammar
     */
    select?: GrammarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarInclude<ExtArgs> | null
    /**
     * Filter, which Grammar to fetch.
     */
    where?: GrammarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grammars to fetch.
     */
    orderBy?: GrammarOrderByWithRelationInput | GrammarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grammars.
     */
    cursor?: GrammarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grammars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grammars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grammars.
     */
    distinct?: GrammarScalarFieldEnum | GrammarScalarFieldEnum[]
  }


  /**
   * Grammar findMany
   */
  export type GrammarFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grammar
     */
    select?: GrammarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarInclude<ExtArgs> | null
    /**
     * Filter, which Grammars to fetch.
     */
    where?: GrammarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grammars to fetch.
     */
    orderBy?: GrammarOrderByWithRelationInput | GrammarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Grammars.
     */
    cursor?: GrammarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grammars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grammars.
     */
    skip?: number
    distinct?: GrammarScalarFieldEnum | GrammarScalarFieldEnum[]
  }


  /**
   * Grammar create
   */
  export type GrammarCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grammar
     */
    select?: GrammarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarInclude<ExtArgs> | null
    /**
     * The data needed to create a Grammar.
     */
    data: XOR<GrammarCreateInput, GrammarUncheckedCreateInput>
  }


  /**
   * Grammar createMany
   */
  export type GrammarCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Grammars.
     */
    data: GrammarCreateManyInput | GrammarCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Grammar update
   */
  export type GrammarUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grammar
     */
    select?: GrammarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarInclude<ExtArgs> | null
    /**
     * The data needed to update a Grammar.
     */
    data: XOR<GrammarUpdateInput, GrammarUncheckedUpdateInput>
    /**
     * Choose, which Grammar to update.
     */
    where: GrammarWhereUniqueInput
  }


  /**
   * Grammar updateMany
   */
  export type GrammarUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Grammars.
     */
    data: XOR<GrammarUpdateManyMutationInput, GrammarUncheckedUpdateManyInput>
    /**
     * Filter which Grammars to update
     */
    where?: GrammarWhereInput
  }


  /**
   * Grammar upsert
   */
  export type GrammarUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grammar
     */
    select?: GrammarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarInclude<ExtArgs> | null
    /**
     * The filter to search for the Grammar to update in case it exists.
     */
    where: GrammarWhereUniqueInput
    /**
     * In case the Grammar found by the `where` argument doesn't exist, create a new Grammar with this data.
     */
    create: XOR<GrammarCreateInput, GrammarUncheckedCreateInput>
    /**
     * In case the Grammar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GrammarUpdateInput, GrammarUncheckedUpdateInput>
  }


  /**
   * Grammar delete
   */
  export type GrammarDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grammar
     */
    select?: GrammarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarInclude<ExtArgs> | null
    /**
     * Filter which Grammar to delete.
     */
    where: GrammarWhereUniqueInput
  }


  /**
   * Grammar deleteMany
   */
  export type GrammarDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grammars to delete
     */
    where?: GrammarWhereInput
  }


  /**
   * Grammar.GrammarQuestion
   */
  export type Grammar$GrammarQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrammarQuestion
     */
    select?: GrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarQuestionInclude<ExtArgs> | null
    where?: GrammarQuestionWhereInput
    orderBy?: GrammarQuestionOrderByWithRelationInput | GrammarQuestionOrderByWithRelationInput[]
    cursor?: GrammarQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GrammarQuestionScalarFieldEnum | GrammarQuestionScalarFieldEnum[]
  }


  /**
   * Grammar without action
   */
  export type GrammarDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grammar
     */
    select?: GrammarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarInclude<ExtArgs> | null
  }



  /**
   * Model GrammarQuestion
   */

  export type AggregateGrammarQuestion = {
    _count: GrammarQuestionCountAggregateOutputType | null
    _avg: GrammarQuestionAvgAggregateOutputType | null
    _sum: GrammarQuestionSumAggregateOutputType | null
    _min: GrammarQuestionMinAggregateOutputType | null
    _max: GrammarQuestionMaxAggregateOutputType | null
  }

  export type GrammarQuestionAvgAggregateOutputType = {
    id: number | null
    localId: number | null
    grammarId: number | null
  }

  export type GrammarQuestionSumAggregateOutputType = {
    id: number | null
    localId: number | null
    grammarId: number | null
  }

  export type GrammarQuestionMinAggregateOutputType = {
    id: number | null
    title: string | null
    sentence: string | null
    answer: string | null
    explanation: string | null
    localId: number | null
    grammarId: number | null
  }

  export type GrammarQuestionMaxAggregateOutputType = {
    id: number | null
    title: string | null
    sentence: string | null
    answer: string | null
    explanation: string | null
    localId: number | null
    grammarId: number | null
  }

  export type GrammarQuestionCountAggregateOutputType = {
    id: number
    title: number
    sentence: number
    question: number
    answer: number
    explanation: number
    localId: number
    grammarId: number
    _all: number
  }


  export type GrammarQuestionAvgAggregateInputType = {
    id?: true
    localId?: true
    grammarId?: true
  }

  export type GrammarQuestionSumAggregateInputType = {
    id?: true
    localId?: true
    grammarId?: true
  }

  export type GrammarQuestionMinAggregateInputType = {
    id?: true
    title?: true
    sentence?: true
    answer?: true
    explanation?: true
    localId?: true
    grammarId?: true
  }

  export type GrammarQuestionMaxAggregateInputType = {
    id?: true
    title?: true
    sentence?: true
    answer?: true
    explanation?: true
    localId?: true
    grammarId?: true
  }

  export type GrammarQuestionCountAggregateInputType = {
    id?: true
    title?: true
    sentence?: true
    question?: true
    answer?: true
    explanation?: true
    localId?: true
    grammarId?: true
    _all?: true
  }

  export type GrammarQuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrammarQuestion to aggregate.
     */
    where?: GrammarQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrammarQuestions to fetch.
     */
    orderBy?: GrammarQuestionOrderByWithRelationInput | GrammarQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GrammarQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrammarQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrammarQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GrammarQuestions
    **/
    _count?: true | GrammarQuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GrammarQuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GrammarQuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GrammarQuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GrammarQuestionMaxAggregateInputType
  }

  export type GetGrammarQuestionAggregateType<T extends GrammarQuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateGrammarQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrammarQuestion[P]>
      : GetScalarType<T[P], AggregateGrammarQuestion[P]>
  }




  export type GrammarQuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrammarQuestionWhereInput
    orderBy?: GrammarQuestionOrderByWithAggregationInput | GrammarQuestionOrderByWithAggregationInput[]
    by: GrammarQuestionScalarFieldEnum[] | GrammarQuestionScalarFieldEnum
    having?: GrammarQuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GrammarQuestionCountAggregateInputType | true
    _avg?: GrammarQuestionAvgAggregateInputType
    _sum?: GrammarQuestionSumAggregateInputType
    _min?: GrammarQuestionMinAggregateInputType
    _max?: GrammarQuestionMaxAggregateInputType
  }

  export type GrammarQuestionGroupByOutputType = {
    id: number
    title: string
    sentence: string
    question: JsonValue
    answer: string
    explanation: string
    localId: number
    grammarId: number
    _count: GrammarQuestionCountAggregateOutputType | null
    _avg: GrammarQuestionAvgAggregateOutputType | null
    _sum: GrammarQuestionSumAggregateOutputType | null
    _min: GrammarQuestionMinAggregateOutputType | null
    _max: GrammarQuestionMaxAggregateOutputType | null
  }

  type GetGrammarQuestionGroupByPayload<T extends GrammarQuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GrammarQuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GrammarQuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GrammarQuestionGroupByOutputType[P]>
            : GetScalarType<T[P], GrammarQuestionGroupByOutputType[P]>
        }
      >
    >


  export type GrammarQuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    sentence?: boolean
    question?: boolean
    answer?: boolean
    explanation?: boolean
    localId?: boolean
    grammarId?: boolean
    Grammar?: boolean | GrammarDefaultArgs<ExtArgs>
    LikeGrammarQuestion?: boolean | GrammarQuestion$LikeGrammarQuestionArgs<ExtArgs>
    _count?: boolean | GrammarQuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grammarQuestion"]>

  export type GrammarQuestionSelectScalar = {
    id?: boolean
    title?: boolean
    sentence?: boolean
    question?: boolean
    answer?: boolean
    explanation?: boolean
    localId?: boolean
    grammarId?: boolean
  }

  export type GrammarQuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Grammar?: boolean | GrammarDefaultArgs<ExtArgs>
    LikeGrammarQuestion?: boolean | GrammarQuestion$LikeGrammarQuestionArgs<ExtArgs>
    _count?: boolean | GrammarQuestionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $GrammarQuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GrammarQuestion"
    objects: {
      Grammar: Prisma.$GrammarPayload<ExtArgs>
      LikeGrammarQuestion: Prisma.$LikeGrammarQuestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      sentence: string
      question: Prisma.JsonValue
      answer: string
      explanation: string
      localId: number
      grammarId: number
    }, ExtArgs["result"]["grammarQuestion"]>
    composites: {}
  }


  type GrammarQuestionGetPayload<S extends boolean | null | undefined | GrammarQuestionDefaultArgs> = $Result.GetResult<Prisma.$GrammarQuestionPayload, S>

  type GrammarQuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GrammarQuestionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: GrammarQuestionCountAggregateInputType | true
    }

  export interface GrammarQuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GrammarQuestion'], meta: { name: 'GrammarQuestion' } }
    /**
     * Find zero or one GrammarQuestion that matches the filter.
     * @param {GrammarQuestionFindUniqueArgs} args - Arguments to find a GrammarQuestion
     * @example
     * // Get one GrammarQuestion
     * const grammarQuestion = await prisma.grammarQuestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GrammarQuestionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GrammarQuestionFindUniqueArgs<ExtArgs>>
    ): Prisma__GrammarQuestionClient<$Result.GetResult<Prisma.$GrammarQuestionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GrammarQuestion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GrammarQuestionFindUniqueOrThrowArgs} args - Arguments to find a GrammarQuestion
     * @example
     * // Get one GrammarQuestion
     * const grammarQuestion = await prisma.grammarQuestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GrammarQuestionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GrammarQuestionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GrammarQuestionClient<$Result.GetResult<Prisma.$GrammarQuestionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GrammarQuestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrammarQuestionFindFirstArgs} args - Arguments to find a GrammarQuestion
     * @example
     * // Get one GrammarQuestion
     * const grammarQuestion = await prisma.grammarQuestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GrammarQuestionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GrammarQuestionFindFirstArgs<ExtArgs>>
    ): Prisma__GrammarQuestionClient<$Result.GetResult<Prisma.$GrammarQuestionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GrammarQuestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrammarQuestionFindFirstOrThrowArgs} args - Arguments to find a GrammarQuestion
     * @example
     * // Get one GrammarQuestion
     * const grammarQuestion = await prisma.grammarQuestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GrammarQuestionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GrammarQuestionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GrammarQuestionClient<$Result.GetResult<Prisma.$GrammarQuestionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GrammarQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrammarQuestionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GrammarQuestions
     * const grammarQuestions = await prisma.grammarQuestion.findMany()
     * 
     * // Get first 10 GrammarQuestions
     * const grammarQuestions = await prisma.grammarQuestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const grammarQuestionWithIdOnly = await prisma.grammarQuestion.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GrammarQuestionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GrammarQuestionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrammarQuestionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GrammarQuestion.
     * @param {GrammarQuestionCreateArgs} args - Arguments to create a GrammarQuestion.
     * @example
     * // Create one GrammarQuestion
     * const GrammarQuestion = await prisma.grammarQuestion.create({
     *   data: {
     *     // ... data to create a GrammarQuestion
     *   }
     * })
     * 
    **/
    create<T extends GrammarQuestionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GrammarQuestionCreateArgs<ExtArgs>>
    ): Prisma__GrammarQuestionClient<$Result.GetResult<Prisma.$GrammarQuestionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GrammarQuestions.
     *     @param {GrammarQuestionCreateManyArgs} args - Arguments to create many GrammarQuestions.
     *     @example
     *     // Create many GrammarQuestions
     *     const grammarQuestion = await prisma.grammarQuestion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GrammarQuestionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GrammarQuestionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GrammarQuestion.
     * @param {GrammarQuestionDeleteArgs} args - Arguments to delete one GrammarQuestion.
     * @example
     * // Delete one GrammarQuestion
     * const GrammarQuestion = await prisma.grammarQuestion.delete({
     *   where: {
     *     // ... filter to delete one GrammarQuestion
     *   }
     * })
     * 
    **/
    delete<T extends GrammarQuestionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GrammarQuestionDeleteArgs<ExtArgs>>
    ): Prisma__GrammarQuestionClient<$Result.GetResult<Prisma.$GrammarQuestionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GrammarQuestion.
     * @param {GrammarQuestionUpdateArgs} args - Arguments to update one GrammarQuestion.
     * @example
     * // Update one GrammarQuestion
     * const grammarQuestion = await prisma.grammarQuestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GrammarQuestionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GrammarQuestionUpdateArgs<ExtArgs>>
    ): Prisma__GrammarQuestionClient<$Result.GetResult<Prisma.$GrammarQuestionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GrammarQuestions.
     * @param {GrammarQuestionDeleteManyArgs} args - Arguments to filter GrammarQuestions to delete.
     * @example
     * // Delete a few GrammarQuestions
     * const { count } = await prisma.grammarQuestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GrammarQuestionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GrammarQuestionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GrammarQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrammarQuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GrammarQuestions
     * const grammarQuestion = await prisma.grammarQuestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GrammarQuestionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GrammarQuestionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GrammarQuestion.
     * @param {GrammarQuestionUpsertArgs} args - Arguments to update or create a GrammarQuestion.
     * @example
     * // Update or create a GrammarQuestion
     * const grammarQuestion = await prisma.grammarQuestion.upsert({
     *   create: {
     *     // ... data to create a GrammarQuestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GrammarQuestion we want to update
     *   }
     * })
    **/
    upsert<T extends GrammarQuestionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GrammarQuestionUpsertArgs<ExtArgs>>
    ): Prisma__GrammarQuestionClient<$Result.GetResult<Prisma.$GrammarQuestionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GrammarQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrammarQuestionCountArgs} args - Arguments to filter GrammarQuestions to count.
     * @example
     * // Count the number of GrammarQuestions
     * const count = await prisma.grammarQuestion.count({
     *   where: {
     *     // ... the filter for the GrammarQuestions we want to count
     *   }
     * })
    **/
    count<T extends GrammarQuestionCountArgs>(
      args?: Subset<T, GrammarQuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GrammarQuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GrammarQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrammarQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GrammarQuestionAggregateArgs>(args: Subset<T, GrammarQuestionAggregateArgs>): Prisma.PrismaPromise<GetGrammarQuestionAggregateType<T>>

    /**
     * Group by GrammarQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrammarQuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GrammarQuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GrammarQuestionGroupByArgs['orderBy'] }
        : { orderBy?: GrammarQuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GrammarQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGrammarQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GrammarQuestion model
   */
  readonly fields: GrammarQuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GrammarQuestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GrammarQuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Grammar<T extends GrammarDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GrammarDefaultArgs<ExtArgs>>): Prisma__GrammarClient<$Result.GetResult<Prisma.$GrammarPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    LikeGrammarQuestion<T extends GrammarQuestion$LikeGrammarQuestionArgs<ExtArgs> = {}>(args?: Subset<T, GrammarQuestion$LikeGrammarQuestionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeGrammarQuestionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GrammarQuestion model
   */ 
  interface GrammarQuestionFieldRefs {
    readonly id: FieldRef<"GrammarQuestion", 'Int'>
    readonly title: FieldRef<"GrammarQuestion", 'String'>
    readonly sentence: FieldRef<"GrammarQuestion", 'String'>
    readonly question: FieldRef<"GrammarQuestion", 'Json'>
    readonly answer: FieldRef<"GrammarQuestion", 'String'>
    readonly explanation: FieldRef<"GrammarQuestion", 'String'>
    readonly localId: FieldRef<"GrammarQuestion", 'Int'>
    readonly grammarId: FieldRef<"GrammarQuestion", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * GrammarQuestion findUnique
   */
  export type GrammarQuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrammarQuestion
     */
    select?: GrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarQuestionInclude<ExtArgs> | null
    /**
     * Filter, which GrammarQuestion to fetch.
     */
    where: GrammarQuestionWhereUniqueInput
  }


  /**
   * GrammarQuestion findUniqueOrThrow
   */
  export type GrammarQuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrammarQuestion
     */
    select?: GrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarQuestionInclude<ExtArgs> | null
    /**
     * Filter, which GrammarQuestion to fetch.
     */
    where: GrammarQuestionWhereUniqueInput
  }


  /**
   * GrammarQuestion findFirst
   */
  export type GrammarQuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrammarQuestion
     */
    select?: GrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarQuestionInclude<ExtArgs> | null
    /**
     * Filter, which GrammarQuestion to fetch.
     */
    where?: GrammarQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrammarQuestions to fetch.
     */
    orderBy?: GrammarQuestionOrderByWithRelationInput | GrammarQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrammarQuestions.
     */
    cursor?: GrammarQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrammarQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrammarQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrammarQuestions.
     */
    distinct?: GrammarQuestionScalarFieldEnum | GrammarQuestionScalarFieldEnum[]
  }


  /**
   * GrammarQuestion findFirstOrThrow
   */
  export type GrammarQuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrammarQuestion
     */
    select?: GrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarQuestionInclude<ExtArgs> | null
    /**
     * Filter, which GrammarQuestion to fetch.
     */
    where?: GrammarQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrammarQuestions to fetch.
     */
    orderBy?: GrammarQuestionOrderByWithRelationInput | GrammarQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrammarQuestions.
     */
    cursor?: GrammarQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrammarQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrammarQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrammarQuestions.
     */
    distinct?: GrammarQuestionScalarFieldEnum | GrammarQuestionScalarFieldEnum[]
  }


  /**
   * GrammarQuestion findMany
   */
  export type GrammarQuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrammarQuestion
     */
    select?: GrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarQuestionInclude<ExtArgs> | null
    /**
     * Filter, which GrammarQuestions to fetch.
     */
    where?: GrammarQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrammarQuestions to fetch.
     */
    orderBy?: GrammarQuestionOrderByWithRelationInput | GrammarQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GrammarQuestions.
     */
    cursor?: GrammarQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrammarQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrammarQuestions.
     */
    skip?: number
    distinct?: GrammarQuestionScalarFieldEnum | GrammarQuestionScalarFieldEnum[]
  }


  /**
   * GrammarQuestion create
   */
  export type GrammarQuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrammarQuestion
     */
    select?: GrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarQuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a GrammarQuestion.
     */
    data: XOR<GrammarQuestionCreateInput, GrammarQuestionUncheckedCreateInput>
  }


  /**
   * GrammarQuestion createMany
   */
  export type GrammarQuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GrammarQuestions.
     */
    data: GrammarQuestionCreateManyInput | GrammarQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GrammarQuestion update
   */
  export type GrammarQuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrammarQuestion
     */
    select?: GrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarQuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a GrammarQuestion.
     */
    data: XOR<GrammarQuestionUpdateInput, GrammarQuestionUncheckedUpdateInput>
    /**
     * Choose, which GrammarQuestion to update.
     */
    where: GrammarQuestionWhereUniqueInput
  }


  /**
   * GrammarQuestion updateMany
   */
  export type GrammarQuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GrammarQuestions.
     */
    data: XOR<GrammarQuestionUpdateManyMutationInput, GrammarQuestionUncheckedUpdateManyInput>
    /**
     * Filter which GrammarQuestions to update
     */
    where?: GrammarQuestionWhereInput
  }


  /**
   * GrammarQuestion upsert
   */
  export type GrammarQuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrammarQuestion
     */
    select?: GrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarQuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the GrammarQuestion to update in case it exists.
     */
    where: GrammarQuestionWhereUniqueInput
    /**
     * In case the GrammarQuestion found by the `where` argument doesn't exist, create a new GrammarQuestion with this data.
     */
    create: XOR<GrammarQuestionCreateInput, GrammarQuestionUncheckedCreateInput>
    /**
     * In case the GrammarQuestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GrammarQuestionUpdateInput, GrammarQuestionUncheckedUpdateInput>
  }


  /**
   * GrammarQuestion delete
   */
  export type GrammarQuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrammarQuestion
     */
    select?: GrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarQuestionInclude<ExtArgs> | null
    /**
     * Filter which GrammarQuestion to delete.
     */
    where: GrammarQuestionWhereUniqueInput
  }


  /**
   * GrammarQuestion deleteMany
   */
  export type GrammarQuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrammarQuestions to delete
     */
    where?: GrammarQuestionWhereInput
  }


  /**
   * GrammarQuestion.LikeGrammarQuestion
   */
  export type GrammarQuestion$LikeGrammarQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeGrammarQuestion
     */
    select?: LikeGrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeGrammarQuestionInclude<ExtArgs> | null
    where?: LikeGrammarQuestionWhereInput
    orderBy?: LikeGrammarQuestionOrderByWithRelationInput | LikeGrammarQuestionOrderByWithRelationInput[]
    cursor?: LikeGrammarQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeGrammarQuestionScalarFieldEnum | LikeGrammarQuestionScalarFieldEnum[]
  }


  /**
   * GrammarQuestion without action
   */
  export type GrammarQuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrammarQuestion
     */
    select?: GrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrammarQuestionInclude<ExtArgs> | null
  }



  /**
   * Model LikeGrammarQuestion
   */

  export type AggregateLikeGrammarQuestion = {
    _count: LikeGrammarQuestionCountAggregateOutputType | null
    _avg: LikeGrammarQuestionAvgAggregateOutputType | null
    _sum: LikeGrammarQuestionSumAggregateOutputType | null
    _min: LikeGrammarQuestionMinAggregateOutputType | null
    _max: LikeGrammarQuestionMaxAggregateOutputType | null
  }

  export type LikeGrammarQuestionAvgAggregateOutputType = {
    id: number | null
    grammarQuestionId: number | null
  }

  export type LikeGrammarQuestionSumAggregateOutputType = {
    id: number | null
    grammarQuestionId: number | null
  }

  export type LikeGrammarQuestionMinAggregateOutputType = {
    id: number | null
    userId: string | null
    grammarQuestionId: number | null
    createdAt: Date | null
  }

  export type LikeGrammarQuestionMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    grammarQuestionId: number | null
    createdAt: Date | null
  }

  export type LikeGrammarQuestionCountAggregateOutputType = {
    id: number
    userId: number
    grammarQuestionId: number
    createdAt: number
    _all: number
  }


  export type LikeGrammarQuestionAvgAggregateInputType = {
    id?: true
    grammarQuestionId?: true
  }

  export type LikeGrammarQuestionSumAggregateInputType = {
    id?: true
    grammarQuestionId?: true
  }

  export type LikeGrammarQuestionMinAggregateInputType = {
    id?: true
    userId?: true
    grammarQuestionId?: true
    createdAt?: true
  }

  export type LikeGrammarQuestionMaxAggregateInputType = {
    id?: true
    userId?: true
    grammarQuestionId?: true
    createdAt?: true
  }

  export type LikeGrammarQuestionCountAggregateInputType = {
    id?: true
    userId?: true
    grammarQuestionId?: true
    createdAt?: true
    _all?: true
  }

  export type LikeGrammarQuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LikeGrammarQuestion to aggregate.
     */
    where?: LikeGrammarQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeGrammarQuestions to fetch.
     */
    orderBy?: LikeGrammarQuestionOrderByWithRelationInput | LikeGrammarQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikeGrammarQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeGrammarQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeGrammarQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LikeGrammarQuestions
    **/
    _count?: true | LikeGrammarQuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LikeGrammarQuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LikeGrammarQuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikeGrammarQuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikeGrammarQuestionMaxAggregateInputType
  }

  export type GetLikeGrammarQuestionAggregateType<T extends LikeGrammarQuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateLikeGrammarQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLikeGrammarQuestion[P]>
      : GetScalarType<T[P], AggregateLikeGrammarQuestion[P]>
  }




  export type LikeGrammarQuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeGrammarQuestionWhereInput
    orderBy?: LikeGrammarQuestionOrderByWithAggregationInput | LikeGrammarQuestionOrderByWithAggregationInput[]
    by: LikeGrammarQuestionScalarFieldEnum[] | LikeGrammarQuestionScalarFieldEnum
    having?: LikeGrammarQuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikeGrammarQuestionCountAggregateInputType | true
    _avg?: LikeGrammarQuestionAvgAggregateInputType
    _sum?: LikeGrammarQuestionSumAggregateInputType
    _min?: LikeGrammarQuestionMinAggregateInputType
    _max?: LikeGrammarQuestionMaxAggregateInputType
  }

  export type LikeGrammarQuestionGroupByOutputType = {
    id: number
    userId: string
    grammarQuestionId: number
    createdAt: Date
    _count: LikeGrammarQuestionCountAggregateOutputType | null
    _avg: LikeGrammarQuestionAvgAggregateOutputType | null
    _sum: LikeGrammarQuestionSumAggregateOutputType | null
    _min: LikeGrammarQuestionMinAggregateOutputType | null
    _max: LikeGrammarQuestionMaxAggregateOutputType | null
  }

  type GetLikeGrammarQuestionGroupByPayload<T extends LikeGrammarQuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikeGrammarQuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikeGrammarQuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikeGrammarQuestionGroupByOutputType[P]>
            : GetScalarType<T[P], LikeGrammarQuestionGroupByOutputType[P]>
        }
      >
    >


  export type LikeGrammarQuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    grammarQuestionId?: boolean
    createdAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    GrammarQuestion?: boolean | GrammarQuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likeGrammarQuestion"]>

  export type LikeGrammarQuestionSelectScalar = {
    id?: boolean
    userId?: boolean
    grammarQuestionId?: boolean
    createdAt?: boolean
  }

  export type LikeGrammarQuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    GrammarQuestion?: boolean | GrammarQuestionDefaultArgs<ExtArgs>
  }


  export type $LikeGrammarQuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LikeGrammarQuestion"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      GrammarQuestion: Prisma.$GrammarQuestionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      grammarQuestionId: number
      createdAt: Date
    }, ExtArgs["result"]["likeGrammarQuestion"]>
    composites: {}
  }


  type LikeGrammarQuestionGetPayload<S extends boolean | null | undefined | LikeGrammarQuestionDefaultArgs> = $Result.GetResult<Prisma.$LikeGrammarQuestionPayload, S>

  type LikeGrammarQuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LikeGrammarQuestionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: LikeGrammarQuestionCountAggregateInputType | true
    }

  export interface LikeGrammarQuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LikeGrammarQuestion'], meta: { name: 'LikeGrammarQuestion' } }
    /**
     * Find zero or one LikeGrammarQuestion that matches the filter.
     * @param {LikeGrammarQuestionFindUniqueArgs} args - Arguments to find a LikeGrammarQuestion
     * @example
     * // Get one LikeGrammarQuestion
     * const likeGrammarQuestion = await prisma.likeGrammarQuestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LikeGrammarQuestionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LikeGrammarQuestionFindUniqueArgs<ExtArgs>>
    ): Prisma__LikeGrammarQuestionClient<$Result.GetResult<Prisma.$LikeGrammarQuestionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LikeGrammarQuestion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LikeGrammarQuestionFindUniqueOrThrowArgs} args - Arguments to find a LikeGrammarQuestion
     * @example
     * // Get one LikeGrammarQuestion
     * const likeGrammarQuestion = await prisma.likeGrammarQuestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LikeGrammarQuestionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeGrammarQuestionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LikeGrammarQuestionClient<$Result.GetResult<Prisma.$LikeGrammarQuestionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LikeGrammarQuestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGrammarQuestionFindFirstArgs} args - Arguments to find a LikeGrammarQuestion
     * @example
     * // Get one LikeGrammarQuestion
     * const likeGrammarQuestion = await prisma.likeGrammarQuestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LikeGrammarQuestionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeGrammarQuestionFindFirstArgs<ExtArgs>>
    ): Prisma__LikeGrammarQuestionClient<$Result.GetResult<Prisma.$LikeGrammarQuestionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LikeGrammarQuestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGrammarQuestionFindFirstOrThrowArgs} args - Arguments to find a LikeGrammarQuestion
     * @example
     * // Get one LikeGrammarQuestion
     * const likeGrammarQuestion = await prisma.likeGrammarQuestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LikeGrammarQuestionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeGrammarQuestionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LikeGrammarQuestionClient<$Result.GetResult<Prisma.$LikeGrammarQuestionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LikeGrammarQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGrammarQuestionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LikeGrammarQuestions
     * const likeGrammarQuestions = await prisma.likeGrammarQuestion.findMany()
     * 
     * // Get first 10 LikeGrammarQuestions
     * const likeGrammarQuestions = await prisma.likeGrammarQuestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeGrammarQuestionWithIdOnly = await prisma.likeGrammarQuestion.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LikeGrammarQuestionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeGrammarQuestionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeGrammarQuestionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LikeGrammarQuestion.
     * @param {LikeGrammarQuestionCreateArgs} args - Arguments to create a LikeGrammarQuestion.
     * @example
     * // Create one LikeGrammarQuestion
     * const LikeGrammarQuestion = await prisma.likeGrammarQuestion.create({
     *   data: {
     *     // ... data to create a LikeGrammarQuestion
     *   }
     * })
     * 
    **/
    create<T extends LikeGrammarQuestionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LikeGrammarQuestionCreateArgs<ExtArgs>>
    ): Prisma__LikeGrammarQuestionClient<$Result.GetResult<Prisma.$LikeGrammarQuestionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LikeGrammarQuestions.
     *     @param {LikeGrammarQuestionCreateManyArgs} args - Arguments to create many LikeGrammarQuestions.
     *     @example
     *     // Create many LikeGrammarQuestions
     *     const likeGrammarQuestion = await prisma.likeGrammarQuestion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LikeGrammarQuestionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeGrammarQuestionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LikeGrammarQuestion.
     * @param {LikeGrammarQuestionDeleteArgs} args - Arguments to delete one LikeGrammarQuestion.
     * @example
     * // Delete one LikeGrammarQuestion
     * const LikeGrammarQuestion = await prisma.likeGrammarQuestion.delete({
     *   where: {
     *     // ... filter to delete one LikeGrammarQuestion
     *   }
     * })
     * 
    **/
    delete<T extends LikeGrammarQuestionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LikeGrammarQuestionDeleteArgs<ExtArgs>>
    ): Prisma__LikeGrammarQuestionClient<$Result.GetResult<Prisma.$LikeGrammarQuestionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LikeGrammarQuestion.
     * @param {LikeGrammarQuestionUpdateArgs} args - Arguments to update one LikeGrammarQuestion.
     * @example
     * // Update one LikeGrammarQuestion
     * const likeGrammarQuestion = await prisma.likeGrammarQuestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LikeGrammarQuestionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LikeGrammarQuestionUpdateArgs<ExtArgs>>
    ): Prisma__LikeGrammarQuestionClient<$Result.GetResult<Prisma.$LikeGrammarQuestionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LikeGrammarQuestions.
     * @param {LikeGrammarQuestionDeleteManyArgs} args - Arguments to filter LikeGrammarQuestions to delete.
     * @example
     * // Delete a few LikeGrammarQuestions
     * const { count } = await prisma.likeGrammarQuestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LikeGrammarQuestionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeGrammarQuestionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LikeGrammarQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGrammarQuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LikeGrammarQuestions
     * const likeGrammarQuestion = await prisma.likeGrammarQuestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LikeGrammarQuestionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LikeGrammarQuestionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LikeGrammarQuestion.
     * @param {LikeGrammarQuestionUpsertArgs} args - Arguments to update or create a LikeGrammarQuestion.
     * @example
     * // Update or create a LikeGrammarQuestion
     * const likeGrammarQuestion = await prisma.likeGrammarQuestion.upsert({
     *   create: {
     *     // ... data to create a LikeGrammarQuestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LikeGrammarQuestion we want to update
     *   }
     * })
    **/
    upsert<T extends LikeGrammarQuestionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LikeGrammarQuestionUpsertArgs<ExtArgs>>
    ): Prisma__LikeGrammarQuestionClient<$Result.GetResult<Prisma.$LikeGrammarQuestionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LikeGrammarQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGrammarQuestionCountArgs} args - Arguments to filter LikeGrammarQuestions to count.
     * @example
     * // Count the number of LikeGrammarQuestions
     * const count = await prisma.likeGrammarQuestion.count({
     *   where: {
     *     // ... the filter for the LikeGrammarQuestions we want to count
     *   }
     * })
    **/
    count<T extends LikeGrammarQuestionCountArgs>(
      args?: Subset<T, LikeGrammarQuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeGrammarQuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LikeGrammarQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGrammarQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeGrammarQuestionAggregateArgs>(args: Subset<T, LikeGrammarQuestionAggregateArgs>): Prisma.PrismaPromise<GetLikeGrammarQuestionAggregateType<T>>

    /**
     * Group by LikeGrammarQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGrammarQuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikeGrammarQuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeGrammarQuestionGroupByArgs['orderBy'] }
        : { orderBy?: LikeGrammarQuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikeGrammarQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikeGrammarQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LikeGrammarQuestion model
   */
  readonly fields: LikeGrammarQuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LikeGrammarQuestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikeGrammarQuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    GrammarQuestion<T extends GrammarQuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GrammarQuestionDefaultArgs<ExtArgs>>): Prisma__GrammarQuestionClient<$Result.GetResult<Prisma.$GrammarQuestionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LikeGrammarQuestion model
   */ 
  interface LikeGrammarQuestionFieldRefs {
    readonly id: FieldRef<"LikeGrammarQuestion", 'Int'>
    readonly userId: FieldRef<"LikeGrammarQuestion", 'String'>
    readonly grammarQuestionId: FieldRef<"LikeGrammarQuestion", 'Int'>
    readonly createdAt: FieldRef<"LikeGrammarQuestion", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * LikeGrammarQuestion findUnique
   */
  export type LikeGrammarQuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeGrammarQuestion
     */
    select?: LikeGrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeGrammarQuestionInclude<ExtArgs> | null
    /**
     * Filter, which LikeGrammarQuestion to fetch.
     */
    where: LikeGrammarQuestionWhereUniqueInput
  }


  /**
   * LikeGrammarQuestion findUniqueOrThrow
   */
  export type LikeGrammarQuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeGrammarQuestion
     */
    select?: LikeGrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeGrammarQuestionInclude<ExtArgs> | null
    /**
     * Filter, which LikeGrammarQuestion to fetch.
     */
    where: LikeGrammarQuestionWhereUniqueInput
  }


  /**
   * LikeGrammarQuestion findFirst
   */
  export type LikeGrammarQuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeGrammarQuestion
     */
    select?: LikeGrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeGrammarQuestionInclude<ExtArgs> | null
    /**
     * Filter, which LikeGrammarQuestion to fetch.
     */
    where?: LikeGrammarQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeGrammarQuestions to fetch.
     */
    orderBy?: LikeGrammarQuestionOrderByWithRelationInput | LikeGrammarQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LikeGrammarQuestions.
     */
    cursor?: LikeGrammarQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeGrammarQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeGrammarQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LikeGrammarQuestions.
     */
    distinct?: LikeGrammarQuestionScalarFieldEnum | LikeGrammarQuestionScalarFieldEnum[]
  }


  /**
   * LikeGrammarQuestion findFirstOrThrow
   */
  export type LikeGrammarQuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeGrammarQuestion
     */
    select?: LikeGrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeGrammarQuestionInclude<ExtArgs> | null
    /**
     * Filter, which LikeGrammarQuestion to fetch.
     */
    where?: LikeGrammarQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeGrammarQuestions to fetch.
     */
    orderBy?: LikeGrammarQuestionOrderByWithRelationInput | LikeGrammarQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LikeGrammarQuestions.
     */
    cursor?: LikeGrammarQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeGrammarQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeGrammarQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LikeGrammarQuestions.
     */
    distinct?: LikeGrammarQuestionScalarFieldEnum | LikeGrammarQuestionScalarFieldEnum[]
  }


  /**
   * LikeGrammarQuestion findMany
   */
  export type LikeGrammarQuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeGrammarQuestion
     */
    select?: LikeGrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeGrammarQuestionInclude<ExtArgs> | null
    /**
     * Filter, which LikeGrammarQuestions to fetch.
     */
    where?: LikeGrammarQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeGrammarQuestions to fetch.
     */
    orderBy?: LikeGrammarQuestionOrderByWithRelationInput | LikeGrammarQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LikeGrammarQuestions.
     */
    cursor?: LikeGrammarQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeGrammarQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeGrammarQuestions.
     */
    skip?: number
    distinct?: LikeGrammarQuestionScalarFieldEnum | LikeGrammarQuestionScalarFieldEnum[]
  }


  /**
   * LikeGrammarQuestion create
   */
  export type LikeGrammarQuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeGrammarQuestion
     */
    select?: LikeGrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeGrammarQuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a LikeGrammarQuestion.
     */
    data: XOR<LikeGrammarQuestionCreateInput, LikeGrammarQuestionUncheckedCreateInput>
  }


  /**
   * LikeGrammarQuestion createMany
   */
  export type LikeGrammarQuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LikeGrammarQuestions.
     */
    data: LikeGrammarQuestionCreateManyInput | LikeGrammarQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * LikeGrammarQuestion update
   */
  export type LikeGrammarQuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeGrammarQuestion
     */
    select?: LikeGrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeGrammarQuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a LikeGrammarQuestion.
     */
    data: XOR<LikeGrammarQuestionUpdateInput, LikeGrammarQuestionUncheckedUpdateInput>
    /**
     * Choose, which LikeGrammarQuestion to update.
     */
    where: LikeGrammarQuestionWhereUniqueInput
  }


  /**
   * LikeGrammarQuestion updateMany
   */
  export type LikeGrammarQuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LikeGrammarQuestions.
     */
    data: XOR<LikeGrammarQuestionUpdateManyMutationInput, LikeGrammarQuestionUncheckedUpdateManyInput>
    /**
     * Filter which LikeGrammarQuestions to update
     */
    where?: LikeGrammarQuestionWhereInput
  }


  /**
   * LikeGrammarQuestion upsert
   */
  export type LikeGrammarQuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeGrammarQuestion
     */
    select?: LikeGrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeGrammarQuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the LikeGrammarQuestion to update in case it exists.
     */
    where: LikeGrammarQuestionWhereUniqueInput
    /**
     * In case the LikeGrammarQuestion found by the `where` argument doesn't exist, create a new LikeGrammarQuestion with this data.
     */
    create: XOR<LikeGrammarQuestionCreateInput, LikeGrammarQuestionUncheckedCreateInput>
    /**
     * In case the LikeGrammarQuestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikeGrammarQuestionUpdateInput, LikeGrammarQuestionUncheckedUpdateInput>
  }


  /**
   * LikeGrammarQuestion delete
   */
  export type LikeGrammarQuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeGrammarQuestion
     */
    select?: LikeGrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeGrammarQuestionInclude<ExtArgs> | null
    /**
     * Filter which LikeGrammarQuestion to delete.
     */
    where: LikeGrammarQuestionWhereUniqueInput
  }


  /**
   * LikeGrammarQuestion deleteMany
   */
  export type LikeGrammarQuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LikeGrammarQuestions to delete
     */
    where?: LikeGrammarQuestionWhereInput
  }


  /**
   * LikeGrammarQuestion without action
   */
  export type LikeGrammarQuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeGrammarQuestion
     */
    select?: LikeGrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeGrammarQuestionInclude<ExtArgs> | null
  }



  /**
   * Model LikeListening
   */

  export type AggregateLikeListening = {
    _count: LikeListeningCountAggregateOutputType | null
    _avg: LikeListeningAvgAggregateOutputType | null
    _sum: LikeListeningSumAggregateOutputType | null
    _min: LikeListeningMinAggregateOutputType | null
    _max: LikeListeningMaxAggregateOutputType | null
  }

  export type LikeListeningAvgAggregateOutputType = {
    id: number | null
    listeningId: number | null
  }

  export type LikeListeningSumAggregateOutputType = {
    id: number | null
    listeningId: number | null
  }

  export type LikeListeningMinAggregateOutputType = {
    id: number | null
    userId: string | null
    listeningId: number | null
    createdAt: Date | null
  }

  export type LikeListeningMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    listeningId: number | null
    createdAt: Date | null
  }

  export type LikeListeningCountAggregateOutputType = {
    id: number
    userId: number
    listeningId: number
    createdAt: number
    _all: number
  }


  export type LikeListeningAvgAggregateInputType = {
    id?: true
    listeningId?: true
  }

  export type LikeListeningSumAggregateInputType = {
    id?: true
    listeningId?: true
  }

  export type LikeListeningMinAggregateInputType = {
    id?: true
    userId?: true
    listeningId?: true
    createdAt?: true
  }

  export type LikeListeningMaxAggregateInputType = {
    id?: true
    userId?: true
    listeningId?: true
    createdAt?: true
  }

  export type LikeListeningCountAggregateInputType = {
    id?: true
    userId?: true
    listeningId?: true
    createdAt?: true
    _all?: true
  }

  export type LikeListeningAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LikeListening to aggregate.
     */
    where?: LikeListeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeListenings to fetch.
     */
    orderBy?: LikeListeningOrderByWithRelationInput | LikeListeningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikeListeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeListenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeListenings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LikeListenings
    **/
    _count?: true | LikeListeningCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LikeListeningAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LikeListeningSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikeListeningMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikeListeningMaxAggregateInputType
  }

  export type GetLikeListeningAggregateType<T extends LikeListeningAggregateArgs> = {
        [P in keyof T & keyof AggregateLikeListening]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLikeListening[P]>
      : GetScalarType<T[P], AggregateLikeListening[P]>
  }




  export type LikeListeningGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeListeningWhereInput
    orderBy?: LikeListeningOrderByWithAggregationInput | LikeListeningOrderByWithAggregationInput[]
    by: LikeListeningScalarFieldEnum[] | LikeListeningScalarFieldEnum
    having?: LikeListeningScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikeListeningCountAggregateInputType | true
    _avg?: LikeListeningAvgAggregateInputType
    _sum?: LikeListeningSumAggregateInputType
    _min?: LikeListeningMinAggregateInputType
    _max?: LikeListeningMaxAggregateInputType
  }

  export type LikeListeningGroupByOutputType = {
    id: number
    userId: string
    listeningId: number
    createdAt: Date
    _count: LikeListeningCountAggregateOutputType | null
    _avg: LikeListeningAvgAggregateOutputType | null
    _sum: LikeListeningSumAggregateOutputType | null
    _min: LikeListeningMinAggregateOutputType | null
    _max: LikeListeningMaxAggregateOutputType | null
  }

  type GetLikeListeningGroupByPayload<T extends LikeListeningGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikeListeningGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikeListeningGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikeListeningGroupByOutputType[P]>
            : GetScalarType<T[P], LikeListeningGroupByOutputType[P]>
        }
      >
    >


  export type LikeListeningSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    listeningId?: boolean
    createdAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Listening?: boolean | ListeningDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likeListening"]>

  export type LikeListeningSelectScalar = {
    id?: boolean
    userId?: boolean
    listeningId?: boolean
    createdAt?: boolean
  }

  export type LikeListeningInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Listening?: boolean | ListeningDefaultArgs<ExtArgs>
  }


  export type $LikeListeningPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LikeListening"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      Listening: Prisma.$ListeningPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      listeningId: number
      createdAt: Date
    }, ExtArgs["result"]["likeListening"]>
    composites: {}
  }


  type LikeListeningGetPayload<S extends boolean | null | undefined | LikeListeningDefaultArgs> = $Result.GetResult<Prisma.$LikeListeningPayload, S>

  type LikeListeningCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LikeListeningFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: LikeListeningCountAggregateInputType | true
    }

  export interface LikeListeningDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LikeListening'], meta: { name: 'LikeListening' } }
    /**
     * Find zero or one LikeListening that matches the filter.
     * @param {LikeListeningFindUniqueArgs} args - Arguments to find a LikeListening
     * @example
     * // Get one LikeListening
     * const likeListening = await prisma.likeListening.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LikeListeningFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LikeListeningFindUniqueArgs<ExtArgs>>
    ): Prisma__LikeListeningClient<$Result.GetResult<Prisma.$LikeListeningPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LikeListening that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LikeListeningFindUniqueOrThrowArgs} args - Arguments to find a LikeListening
     * @example
     * // Get one LikeListening
     * const likeListening = await prisma.likeListening.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LikeListeningFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeListeningFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LikeListeningClient<$Result.GetResult<Prisma.$LikeListeningPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LikeListening that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeListeningFindFirstArgs} args - Arguments to find a LikeListening
     * @example
     * // Get one LikeListening
     * const likeListening = await prisma.likeListening.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LikeListeningFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeListeningFindFirstArgs<ExtArgs>>
    ): Prisma__LikeListeningClient<$Result.GetResult<Prisma.$LikeListeningPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LikeListening that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeListeningFindFirstOrThrowArgs} args - Arguments to find a LikeListening
     * @example
     * // Get one LikeListening
     * const likeListening = await prisma.likeListening.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LikeListeningFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeListeningFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LikeListeningClient<$Result.GetResult<Prisma.$LikeListeningPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LikeListenings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeListeningFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LikeListenings
     * const likeListenings = await prisma.likeListening.findMany()
     * 
     * // Get first 10 LikeListenings
     * const likeListenings = await prisma.likeListening.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeListeningWithIdOnly = await prisma.likeListening.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LikeListeningFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeListeningFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeListeningPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LikeListening.
     * @param {LikeListeningCreateArgs} args - Arguments to create a LikeListening.
     * @example
     * // Create one LikeListening
     * const LikeListening = await prisma.likeListening.create({
     *   data: {
     *     // ... data to create a LikeListening
     *   }
     * })
     * 
    **/
    create<T extends LikeListeningCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LikeListeningCreateArgs<ExtArgs>>
    ): Prisma__LikeListeningClient<$Result.GetResult<Prisma.$LikeListeningPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LikeListenings.
     *     @param {LikeListeningCreateManyArgs} args - Arguments to create many LikeListenings.
     *     @example
     *     // Create many LikeListenings
     *     const likeListening = await prisma.likeListening.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LikeListeningCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeListeningCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LikeListening.
     * @param {LikeListeningDeleteArgs} args - Arguments to delete one LikeListening.
     * @example
     * // Delete one LikeListening
     * const LikeListening = await prisma.likeListening.delete({
     *   where: {
     *     // ... filter to delete one LikeListening
     *   }
     * })
     * 
    **/
    delete<T extends LikeListeningDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LikeListeningDeleteArgs<ExtArgs>>
    ): Prisma__LikeListeningClient<$Result.GetResult<Prisma.$LikeListeningPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LikeListening.
     * @param {LikeListeningUpdateArgs} args - Arguments to update one LikeListening.
     * @example
     * // Update one LikeListening
     * const likeListening = await prisma.likeListening.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LikeListeningUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LikeListeningUpdateArgs<ExtArgs>>
    ): Prisma__LikeListeningClient<$Result.GetResult<Prisma.$LikeListeningPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LikeListenings.
     * @param {LikeListeningDeleteManyArgs} args - Arguments to filter LikeListenings to delete.
     * @example
     * // Delete a few LikeListenings
     * const { count } = await prisma.likeListening.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LikeListeningDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeListeningDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LikeListenings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeListeningUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LikeListenings
     * const likeListening = await prisma.likeListening.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LikeListeningUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LikeListeningUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LikeListening.
     * @param {LikeListeningUpsertArgs} args - Arguments to update or create a LikeListening.
     * @example
     * // Update or create a LikeListening
     * const likeListening = await prisma.likeListening.upsert({
     *   create: {
     *     // ... data to create a LikeListening
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LikeListening we want to update
     *   }
     * })
    **/
    upsert<T extends LikeListeningUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LikeListeningUpsertArgs<ExtArgs>>
    ): Prisma__LikeListeningClient<$Result.GetResult<Prisma.$LikeListeningPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LikeListenings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeListeningCountArgs} args - Arguments to filter LikeListenings to count.
     * @example
     * // Count the number of LikeListenings
     * const count = await prisma.likeListening.count({
     *   where: {
     *     // ... the filter for the LikeListenings we want to count
     *   }
     * })
    **/
    count<T extends LikeListeningCountArgs>(
      args?: Subset<T, LikeListeningCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeListeningCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LikeListening.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeListeningAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeListeningAggregateArgs>(args: Subset<T, LikeListeningAggregateArgs>): Prisma.PrismaPromise<GetLikeListeningAggregateType<T>>

    /**
     * Group by LikeListening.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeListeningGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikeListeningGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeListeningGroupByArgs['orderBy'] }
        : { orderBy?: LikeListeningGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikeListeningGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikeListeningGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LikeListening model
   */
  readonly fields: LikeListeningFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LikeListening.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikeListeningClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Listening<T extends ListeningDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ListeningDefaultArgs<ExtArgs>>): Prisma__ListeningClient<$Result.GetResult<Prisma.$ListeningPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LikeListening model
   */ 
  interface LikeListeningFieldRefs {
    readonly id: FieldRef<"LikeListening", 'Int'>
    readonly userId: FieldRef<"LikeListening", 'String'>
    readonly listeningId: FieldRef<"LikeListening", 'Int'>
    readonly createdAt: FieldRef<"LikeListening", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * LikeListening findUnique
   */
  export type LikeListeningFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeListening
     */
    select?: LikeListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeListeningInclude<ExtArgs> | null
    /**
     * Filter, which LikeListening to fetch.
     */
    where: LikeListeningWhereUniqueInput
  }


  /**
   * LikeListening findUniqueOrThrow
   */
  export type LikeListeningFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeListening
     */
    select?: LikeListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeListeningInclude<ExtArgs> | null
    /**
     * Filter, which LikeListening to fetch.
     */
    where: LikeListeningWhereUniqueInput
  }


  /**
   * LikeListening findFirst
   */
  export type LikeListeningFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeListening
     */
    select?: LikeListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeListeningInclude<ExtArgs> | null
    /**
     * Filter, which LikeListening to fetch.
     */
    where?: LikeListeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeListenings to fetch.
     */
    orderBy?: LikeListeningOrderByWithRelationInput | LikeListeningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LikeListenings.
     */
    cursor?: LikeListeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeListenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeListenings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LikeListenings.
     */
    distinct?: LikeListeningScalarFieldEnum | LikeListeningScalarFieldEnum[]
  }


  /**
   * LikeListening findFirstOrThrow
   */
  export type LikeListeningFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeListening
     */
    select?: LikeListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeListeningInclude<ExtArgs> | null
    /**
     * Filter, which LikeListening to fetch.
     */
    where?: LikeListeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeListenings to fetch.
     */
    orderBy?: LikeListeningOrderByWithRelationInput | LikeListeningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LikeListenings.
     */
    cursor?: LikeListeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeListenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeListenings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LikeListenings.
     */
    distinct?: LikeListeningScalarFieldEnum | LikeListeningScalarFieldEnum[]
  }


  /**
   * LikeListening findMany
   */
  export type LikeListeningFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeListening
     */
    select?: LikeListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeListeningInclude<ExtArgs> | null
    /**
     * Filter, which LikeListenings to fetch.
     */
    where?: LikeListeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeListenings to fetch.
     */
    orderBy?: LikeListeningOrderByWithRelationInput | LikeListeningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LikeListenings.
     */
    cursor?: LikeListeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeListenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeListenings.
     */
    skip?: number
    distinct?: LikeListeningScalarFieldEnum | LikeListeningScalarFieldEnum[]
  }


  /**
   * LikeListening create
   */
  export type LikeListeningCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeListening
     */
    select?: LikeListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeListeningInclude<ExtArgs> | null
    /**
     * The data needed to create a LikeListening.
     */
    data: XOR<LikeListeningCreateInput, LikeListeningUncheckedCreateInput>
  }


  /**
   * LikeListening createMany
   */
  export type LikeListeningCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LikeListenings.
     */
    data: LikeListeningCreateManyInput | LikeListeningCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * LikeListening update
   */
  export type LikeListeningUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeListening
     */
    select?: LikeListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeListeningInclude<ExtArgs> | null
    /**
     * The data needed to update a LikeListening.
     */
    data: XOR<LikeListeningUpdateInput, LikeListeningUncheckedUpdateInput>
    /**
     * Choose, which LikeListening to update.
     */
    where: LikeListeningWhereUniqueInput
  }


  /**
   * LikeListening updateMany
   */
  export type LikeListeningUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LikeListenings.
     */
    data: XOR<LikeListeningUpdateManyMutationInput, LikeListeningUncheckedUpdateManyInput>
    /**
     * Filter which LikeListenings to update
     */
    where?: LikeListeningWhereInput
  }


  /**
   * LikeListening upsert
   */
  export type LikeListeningUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeListening
     */
    select?: LikeListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeListeningInclude<ExtArgs> | null
    /**
     * The filter to search for the LikeListening to update in case it exists.
     */
    where: LikeListeningWhereUniqueInput
    /**
     * In case the LikeListening found by the `where` argument doesn't exist, create a new LikeListening with this data.
     */
    create: XOR<LikeListeningCreateInput, LikeListeningUncheckedCreateInput>
    /**
     * In case the LikeListening was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikeListeningUpdateInput, LikeListeningUncheckedUpdateInput>
  }


  /**
   * LikeListening delete
   */
  export type LikeListeningDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeListening
     */
    select?: LikeListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeListeningInclude<ExtArgs> | null
    /**
     * Filter which LikeListening to delete.
     */
    where: LikeListeningWhereUniqueInput
  }


  /**
   * LikeListening deleteMany
   */
  export type LikeListeningDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LikeListenings to delete
     */
    where?: LikeListeningWhereInput
  }


  /**
   * LikeListening without action
   */
  export type LikeListeningDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeListening
     */
    select?: LikeListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeListeningInclude<ExtArgs> | null
  }



  /**
   * Model Listening
   */

  export type AggregateListening = {
    _count: ListeningCountAggregateOutputType | null
    _avg: ListeningAvgAggregateOutputType | null
    _sum: ListeningSumAggregateOutputType | null
    _min: ListeningMinAggregateOutputType | null
    _max: ListeningMaxAggregateOutputType | null
  }

  export type ListeningAvgAggregateOutputType = {
    id: number | null
    lap: number | null
    localId: number | null
  }

  export type ListeningSumAggregateOutputType = {
    id: number | null
    lap: number | null
    localId: number | null
  }

  export type ListeningMinAggregateOutputType = {
    id: number | null
    title: string | null
    url: string | null
    lap: number | null
    localId: number | null
  }

  export type ListeningMaxAggregateOutputType = {
    id: number | null
    title: string | null
    url: string | null
    lap: number | null
    localId: number | null
  }

  export type ListeningCountAggregateOutputType = {
    id: number
    title: number
    url: number
    lap: number
    localId: number
    _all: number
  }


  export type ListeningAvgAggregateInputType = {
    id?: true
    lap?: true
    localId?: true
  }

  export type ListeningSumAggregateInputType = {
    id?: true
    lap?: true
    localId?: true
  }

  export type ListeningMinAggregateInputType = {
    id?: true
    title?: true
    url?: true
    lap?: true
    localId?: true
  }

  export type ListeningMaxAggregateInputType = {
    id?: true
    title?: true
    url?: true
    lap?: true
    localId?: true
  }

  export type ListeningCountAggregateInputType = {
    id?: true
    title?: true
    url?: true
    lap?: true
    localId?: true
    _all?: true
  }

  export type ListeningAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Listening to aggregate.
     */
    where?: ListeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Listenings to fetch.
     */
    orderBy?: ListeningOrderByWithRelationInput | ListeningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ListeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Listenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Listenings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Listenings
    **/
    _count?: true | ListeningCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ListeningAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ListeningSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ListeningMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ListeningMaxAggregateInputType
  }

  export type GetListeningAggregateType<T extends ListeningAggregateArgs> = {
        [P in keyof T & keyof AggregateListening]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateListening[P]>
      : GetScalarType<T[P], AggregateListening[P]>
  }




  export type ListeningGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListeningWhereInput
    orderBy?: ListeningOrderByWithAggregationInput | ListeningOrderByWithAggregationInput[]
    by: ListeningScalarFieldEnum[] | ListeningScalarFieldEnum
    having?: ListeningScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ListeningCountAggregateInputType | true
    _avg?: ListeningAvgAggregateInputType
    _sum?: ListeningSumAggregateInputType
    _min?: ListeningMinAggregateInputType
    _max?: ListeningMaxAggregateInputType
  }

  export type ListeningGroupByOutputType = {
    id: number
    title: string
    url: string
    lap: number
    localId: number
    _count: ListeningCountAggregateOutputType | null
    _avg: ListeningAvgAggregateOutputType | null
    _sum: ListeningSumAggregateOutputType | null
    _min: ListeningMinAggregateOutputType | null
    _max: ListeningMaxAggregateOutputType | null
  }

  type GetListeningGroupByPayload<T extends ListeningGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ListeningGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ListeningGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ListeningGroupByOutputType[P]>
            : GetScalarType<T[P], ListeningGroupByOutputType[P]>
        }
      >
    >


  export type ListeningSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    url?: boolean
    lap?: boolean
    localId?: boolean
    LikeListening?: boolean | Listening$LikeListeningArgs<ExtArgs>
    _count?: boolean | ListeningCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["listening"]>

  export type ListeningSelectScalar = {
    id?: boolean
    title?: boolean
    url?: boolean
    lap?: boolean
    localId?: boolean
  }

  export type ListeningInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    LikeListening?: boolean | Listening$LikeListeningArgs<ExtArgs>
    _count?: boolean | ListeningCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ListeningPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Listening"
    objects: {
      LikeListening: Prisma.$LikeListeningPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      url: string
      lap: number
      localId: number
    }, ExtArgs["result"]["listening"]>
    composites: {}
  }


  type ListeningGetPayload<S extends boolean | null | undefined | ListeningDefaultArgs> = $Result.GetResult<Prisma.$ListeningPayload, S>

  type ListeningCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ListeningFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ListeningCountAggregateInputType | true
    }

  export interface ListeningDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Listening'], meta: { name: 'Listening' } }
    /**
     * Find zero or one Listening that matches the filter.
     * @param {ListeningFindUniqueArgs} args - Arguments to find a Listening
     * @example
     * // Get one Listening
     * const listening = await prisma.listening.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ListeningFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ListeningFindUniqueArgs<ExtArgs>>
    ): Prisma__ListeningClient<$Result.GetResult<Prisma.$ListeningPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Listening that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ListeningFindUniqueOrThrowArgs} args - Arguments to find a Listening
     * @example
     * // Get one Listening
     * const listening = await prisma.listening.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ListeningFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ListeningFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ListeningClient<$Result.GetResult<Prisma.$ListeningPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Listening that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListeningFindFirstArgs} args - Arguments to find a Listening
     * @example
     * // Get one Listening
     * const listening = await prisma.listening.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ListeningFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ListeningFindFirstArgs<ExtArgs>>
    ): Prisma__ListeningClient<$Result.GetResult<Prisma.$ListeningPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Listening that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListeningFindFirstOrThrowArgs} args - Arguments to find a Listening
     * @example
     * // Get one Listening
     * const listening = await prisma.listening.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ListeningFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ListeningFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ListeningClient<$Result.GetResult<Prisma.$ListeningPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Listenings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListeningFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Listenings
     * const listenings = await prisma.listening.findMany()
     * 
     * // Get first 10 Listenings
     * const listenings = await prisma.listening.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const listeningWithIdOnly = await prisma.listening.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ListeningFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ListeningFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListeningPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Listening.
     * @param {ListeningCreateArgs} args - Arguments to create a Listening.
     * @example
     * // Create one Listening
     * const Listening = await prisma.listening.create({
     *   data: {
     *     // ... data to create a Listening
     *   }
     * })
     * 
    **/
    create<T extends ListeningCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ListeningCreateArgs<ExtArgs>>
    ): Prisma__ListeningClient<$Result.GetResult<Prisma.$ListeningPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Listenings.
     *     @param {ListeningCreateManyArgs} args - Arguments to create many Listenings.
     *     @example
     *     // Create many Listenings
     *     const listening = await prisma.listening.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ListeningCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ListeningCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Listening.
     * @param {ListeningDeleteArgs} args - Arguments to delete one Listening.
     * @example
     * // Delete one Listening
     * const Listening = await prisma.listening.delete({
     *   where: {
     *     // ... filter to delete one Listening
     *   }
     * })
     * 
    **/
    delete<T extends ListeningDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ListeningDeleteArgs<ExtArgs>>
    ): Prisma__ListeningClient<$Result.GetResult<Prisma.$ListeningPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Listening.
     * @param {ListeningUpdateArgs} args - Arguments to update one Listening.
     * @example
     * // Update one Listening
     * const listening = await prisma.listening.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ListeningUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ListeningUpdateArgs<ExtArgs>>
    ): Prisma__ListeningClient<$Result.GetResult<Prisma.$ListeningPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Listenings.
     * @param {ListeningDeleteManyArgs} args - Arguments to filter Listenings to delete.
     * @example
     * // Delete a few Listenings
     * const { count } = await prisma.listening.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ListeningDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ListeningDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Listenings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListeningUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Listenings
     * const listening = await prisma.listening.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ListeningUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ListeningUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Listening.
     * @param {ListeningUpsertArgs} args - Arguments to update or create a Listening.
     * @example
     * // Update or create a Listening
     * const listening = await prisma.listening.upsert({
     *   create: {
     *     // ... data to create a Listening
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Listening we want to update
     *   }
     * })
    **/
    upsert<T extends ListeningUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ListeningUpsertArgs<ExtArgs>>
    ): Prisma__ListeningClient<$Result.GetResult<Prisma.$ListeningPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Listenings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListeningCountArgs} args - Arguments to filter Listenings to count.
     * @example
     * // Count the number of Listenings
     * const count = await prisma.listening.count({
     *   where: {
     *     // ... the filter for the Listenings we want to count
     *   }
     * })
    **/
    count<T extends ListeningCountArgs>(
      args?: Subset<T, ListeningCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ListeningCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Listening.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListeningAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ListeningAggregateArgs>(args: Subset<T, ListeningAggregateArgs>): Prisma.PrismaPromise<GetListeningAggregateType<T>>

    /**
     * Group by Listening.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListeningGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ListeningGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ListeningGroupByArgs['orderBy'] }
        : { orderBy?: ListeningGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ListeningGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListeningGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Listening model
   */
  readonly fields: ListeningFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Listening.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ListeningClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    LikeListening<T extends Listening$LikeListeningArgs<ExtArgs> = {}>(args?: Subset<T, Listening$LikeListeningArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeListeningPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Listening model
   */ 
  interface ListeningFieldRefs {
    readonly id: FieldRef<"Listening", 'Int'>
    readonly title: FieldRef<"Listening", 'String'>
    readonly url: FieldRef<"Listening", 'String'>
    readonly lap: FieldRef<"Listening", 'Int'>
    readonly localId: FieldRef<"Listening", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Listening findUnique
   */
  export type ListeningFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listening
     */
    select?: ListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ListeningInclude<ExtArgs> | null
    /**
     * Filter, which Listening to fetch.
     */
    where: ListeningWhereUniqueInput
  }


  /**
   * Listening findUniqueOrThrow
   */
  export type ListeningFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listening
     */
    select?: ListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ListeningInclude<ExtArgs> | null
    /**
     * Filter, which Listening to fetch.
     */
    where: ListeningWhereUniqueInput
  }


  /**
   * Listening findFirst
   */
  export type ListeningFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listening
     */
    select?: ListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ListeningInclude<ExtArgs> | null
    /**
     * Filter, which Listening to fetch.
     */
    where?: ListeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Listenings to fetch.
     */
    orderBy?: ListeningOrderByWithRelationInput | ListeningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Listenings.
     */
    cursor?: ListeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Listenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Listenings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Listenings.
     */
    distinct?: ListeningScalarFieldEnum | ListeningScalarFieldEnum[]
  }


  /**
   * Listening findFirstOrThrow
   */
  export type ListeningFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listening
     */
    select?: ListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ListeningInclude<ExtArgs> | null
    /**
     * Filter, which Listening to fetch.
     */
    where?: ListeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Listenings to fetch.
     */
    orderBy?: ListeningOrderByWithRelationInput | ListeningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Listenings.
     */
    cursor?: ListeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Listenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Listenings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Listenings.
     */
    distinct?: ListeningScalarFieldEnum | ListeningScalarFieldEnum[]
  }


  /**
   * Listening findMany
   */
  export type ListeningFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listening
     */
    select?: ListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ListeningInclude<ExtArgs> | null
    /**
     * Filter, which Listenings to fetch.
     */
    where?: ListeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Listenings to fetch.
     */
    orderBy?: ListeningOrderByWithRelationInput | ListeningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Listenings.
     */
    cursor?: ListeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Listenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Listenings.
     */
    skip?: number
    distinct?: ListeningScalarFieldEnum | ListeningScalarFieldEnum[]
  }


  /**
   * Listening create
   */
  export type ListeningCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listening
     */
    select?: ListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ListeningInclude<ExtArgs> | null
    /**
     * The data needed to create a Listening.
     */
    data: XOR<ListeningCreateInput, ListeningUncheckedCreateInput>
  }


  /**
   * Listening createMany
   */
  export type ListeningCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Listenings.
     */
    data: ListeningCreateManyInput | ListeningCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Listening update
   */
  export type ListeningUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listening
     */
    select?: ListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ListeningInclude<ExtArgs> | null
    /**
     * The data needed to update a Listening.
     */
    data: XOR<ListeningUpdateInput, ListeningUncheckedUpdateInput>
    /**
     * Choose, which Listening to update.
     */
    where: ListeningWhereUniqueInput
  }


  /**
   * Listening updateMany
   */
  export type ListeningUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Listenings.
     */
    data: XOR<ListeningUpdateManyMutationInput, ListeningUncheckedUpdateManyInput>
    /**
     * Filter which Listenings to update
     */
    where?: ListeningWhereInput
  }


  /**
   * Listening upsert
   */
  export type ListeningUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listening
     */
    select?: ListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ListeningInclude<ExtArgs> | null
    /**
     * The filter to search for the Listening to update in case it exists.
     */
    where: ListeningWhereUniqueInput
    /**
     * In case the Listening found by the `where` argument doesn't exist, create a new Listening with this data.
     */
    create: XOR<ListeningCreateInput, ListeningUncheckedCreateInput>
    /**
     * In case the Listening was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ListeningUpdateInput, ListeningUncheckedUpdateInput>
  }


  /**
   * Listening delete
   */
  export type ListeningDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listening
     */
    select?: ListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ListeningInclude<ExtArgs> | null
    /**
     * Filter which Listening to delete.
     */
    where: ListeningWhereUniqueInput
  }


  /**
   * Listening deleteMany
   */
  export type ListeningDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Listenings to delete
     */
    where?: ListeningWhereInput
  }


  /**
   * Listening.LikeListening
   */
  export type Listening$LikeListeningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeListening
     */
    select?: LikeListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeListeningInclude<ExtArgs> | null
    where?: LikeListeningWhereInput
    orderBy?: LikeListeningOrderByWithRelationInput | LikeListeningOrderByWithRelationInput[]
    cursor?: LikeListeningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeListeningScalarFieldEnum | LikeListeningScalarFieldEnum[]
  }


  /**
   * Listening without action
   */
  export type ListeningDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listening
     */
    select?: ListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ListeningInclude<ExtArgs> | null
  }



  /**
   * Model Log
   */

  export type AggregateLog = {
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  export type LogAvgAggregateOutputType = {
    id: number | null
  }

  export type LogSumAggregateOutputType = {
    id: number | null
  }

  export type LogMinAggregateOutputType = {
    id: number | null
    about: $Enums.LogAbout | null
    level: $Enums.LogLevel | null
    message: string | null
  }

  export type LogMaxAggregateOutputType = {
    id: number | null
    about: $Enums.LogAbout | null
    level: $Enums.LogLevel | null
    message: string | null
  }

  export type LogCountAggregateOutputType = {
    id: number
    about: number
    level: number
    message: number
    meta: number
    _all: number
  }


  export type LogAvgAggregateInputType = {
    id?: true
  }

  export type LogSumAggregateInputType = {
    id?: true
  }

  export type LogMinAggregateInputType = {
    id?: true
    about?: true
    level?: true
    message?: true
  }

  export type LogMaxAggregateInputType = {
    id?: true
    about?: true
    level?: true
    message?: true
  }

  export type LogCountAggregateInputType = {
    id?: true
    about?: true
    level?: true
    message?: true
    meta?: true
    _all?: true
  }

  export type LogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Log to aggregate.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logs
    **/
    _count?: true | LogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogMaxAggregateInputType
  }

  export type GetLogAggregateType<T extends LogAggregateArgs> = {
        [P in keyof T & keyof AggregateLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLog[P]>
      : GetScalarType<T[P], AggregateLog[P]>
  }




  export type LogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
    orderBy?: LogOrderByWithAggregationInput | LogOrderByWithAggregationInput[]
    by: LogScalarFieldEnum[] | LogScalarFieldEnum
    having?: LogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogCountAggregateInputType | true
    _avg?: LogAvgAggregateInputType
    _sum?: LogSumAggregateInputType
    _min?: LogMinAggregateInputType
    _max?: LogMaxAggregateInputType
  }

  export type LogGroupByOutputType = {
    id: number
    about: $Enums.LogAbout
    level: $Enums.LogLevel
    message: string
    meta: JsonValue | null
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  type GetLogGroupByPayload<T extends LogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogGroupByOutputType[P]>
            : GetScalarType<T[P], LogGroupByOutputType[P]>
        }
      >
    >


  export type LogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    about?: boolean
    level?: boolean
    message?: boolean
    meta?: boolean
  }, ExtArgs["result"]["log"]>

  export type LogSelectScalar = {
    id?: boolean
    about?: boolean
    level?: boolean
    message?: boolean
    meta?: boolean
  }


  export type $LogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Log"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      about: $Enums.LogAbout
      level: $Enums.LogLevel
      message: string
      meta: Prisma.JsonValue | null
    }, ExtArgs["result"]["log"]>
    composites: {}
  }


  type LogGetPayload<S extends boolean | null | undefined | LogDefaultArgs> = $Result.GetResult<Prisma.$LogPayload, S>

  type LogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LogFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: LogCountAggregateInputType | true
    }

  export interface LogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Log'], meta: { name: 'Log' } }
    /**
     * Find zero or one Log that matches the filter.
     * @param {LogFindUniqueArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LogFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LogFindUniqueArgs<ExtArgs>>
    ): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Log that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LogFindUniqueOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LogFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LogFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LogFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LogFindFirstArgs<ExtArgs>>
    ): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Log that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LogFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LogFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.log.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logWithIdOnly = await prisma.log.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LogFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LogFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Log.
     * @param {LogCreateArgs} args - Arguments to create a Log.
     * @example
     * // Create one Log
     * const Log = await prisma.log.create({
     *   data: {
     *     // ... data to create a Log
     *   }
     * })
     * 
    **/
    create<T extends LogCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LogCreateArgs<ExtArgs>>
    ): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Logs.
     *     @param {LogCreateManyArgs} args - Arguments to create many Logs.
     *     @example
     *     // Create many Logs
     *     const log = await prisma.log.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LogCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LogCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Log.
     * @param {LogDeleteArgs} args - Arguments to delete one Log.
     * @example
     * // Delete one Log
     * const Log = await prisma.log.delete({
     *   where: {
     *     // ... filter to delete one Log
     *   }
     * })
     * 
    **/
    delete<T extends LogDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LogDeleteArgs<ExtArgs>>
    ): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Log.
     * @param {LogUpdateArgs} args - Arguments to update one Log.
     * @example
     * // Update one Log
     * const log = await prisma.log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LogUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LogUpdateArgs<ExtArgs>>
    ): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Logs.
     * @param {LogDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LogDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LogDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LogUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LogUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Log.
     * @param {LogUpsertArgs} args - Arguments to update or create a Log.
     * @example
     * // Update or create a Log
     * const log = await prisma.log.upsert({
     *   create: {
     *     // ... data to create a Log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Log we want to update
     *   }
     * })
    **/
    upsert<T extends LogUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LogUpsertArgs<ExtArgs>>
    ): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.log.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends LogCountArgs>(
      args?: Subset<T, LogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogAggregateArgs>(args: Subset<T, LogAggregateArgs>): Prisma.PrismaPromise<GetLogAggregateType<T>>

    /**
     * Group by Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogGroupByArgs['orderBy'] }
        : { orderBy?: LogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Log model
   */
  readonly fields: LogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Log model
   */ 
  interface LogFieldRefs {
    readonly id: FieldRef<"Log", 'Int'>
    readonly about: FieldRef<"Log", 'LogAbout'>
    readonly level: FieldRef<"Log", 'LogLevel'>
    readonly message: FieldRef<"Log", 'String'>
    readonly meta: FieldRef<"Log", 'Json'>
  }
    

  // Custom InputTypes

  /**
   * Log findUnique
   */
  export type LogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }


  /**
   * Log findUniqueOrThrow
   */
  export type LogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }


  /**
   * Log findFirst
   */
  export type LogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }


  /**
   * Log findFirstOrThrow
   */
  export type LogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }


  /**
   * Log findMany
   */
  export type LogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }


  /**
   * Log create
   */
  export type LogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * The data needed to create a Log.
     */
    data: XOR<LogCreateInput, LogUncheckedCreateInput>
  }


  /**
   * Log createMany
   */
  export type LogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Logs.
     */
    data: LogCreateManyInput | LogCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Log update
   */
  export type LogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * The data needed to update a Log.
     */
    data: XOR<LogUpdateInput, LogUncheckedUpdateInput>
    /**
     * Choose, which Log to update.
     */
    where: LogWhereUniqueInput
  }


  /**
   * Log updateMany
   */
  export type LogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Logs.
     */
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogWhereInput
  }


  /**
   * Log upsert
   */
  export type LogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * The filter to search for the Log to update in case it exists.
     */
    where: LogWhereUniqueInput
    /**
     * In case the Log found by the `where` argument doesn't exist, create a new Log with this data.
     */
    create: XOR<LogCreateInput, LogUncheckedCreateInput>
    /**
     * In case the Log was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogUpdateInput, LogUncheckedUpdateInput>
  }


  /**
   * Log delete
   */
  export type LogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter which Log to delete.
     */
    where: LogWhereUniqueInput
  }


  /**
   * Log deleteMany
   */
  export type LogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logs to delete
     */
    where?: LogWhereInput
  }


  /**
   * Log without action
   */
  export type LogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
  }



  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    checkoutType: $Enums.checkoutType | null
    priceId: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    checkoutType: $Enums.checkoutType | null
    priceId: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    price: number
    checkoutType: number
    image: number
    priceId: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    checkoutType?: true
    priceId?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    checkoutType?: true
    priceId?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    checkoutType?: true
    image?: true
    priceId?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: number
    name: string
    price: number
    checkoutType: $Enums.checkoutType
    image: JsonValue | null
    priceId: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    checkoutType?: boolean
    image?: boolean
    priceId?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ProductReview?: boolean | Product$ProductReviewArgs<ExtArgs>
    StripeCheckout?: boolean | Product$StripeCheckoutArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    price?: boolean
    checkoutType?: boolean
    image?: boolean
    priceId?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ProductReview?: boolean | Product$ProductReviewArgs<ExtArgs>
    StripeCheckout?: boolean | Product$StripeCheckoutArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      ProductReview: Prisma.$ProductReviewPayload<ExtArgs>[]
      StripeCheckout: Prisma.$StripeCheckoutPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      price: number
      checkoutType: $Enums.checkoutType
      image: Prisma.JsonValue | null
      priceId: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["product"]>
    composites: {}
  }


  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCreateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ProductReview<T extends Product$ProductReviewArgs<ExtArgs> = {}>(args?: Subset<T, Product$ProductReviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductReviewPayload<ExtArgs>, T, 'findMany'> | Null>;

    StripeCheckout<T extends Product$StripeCheckoutArgs<ExtArgs> = {}>(args?: Subset<T, Product$StripeCheckoutArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StripeCheckoutPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'Int'>
    readonly name: FieldRef<"Product", 'String'>
    readonly price: FieldRef<"Product", 'Int'>
    readonly checkoutType: FieldRef<"Product", 'checkoutType'>
    readonly image: FieldRef<"Product", 'Json'>
    readonly priceId: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }


  /**
   * Product.ProductReview
   */
  export type Product$ProductReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReview
     */
    select?: ProductReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductReviewInclude<ExtArgs> | null
    where?: ProductReviewWhereInput
    orderBy?: ProductReviewOrderByWithRelationInput | ProductReviewOrderByWithRelationInput[]
    cursor?: ProductReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductReviewScalarFieldEnum | ProductReviewScalarFieldEnum[]
  }


  /**
   * Product.StripeCheckout
   */
  export type Product$StripeCheckoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCheckout
     */
    select?: StripeCheckoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCheckoutInclude<ExtArgs> | null
    where?: StripeCheckoutWhereInput
    orderBy?: StripeCheckoutOrderByWithRelationInput | StripeCheckoutOrderByWithRelationInput[]
    cursor?: StripeCheckoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StripeCheckoutScalarFieldEnum | StripeCheckoutScalarFieldEnum[]
  }


  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
  }



  /**
   * Model ProductReview
   */

  export type AggregateProductReview = {
    _count: ProductReviewCountAggregateOutputType | null
    _avg: ProductReviewAvgAggregateOutputType | null
    _sum: ProductReviewSumAggregateOutputType | null
    _min: ProductReviewMinAggregateOutputType | null
    _max: ProductReviewMaxAggregateOutputType | null
  }

  export type ProductReviewAvgAggregateOutputType = {
    id: number | null
    rating: number | null
    productId: number | null
    checkoutId: number | null
  }

  export type ProductReviewSumAggregateOutputType = {
    id: number | null
    rating: number | null
    productId: number | null
    checkoutId: number | null
  }

  export type ProductReviewMinAggregateOutputType = {
    id: number | null
    text: string | null
    reviewer: string | null
    rating: number | null
    createdAt: Date | null
    updatedAt: Date | null
    productId: number | null
    checkoutId: number | null
  }

  export type ProductReviewMaxAggregateOutputType = {
    id: number | null
    text: string | null
    reviewer: string | null
    rating: number | null
    createdAt: Date | null
    updatedAt: Date | null
    productId: number | null
    checkoutId: number | null
  }

  export type ProductReviewCountAggregateOutputType = {
    id: number
    text: number
    reviewer: number
    rating: number
    createdAt: number
    updatedAt: number
    productId: number
    checkoutId: number
    _all: number
  }


  export type ProductReviewAvgAggregateInputType = {
    id?: true
    rating?: true
    productId?: true
    checkoutId?: true
  }

  export type ProductReviewSumAggregateInputType = {
    id?: true
    rating?: true
    productId?: true
    checkoutId?: true
  }

  export type ProductReviewMinAggregateInputType = {
    id?: true
    text?: true
    reviewer?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
    productId?: true
    checkoutId?: true
  }

  export type ProductReviewMaxAggregateInputType = {
    id?: true
    text?: true
    reviewer?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
    productId?: true
    checkoutId?: true
  }

  export type ProductReviewCountAggregateInputType = {
    id?: true
    text?: true
    reviewer?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
    productId?: true
    checkoutId?: true
    _all?: true
  }

  export type ProductReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductReview to aggregate.
     */
    where?: ProductReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductReviews to fetch.
     */
    orderBy?: ProductReviewOrderByWithRelationInput | ProductReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductReviews
    **/
    _count?: true | ProductReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductReviewMaxAggregateInputType
  }

  export type GetProductReviewAggregateType<T extends ProductReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateProductReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductReview[P]>
      : GetScalarType<T[P], AggregateProductReview[P]>
  }




  export type ProductReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductReviewWhereInput
    orderBy?: ProductReviewOrderByWithAggregationInput | ProductReviewOrderByWithAggregationInput[]
    by: ProductReviewScalarFieldEnum[] | ProductReviewScalarFieldEnum
    having?: ProductReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductReviewCountAggregateInputType | true
    _avg?: ProductReviewAvgAggregateInputType
    _sum?: ProductReviewSumAggregateInputType
    _min?: ProductReviewMinAggregateInputType
    _max?: ProductReviewMaxAggregateInputType
  }

  export type ProductReviewGroupByOutputType = {
    id: number
    text: string
    reviewer: string
    rating: number
    createdAt: Date
    updatedAt: Date
    productId: number
    checkoutId: number | null
    _count: ProductReviewCountAggregateOutputType | null
    _avg: ProductReviewAvgAggregateOutputType | null
    _sum: ProductReviewSumAggregateOutputType | null
    _min: ProductReviewMinAggregateOutputType | null
    _max: ProductReviewMaxAggregateOutputType | null
  }

  type GetProductReviewGroupByPayload<T extends ProductReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ProductReviewGroupByOutputType[P]>
        }
      >
    >


  export type ProductReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    reviewer?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    productId?: boolean
    checkoutId?: boolean
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    StripeCheckout?: boolean | ProductReview$StripeCheckoutArgs<ExtArgs>
  }, ExtArgs["result"]["productReview"]>

  export type ProductReviewSelectScalar = {
    id?: boolean
    text?: boolean
    reviewer?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    productId?: boolean
    checkoutId?: boolean
  }

  export type ProductReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    StripeCheckout?: boolean | ProductReview$StripeCheckoutArgs<ExtArgs>
  }


  export type $ProductReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductReview"
    objects: {
      Product: Prisma.$ProductPayload<ExtArgs>
      StripeCheckout: Prisma.$StripeCheckoutPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      text: string
      reviewer: string
      rating: number
      createdAt: Date
      updatedAt: Date
      productId: number
      checkoutId: number | null
    }, ExtArgs["result"]["productReview"]>
    composites: {}
  }


  type ProductReviewGetPayload<S extends boolean | null | undefined | ProductReviewDefaultArgs> = $Result.GetResult<Prisma.$ProductReviewPayload, S>

  type ProductReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductReviewFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ProductReviewCountAggregateInputType | true
    }

  export interface ProductReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductReview'], meta: { name: 'ProductReview' } }
    /**
     * Find zero or one ProductReview that matches the filter.
     * @param {ProductReviewFindUniqueArgs} args - Arguments to find a ProductReview
     * @example
     * // Get one ProductReview
     * const productReview = await prisma.productReview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductReviewFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductReviewFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductReviewClient<$Result.GetResult<Prisma.$ProductReviewPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProductReview that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductReviewFindUniqueOrThrowArgs} args - Arguments to find a ProductReview
     * @example
     * // Get one ProductReview
     * const productReview = await prisma.productReview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductReviewFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductReviewFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductReviewClient<$Result.GetResult<Prisma.$ProductReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProductReview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductReviewFindFirstArgs} args - Arguments to find a ProductReview
     * @example
     * // Get one ProductReview
     * const productReview = await prisma.productReview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductReviewFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductReviewFindFirstArgs<ExtArgs>>
    ): Prisma__ProductReviewClient<$Result.GetResult<Prisma.$ProductReviewPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProductReview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductReviewFindFirstOrThrowArgs} args - Arguments to find a ProductReview
     * @example
     * // Get one ProductReview
     * const productReview = await prisma.productReview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductReviewFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductReviewFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductReviewClient<$Result.GetResult<Prisma.$ProductReviewPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProductReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductReviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductReviews
     * const productReviews = await prisma.productReview.findMany()
     * 
     * // Get first 10 ProductReviews
     * const productReviews = await prisma.productReview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productReviewWithIdOnly = await prisma.productReview.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductReviewFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductReviewFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductReviewPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProductReview.
     * @param {ProductReviewCreateArgs} args - Arguments to create a ProductReview.
     * @example
     * // Create one ProductReview
     * const ProductReview = await prisma.productReview.create({
     *   data: {
     *     // ... data to create a ProductReview
     *   }
     * })
     * 
    **/
    create<T extends ProductReviewCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductReviewCreateArgs<ExtArgs>>
    ): Prisma__ProductReviewClient<$Result.GetResult<Prisma.$ProductReviewPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProductReviews.
     *     @param {ProductReviewCreateManyArgs} args - Arguments to create many ProductReviews.
     *     @example
     *     // Create many ProductReviews
     *     const productReview = await prisma.productReview.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductReviewCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductReviewCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductReview.
     * @param {ProductReviewDeleteArgs} args - Arguments to delete one ProductReview.
     * @example
     * // Delete one ProductReview
     * const ProductReview = await prisma.productReview.delete({
     *   where: {
     *     // ... filter to delete one ProductReview
     *   }
     * })
     * 
    **/
    delete<T extends ProductReviewDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductReviewDeleteArgs<ExtArgs>>
    ): Prisma__ProductReviewClient<$Result.GetResult<Prisma.$ProductReviewPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProductReview.
     * @param {ProductReviewUpdateArgs} args - Arguments to update one ProductReview.
     * @example
     * // Update one ProductReview
     * const productReview = await prisma.productReview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductReviewUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductReviewUpdateArgs<ExtArgs>>
    ): Prisma__ProductReviewClient<$Result.GetResult<Prisma.$ProductReviewPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProductReviews.
     * @param {ProductReviewDeleteManyArgs} args - Arguments to filter ProductReviews to delete.
     * @example
     * // Delete a few ProductReviews
     * const { count } = await prisma.productReview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductReviewDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductReviewDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductReviews
     * const productReview = await prisma.productReview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductReviewUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductReviewUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductReview.
     * @param {ProductReviewUpsertArgs} args - Arguments to update or create a ProductReview.
     * @example
     * // Update or create a ProductReview
     * const productReview = await prisma.productReview.upsert({
     *   create: {
     *     // ... data to create a ProductReview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductReview we want to update
     *   }
     * })
    **/
    upsert<T extends ProductReviewUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductReviewUpsertArgs<ExtArgs>>
    ): Prisma__ProductReviewClient<$Result.GetResult<Prisma.$ProductReviewPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProductReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductReviewCountArgs} args - Arguments to filter ProductReviews to count.
     * @example
     * // Count the number of ProductReviews
     * const count = await prisma.productReview.count({
     *   where: {
     *     // ... the filter for the ProductReviews we want to count
     *   }
     * })
    **/
    count<T extends ProductReviewCountArgs>(
      args?: Subset<T, ProductReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductReviewAggregateArgs>(args: Subset<T, ProductReviewAggregateArgs>): Prisma.PrismaPromise<GetProductReviewAggregateType<T>>

    /**
     * Group by ProductReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductReviewGroupByArgs['orderBy'] }
        : { orderBy?: ProductReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductReview model
   */
  readonly fields: ProductReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductReview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    StripeCheckout<T extends ProductReview$StripeCheckoutArgs<ExtArgs> = {}>(args?: Subset<T, ProductReview$StripeCheckoutArgs<ExtArgs>>): Prisma__StripeCheckoutClient<$Result.GetResult<Prisma.$StripeCheckoutPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProductReview model
   */ 
  interface ProductReviewFieldRefs {
    readonly id: FieldRef<"ProductReview", 'Int'>
    readonly text: FieldRef<"ProductReview", 'String'>
    readonly reviewer: FieldRef<"ProductReview", 'String'>
    readonly rating: FieldRef<"ProductReview", 'Int'>
    readonly createdAt: FieldRef<"ProductReview", 'DateTime'>
    readonly updatedAt: FieldRef<"ProductReview", 'DateTime'>
    readonly productId: FieldRef<"ProductReview", 'Int'>
    readonly checkoutId: FieldRef<"ProductReview", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * ProductReview findUnique
   */
  export type ProductReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReview
     */
    select?: ProductReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductReviewInclude<ExtArgs> | null
    /**
     * Filter, which ProductReview to fetch.
     */
    where: ProductReviewWhereUniqueInput
  }


  /**
   * ProductReview findUniqueOrThrow
   */
  export type ProductReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReview
     */
    select?: ProductReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductReviewInclude<ExtArgs> | null
    /**
     * Filter, which ProductReview to fetch.
     */
    where: ProductReviewWhereUniqueInput
  }


  /**
   * ProductReview findFirst
   */
  export type ProductReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReview
     */
    select?: ProductReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductReviewInclude<ExtArgs> | null
    /**
     * Filter, which ProductReview to fetch.
     */
    where?: ProductReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductReviews to fetch.
     */
    orderBy?: ProductReviewOrderByWithRelationInput | ProductReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductReviews.
     */
    cursor?: ProductReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductReviews.
     */
    distinct?: ProductReviewScalarFieldEnum | ProductReviewScalarFieldEnum[]
  }


  /**
   * ProductReview findFirstOrThrow
   */
  export type ProductReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReview
     */
    select?: ProductReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductReviewInclude<ExtArgs> | null
    /**
     * Filter, which ProductReview to fetch.
     */
    where?: ProductReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductReviews to fetch.
     */
    orderBy?: ProductReviewOrderByWithRelationInput | ProductReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductReviews.
     */
    cursor?: ProductReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductReviews.
     */
    distinct?: ProductReviewScalarFieldEnum | ProductReviewScalarFieldEnum[]
  }


  /**
   * ProductReview findMany
   */
  export type ProductReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReview
     */
    select?: ProductReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductReviewInclude<ExtArgs> | null
    /**
     * Filter, which ProductReviews to fetch.
     */
    where?: ProductReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductReviews to fetch.
     */
    orderBy?: ProductReviewOrderByWithRelationInput | ProductReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductReviews.
     */
    cursor?: ProductReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductReviews.
     */
    skip?: number
    distinct?: ProductReviewScalarFieldEnum | ProductReviewScalarFieldEnum[]
  }


  /**
   * ProductReview create
   */
  export type ProductReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReview
     */
    select?: ProductReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductReview.
     */
    data: XOR<ProductReviewCreateInput, ProductReviewUncheckedCreateInput>
  }


  /**
   * ProductReview createMany
   */
  export type ProductReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductReviews.
     */
    data: ProductReviewCreateManyInput | ProductReviewCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ProductReview update
   */
  export type ProductReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReview
     */
    select?: ProductReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductReview.
     */
    data: XOR<ProductReviewUpdateInput, ProductReviewUncheckedUpdateInput>
    /**
     * Choose, which ProductReview to update.
     */
    where: ProductReviewWhereUniqueInput
  }


  /**
   * ProductReview updateMany
   */
  export type ProductReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductReviews.
     */
    data: XOR<ProductReviewUpdateManyMutationInput, ProductReviewUncheckedUpdateManyInput>
    /**
     * Filter which ProductReviews to update
     */
    where?: ProductReviewWhereInput
  }


  /**
   * ProductReview upsert
   */
  export type ProductReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReview
     */
    select?: ProductReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductReview to update in case it exists.
     */
    where: ProductReviewWhereUniqueInput
    /**
     * In case the ProductReview found by the `where` argument doesn't exist, create a new ProductReview with this data.
     */
    create: XOR<ProductReviewCreateInput, ProductReviewUncheckedCreateInput>
    /**
     * In case the ProductReview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductReviewUpdateInput, ProductReviewUncheckedUpdateInput>
  }


  /**
   * ProductReview delete
   */
  export type ProductReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReview
     */
    select?: ProductReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductReviewInclude<ExtArgs> | null
    /**
     * Filter which ProductReview to delete.
     */
    where: ProductReviewWhereUniqueInput
  }


  /**
   * ProductReview deleteMany
   */
  export type ProductReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductReviews to delete
     */
    where?: ProductReviewWhereInput
  }


  /**
   * ProductReview.StripeCheckout
   */
  export type ProductReview$StripeCheckoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCheckout
     */
    select?: StripeCheckoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCheckoutInclude<ExtArgs> | null
    where?: StripeCheckoutWhereInput
  }


  /**
   * ProductReview without action
   */
  export type ProductReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReview
     */
    select?: ProductReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductReviewInclude<ExtArgs> | null
  }



  /**
   * Model OneTimePassword
   */

  export type AggregateOneTimePassword = {
    _count: OneTimePasswordCountAggregateOutputType | null
    _avg: OneTimePasswordAvgAggregateOutputType | null
    _sum: OneTimePasswordSumAggregateOutputType | null
    _min: OneTimePasswordMinAggregateOutputType | null
    _max: OneTimePasswordMaxAggregateOutputType | null
  }

  export type OneTimePasswordAvgAggregateOutputType = {
    id: number | null
  }

  export type OneTimePasswordSumAggregateOutputType = {
    id: number | null
  }

  export type OneTimePasswordMinAggregateOutputType = {
    id: number | null
    usage: $Enums.OneTimeNumberUsage | null
    oneTimePassword: string | null
    validated: boolean | null
    updatedAt: Date | null
    userId: string | null
    adminUserId: string | null
  }

  export type OneTimePasswordMaxAggregateOutputType = {
    id: number | null
    usage: $Enums.OneTimeNumberUsage | null
    oneTimePassword: string | null
    validated: boolean | null
    updatedAt: Date | null
    userId: string | null
    adminUserId: string | null
  }

  export type OneTimePasswordCountAggregateOutputType = {
    id: number
    usage: number
    oneTimePassword: number
    validated: number
    updatedAt: number
    userId: number
    adminUserId: number
    _all: number
  }


  export type OneTimePasswordAvgAggregateInputType = {
    id?: true
  }

  export type OneTimePasswordSumAggregateInputType = {
    id?: true
  }

  export type OneTimePasswordMinAggregateInputType = {
    id?: true
    usage?: true
    oneTimePassword?: true
    validated?: true
    updatedAt?: true
    userId?: true
    adminUserId?: true
  }

  export type OneTimePasswordMaxAggregateInputType = {
    id?: true
    usage?: true
    oneTimePassword?: true
    validated?: true
    updatedAt?: true
    userId?: true
    adminUserId?: true
  }

  export type OneTimePasswordCountAggregateInputType = {
    id?: true
    usage?: true
    oneTimePassword?: true
    validated?: true
    updatedAt?: true
    userId?: true
    adminUserId?: true
    _all?: true
  }

  export type OneTimePasswordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OneTimePassword to aggregate.
     */
    where?: OneTimePasswordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OneTimePasswords to fetch.
     */
    orderBy?: OneTimePasswordOrderByWithRelationInput | OneTimePasswordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OneTimePasswordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OneTimePasswords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OneTimePasswords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OneTimePasswords
    **/
    _count?: true | OneTimePasswordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OneTimePasswordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OneTimePasswordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OneTimePasswordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OneTimePasswordMaxAggregateInputType
  }

  export type GetOneTimePasswordAggregateType<T extends OneTimePasswordAggregateArgs> = {
        [P in keyof T & keyof AggregateOneTimePassword]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOneTimePassword[P]>
      : GetScalarType<T[P], AggregateOneTimePassword[P]>
  }




  export type OneTimePasswordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OneTimePasswordWhereInput
    orderBy?: OneTimePasswordOrderByWithAggregationInput | OneTimePasswordOrderByWithAggregationInput[]
    by: OneTimePasswordScalarFieldEnum[] | OneTimePasswordScalarFieldEnum
    having?: OneTimePasswordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OneTimePasswordCountAggregateInputType | true
    _avg?: OneTimePasswordAvgAggregateInputType
    _sum?: OneTimePasswordSumAggregateInputType
    _min?: OneTimePasswordMinAggregateInputType
    _max?: OneTimePasswordMaxAggregateInputType
  }

  export type OneTimePasswordGroupByOutputType = {
    id: number
    usage: $Enums.OneTimeNumberUsage
    oneTimePassword: string
    validated: boolean
    updatedAt: Date
    userId: string | null
    adminUserId: string | null
    _count: OneTimePasswordCountAggregateOutputType | null
    _avg: OneTimePasswordAvgAggregateOutputType | null
    _sum: OneTimePasswordSumAggregateOutputType | null
    _min: OneTimePasswordMinAggregateOutputType | null
    _max: OneTimePasswordMaxAggregateOutputType | null
  }

  type GetOneTimePasswordGroupByPayload<T extends OneTimePasswordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OneTimePasswordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OneTimePasswordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OneTimePasswordGroupByOutputType[P]>
            : GetScalarType<T[P], OneTimePasswordGroupByOutputType[P]>
        }
      >
    >


  export type OneTimePasswordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usage?: boolean
    oneTimePassword?: boolean
    validated?: boolean
    updatedAt?: boolean
    userId?: boolean
    adminUserId?: boolean
    User?: boolean | OneTimePassword$UserArgs<ExtArgs>
    AdminUser?: boolean | OneTimePassword$AdminUserArgs<ExtArgs>
  }, ExtArgs["result"]["oneTimePassword"]>

  export type OneTimePasswordSelectScalar = {
    id?: boolean
    usage?: boolean
    oneTimePassword?: boolean
    validated?: boolean
    updatedAt?: boolean
    userId?: boolean
    adminUserId?: boolean
  }

  export type OneTimePasswordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | OneTimePassword$UserArgs<ExtArgs>
    AdminUser?: boolean | OneTimePassword$AdminUserArgs<ExtArgs>
  }


  export type $OneTimePasswordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OneTimePassword"
    objects: {
      User: Prisma.$UserPayload<ExtArgs> | null
      AdminUser: Prisma.$AdminUserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usage: $Enums.OneTimeNumberUsage
      oneTimePassword: string
      validated: boolean
      updatedAt: Date
      userId: string | null
      adminUserId: string | null
    }, ExtArgs["result"]["oneTimePassword"]>
    composites: {}
  }


  type OneTimePasswordGetPayload<S extends boolean | null | undefined | OneTimePasswordDefaultArgs> = $Result.GetResult<Prisma.$OneTimePasswordPayload, S>

  type OneTimePasswordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OneTimePasswordFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: OneTimePasswordCountAggregateInputType | true
    }

  export interface OneTimePasswordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OneTimePassword'], meta: { name: 'OneTimePassword' } }
    /**
     * Find zero or one OneTimePassword that matches the filter.
     * @param {OneTimePasswordFindUniqueArgs} args - Arguments to find a OneTimePassword
     * @example
     * // Get one OneTimePassword
     * const oneTimePassword = await prisma.oneTimePassword.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OneTimePasswordFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OneTimePasswordFindUniqueArgs<ExtArgs>>
    ): Prisma__OneTimePasswordClient<$Result.GetResult<Prisma.$OneTimePasswordPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one OneTimePassword that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OneTimePasswordFindUniqueOrThrowArgs} args - Arguments to find a OneTimePassword
     * @example
     * // Get one OneTimePassword
     * const oneTimePassword = await prisma.oneTimePassword.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OneTimePasswordFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OneTimePasswordFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OneTimePasswordClient<$Result.GetResult<Prisma.$OneTimePasswordPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first OneTimePassword that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneTimePasswordFindFirstArgs} args - Arguments to find a OneTimePassword
     * @example
     * // Get one OneTimePassword
     * const oneTimePassword = await prisma.oneTimePassword.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OneTimePasswordFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OneTimePasswordFindFirstArgs<ExtArgs>>
    ): Prisma__OneTimePasswordClient<$Result.GetResult<Prisma.$OneTimePasswordPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first OneTimePassword that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneTimePasswordFindFirstOrThrowArgs} args - Arguments to find a OneTimePassword
     * @example
     * // Get one OneTimePassword
     * const oneTimePassword = await prisma.oneTimePassword.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OneTimePasswordFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OneTimePasswordFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OneTimePasswordClient<$Result.GetResult<Prisma.$OneTimePasswordPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more OneTimePasswords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneTimePasswordFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OneTimePasswords
     * const oneTimePasswords = await prisma.oneTimePassword.findMany()
     * 
     * // Get first 10 OneTimePasswords
     * const oneTimePasswords = await prisma.oneTimePassword.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const oneTimePasswordWithIdOnly = await prisma.oneTimePassword.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OneTimePasswordFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OneTimePasswordFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OneTimePasswordPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a OneTimePassword.
     * @param {OneTimePasswordCreateArgs} args - Arguments to create a OneTimePassword.
     * @example
     * // Create one OneTimePassword
     * const OneTimePassword = await prisma.oneTimePassword.create({
     *   data: {
     *     // ... data to create a OneTimePassword
     *   }
     * })
     * 
    **/
    create<T extends OneTimePasswordCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OneTimePasswordCreateArgs<ExtArgs>>
    ): Prisma__OneTimePasswordClient<$Result.GetResult<Prisma.$OneTimePasswordPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many OneTimePasswords.
     *     @param {OneTimePasswordCreateManyArgs} args - Arguments to create many OneTimePasswords.
     *     @example
     *     // Create many OneTimePasswords
     *     const oneTimePassword = await prisma.oneTimePassword.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OneTimePasswordCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OneTimePasswordCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OneTimePassword.
     * @param {OneTimePasswordDeleteArgs} args - Arguments to delete one OneTimePassword.
     * @example
     * // Delete one OneTimePassword
     * const OneTimePassword = await prisma.oneTimePassword.delete({
     *   where: {
     *     // ... filter to delete one OneTimePassword
     *   }
     * })
     * 
    **/
    delete<T extends OneTimePasswordDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OneTimePasswordDeleteArgs<ExtArgs>>
    ): Prisma__OneTimePasswordClient<$Result.GetResult<Prisma.$OneTimePasswordPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one OneTimePassword.
     * @param {OneTimePasswordUpdateArgs} args - Arguments to update one OneTimePassword.
     * @example
     * // Update one OneTimePassword
     * const oneTimePassword = await prisma.oneTimePassword.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OneTimePasswordUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OneTimePasswordUpdateArgs<ExtArgs>>
    ): Prisma__OneTimePasswordClient<$Result.GetResult<Prisma.$OneTimePasswordPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more OneTimePasswords.
     * @param {OneTimePasswordDeleteManyArgs} args - Arguments to filter OneTimePasswords to delete.
     * @example
     * // Delete a few OneTimePasswords
     * const { count } = await prisma.oneTimePassword.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OneTimePasswordDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OneTimePasswordDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OneTimePasswords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneTimePasswordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OneTimePasswords
     * const oneTimePassword = await prisma.oneTimePassword.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OneTimePasswordUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OneTimePasswordUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OneTimePassword.
     * @param {OneTimePasswordUpsertArgs} args - Arguments to update or create a OneTimePassword.
     * @example
     * // Update or create a OneTimePassword
     * const oneTimePassword = await prisma.oneTimePassword.upsert({
     *   create: {
     *     // ... data to create a OneTimePassword
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OneTimePassword we want to update
     *   }
     * })
    **/
    upsert<T extends OneTimePasswordUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OneTimePasswordUpsertArgs<ExtArgs>>
    ): Prisma__OneTimePasswordClient<$Result.GetResult<Prisma.$OneTimePasswordPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of OneTimePasswords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneTimePasswordCountArgs} args - Arguments to filter OneTimePasswords to count.
     * @example
     * // Count the number of OneTimePasswords
     * const count = await prisma.oneTimePassword.count({
     *   where: {
     *     // ... the filter for the OneTimePasswords we want to count
     *   }
     * })
    **/
    count<T extends OneTimePasswordCountArgs>(
      args?: Subset<T, OneTimePasswordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OneTimePasswordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OneTimePassword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneTimePasswordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OneTimePasswordAggregateArgs>(args: Subset<T, OneTimePasswordAggregateArgs>): Prisma.PrismaPromise<GetOneTimePasswordAggregateType<T>>

    /**
     * Group by OneTimePassword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneTimePasswordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OneTimePasswordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OneTimePasswordGroupByArgs['orderBy'] }
        : { orderBy?: OneTimePasswordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OneTimePasswordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOneTimePasswordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OneTimePassword model
   */
  readonly fields: OneTimePasswordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OneTimePassword.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OneTimePasswordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends OneTimePassword$UserArgs<ExtArgs> = {}>(args?: Subset<T, OneTimePassword$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    AdminUser<T extends OneTimePassword$AdminUserArgs<ExtArgs> = {}>(args?: Subset<T, OneTimePassword$AdminUserArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the OneTimePassword model
   */ 
  interface OneTimePasswordFieldRefs {
    readonly id: FieldRef<"OneTimePassword", 'Int'>
    readonly usage: FieldRef<"OneTimePassword", 'OneTimeNumberUsage'>
    readonly oneTimePassword: FieldRef<"OneTimePassword", 'String'>
    readonly validated: FieldRef<"OneTimePassword", 'Boolean'>
    readonly updatedAt: FieldRef<"OneTimePassword", 'DateTime'>
    readonly userId: FieldRef<"OneTimePassword", 'String'>
    readonly adminUserId: FieldRef<"OneTimePassword", 'String'>
  }
    

  // Custom InputTypes

  /**
   * OneTimePassword findUnique
   */
  export type OneTimePasswordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OneTimePassword
     */
    select?: OneTimePasswordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneTimePasswordInclude<ExtArgs> | null
    /**
     * Filter, which OneTimePassword to fetch.
     */
    where: OneTimePasswordWhereUniqueInput
  }


  /**
   * OneTimePassword findUniqueOrThrow
   */
  export type OneTimePasswordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OneTimePassword
     */
    select?: OneTimePasswordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneTimePasswordInclude<ExtArgs> | null
    /**
     * Filter, which OneTimePassword to fetch.
     */
    where: OneTimePasswordWhereUniqueInput
  }


  /**
   * OneTimePassword findFirst
   */
  export type OneTimePasswordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OneTimePassword
     */
    select?: OneTimePasswordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneTimePasswordInclude<ExtArgs> | null
    /**
     * Filter, which OneTimePassword to fetch.
     */
    where?: OneTimePasswordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OneTimePasswords to fetch.
     */
    orderBy?: OneTimePasswordOrderByWithRelationInput | OneTimePasswordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OneTimePasswords.
     */
    cursor?: OneTimePasswordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OneTimePasswords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OneTimePasswords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OneTimePasswords.
     */
    distinct?: OneTimePasswordScalarFieldEnum | OneTimePasswordScalarFieldEnum[]
  }


  /**
   * OneTimePassword findFirstOrThrow
   */
  export type OneTimePasswordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OneTimePassword
     */
    select?: OneTimePasswordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneTimePasswordInclude<ExtArgs> | null
    /**
     * Filter, which OneTimePassword to fetch.
     */
    where?: OneTimePasswordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OneTimePasswords to fetch.
     */
    orderBy?: OneTimePasswordOrderByWithRelationInput | OneTimePasswordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OneTimePasswords.
     */
    cursor?: OneTimePasswordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OneTimePasswords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OneTimePasswords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OneTimePasswords.
     */
    distinct?: OneTimePasswordScalarFieldEnum | OneTimePasswordScalarFieldEnum[]
  }


  /**
   * OneTimePassword findMany
   */
  export type OneTimePasswordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OneTimePassword
     */
    select?: OneTimePasswordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneTimePasswordInclude<ExtArgs> | null
    /**
     * Filter, which OneTimePasswords to fetch.
     */
    where?: OneTimePasswordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OneTimePasswords to fetch.
     */
    orderBy?: OneTimePasswordOrderByWithRelationInput | OneTimePasswordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OneTimePasswords.
     */
    cursor?: OneTimePasswordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OneTimePasswords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OneTimePasswords.
     */
    skip?: number
    distinct?: OneTimePasswordScalarFieldEnum | OneTimePasswordScalarFieldEnum[]
  }


  /**
   * OneTimePassword create
   */
  export type OneTimePasswordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OneTimePassword
     */
    select?: OneTimePasswordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneTimePasswordInclude<ExtArgs> | null
    /**
     * The data needed to create a OneTimePassword.
     */
    data: XOR<OneTimePasswordCreateInput, OneTimePasswordUncheckedCreateInput>
  }


  /**
   * OneTimePassword createMany
   */
  export type OneTimePasswordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OneTimePasswords.
     */
    data: OneTimePasswordCreateManyInput | OneTimePasswordCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * OneTimePassword update
   */
  export type OneTimePasswordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OneTimePassword
     */
    select?: OneTimePasswordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneTimePasswordInclude<ExtArgs> | null
    /**
     * The data needed to update a OneTimePassword.
     */
    data: XOR<OneTimePasswordUpdateInput, OneTimePasswordUncheckedUpdateInput>
    /**
     * Choose, which OneTimePassword to update.
     */
    where: OneTimePasswordWhereUniqueInput
  }


  /**
   * OneTimePassword updateMany
   */
  export type OneTimePasswordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OneTimePasswords.
     */
    data: XOR<OneTimePasswordUpdateManyMutationInput, OneTimePasswordUncheckedUpdateManyInput>
    /**
     * Filter which OneTimePasswords to update
     */
    where?: OneTimePasswordWhereInput
  }


  /**
   * OneTimePassword upsert
   */
  export type OneTimePasswordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OneTimePassword
     */
    select?: OneTimePasswordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneTimePasswordInclude<ExtArgs> | null
    /**
     * The filter to search for the OneTimePassword to update in case it exists.
     */
    where: OneTimePasswordWhereUniqueInput
    /**
     * In case the OneTimePassword found by the `where` argument doesn't exist, create a new OneTimePassword with this data.
     */
    create: XOR<OneTimePasswordCreateInput, OneTimePasswordUncheckedCreateInput>
    /**
     * In case the OneTimePassword was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OneTimePasswordUpdateInput, OneTimePasswordUncheckedUpdateInput>
  }


  /**
   * OneTimePassword delete
   */
  export type OneTimePasswordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OneTimePassword
     */
    select?: OneTimePasswordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneTimePasswordInclude<ExtArgs> | null
    /**
     * Filter which OneTimePassword to delete.
     */
    where: OneTimePasswordWhereUniqueInput
  }


  /**
   * OneTimePassword deleteMany
   */
  export type OneTimePasswordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OneTimePasswords to delete
     */
    where?: OneTimePasswordWhereInput
  }


  /**
   * OneTimePassword.User
   */
  export type OneTimePassword$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * OneTimePassword.AdminUser
   */
  export type OneTimePassword$AdminUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminUserInclude<ExtArgs> | null
    where?: AdminUserWhereInput
  }


  /**
   * OneTimePassword without action
   */
  export type OneTimePasswordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OneTimePassword
     */
    select?: OneTimePasswordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneTimePasswordInclude<ExtArgs> | null
  }



  /**
   * Model StripeCheckout
   */

  export type AggregateStripeCheckout = {
    _count: StripeCheckoutCountAggregateOutputType | null
    _avg: StripeCheckoutAvgAggregateOutputType | null
    _sum: StripeCheckoutSumAggregateOutputType | null
    _min: StripeCheckoutMinAggregateOutputType | null
    _max: StripeCheckoutMaxAggregateOutputType | null
  }

  export type StripeCheckoutAvgAggregateOutputType = {
    id: number | null
    productId: number | null
  }

  export type StripeCheckoutSumAggregateOutputType = {
    id: number | null
    productId: number | null
  }

  export type StripeCheckoutMinAggregateOutputType = {
    id: number | null
    customerId: string | null
    productId: number | null
    paymentId: string | null
    name: string | null
    email: string | null
    postCode: string | null
    address: string | null
    serialNumber: string | null
    status: $Enums.checkoutStatus | null
    manager: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StripeCheckoutMaxAggregateOutputType = {
    id: number | null
    customerId: string | null
    productId: number | null
    paymentId: string | null
    name: string | null
    email: string | null
    postCode: string | null
    address: string | null
    serialNumber: string | null
    status: $Enums.checkoutStatus | null
    manager: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StripeCheckoutCountAggregateOutputType = {
    id: number
    customerId: number
    productId: number
    paymentId: number
    name: number
    email: number
    postCode: number
    address: number
    serialNumber: number
    status: number
    manager: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StripeCheckoutAvgAggregateInputType = {
    id?: true
    productId?: true
  }

  export type StripeCheckoutSumAggregateInputType = {
    id?: true
    productId?: true
  }

  export type StripeCheckoutMinAggregateInputType = {
    id?: true
    customerId?: true
    productId?: true
    paymentId?: true
    name?: true
    email?: true
    postCode?: true
    address?: true
    serialNumber?: true
    status?: true
    manager?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StripeCheckoutMaxAggregateInputType = {
    id?: true
    customerId?: true
    productId?: true
    paymentId?: true
    name?: true
    email?: true
    postCode?: true
    address?: true
    serialNumber?: true
    status?: true
    manager?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StripeCheckoutCountAggregateInputType = {
    id?: true
    customerId?: true
    productId?: true
    paymentId?: true
    name?: true
    email?: true
    postCode?: true
    address?: true
    serialNumber?: true
    status?: true
    manager?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StripeCheckoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StripeCheckout to aggregate.
     */
    where?: StripeCheckoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StripeCheckouts to fetch.
     */
    orderBy?: StripeCheckoutOrderByWithRelationInput | StripeCheckoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StripeCheckoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StripeCheckouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StripeCheckouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StripeCheckouts
    **/
    _count?: true | StripeCheckoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StripeCheckoutAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StripeCheckoutSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StripeCheckoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StripeCheckoutMaxAggregateInputType
  }

  export type GetStripeCheckoutAggregateType<T extends StripeCheckoutAggregateArgs> = {
        [P in keyof T & keyof AggregateStripeCheckout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStripeCheckout[P]>
      : GetScalarType<T[P], AggregateStripeCheckout[P]>
  }




  export type StripeCheckoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StripeCheckoutWhereInput
    orderBy?: StripeCheckoutOrderByWithAggregationInput | StripeCheckoutOrderByWithAggregationInput[]
    by: StripeCheckoutScalarFieldEnum[] | StripeCheckoutScalarFieldEnum
    having?: StripeCheckoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StripeCheckoutCountAggregateInputType | true
    _avg?: StripeCheckoutAvgAggregateInputType
    _sum?: StripeCheckoutSumAggregateInputType
    _min?: StripeCheckoutMinAggregateInputType
    _max?: StripeCheckoutMaxAggregateInputType
  }

  export type StripeCheckoutGroupByOutputType = {
    id: number
    customerId: string | null
    productId: number
    paymentId: string
    name: string
    email: string
    postCode: string
    address: string
    serialNumber: string
    status: $Enums.checkoutStatus
    manager: string | null
    createdAt: Date
    updatedAt: Date
    _count: StripeCheckoutCountAggregateOutputType | null
    _avg: StripeCheckoutAvgAggregateOutputType | null
    _sum: StripeCheckoutSumAggregateOutputType | null
    _min: StripeCheckoutMinAggregateOutputType | null
    _max: StripeCheckoutMaxAggregateOutputType | null
  }

  type GetStripeCheckoutGroupByPayload<T extends StripeCheckoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StripeCheckoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StripeCheckoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StripeCheckoutGroupByOutputType[P]>
            : GetScalarType<T[P], StripeCheckoutGroupByOutputType[P]>
        }
      >
    >


  export type StripeCheckoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    productId?: boolean
    paymentId?: boolean
    name?: boolean
    email?: boolean
    postCode?: boolean
    address?: boolean
    serialNumber?: boolean
    status?: boolean
    manager?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    StripeCustomer?: boolean | StripeCheckout$StripeCustomerArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    ProductReview?: boolean | StripeCheckout$ProductReviewArgs<ExtArgs>
    _count?: boolean | StripeCheckoutCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stripeCheckout"]>

  export type StripeCheckoutSelectScalar = {
    id?: boolean
    customerId?: boolean
    productId?: boolean
    paymentId?: boolean
    name?: boolean
    email?: boolean
    postCode?: boolean
    address?: boolean
    serialNumber?: boolean
    status?: boolean
    manager?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StripeCheckoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    StripeCustomer?: boolean | StripeCheckout$StripeCustomerArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    ProductReview?: boolean | StripeCheckout$ProductReviewArgs<ExtArgs>
    _count?: boolean | StripeCheckoutCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StripeCheckoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StripeCheckout"
    objects: {
      StripeCustomer: Prisma.$StripeCustomerPayload<ExtArgs> | null
      Product: Prisma.$ProductPayload<ExtArgs>
      ProductReview: Prisma.$ProductReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      customerId: string | null
      productId: number
      paymentId: string
      name: string
      email: string
      postCode: string
      address: string
      serialNumber: string
      status: $Enums.checkoutStatus
      manager: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["stripeCheckout"]>
    composites: {}
  }


  type StripeCheckoutGetPayload<S extends boolean | null | undefined | StripeCheckoutDefaultArgs> = $Result.GetResult<Prisma.$StripeCheckoutPayload, S>

  type StripeCheckoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StripeCheckoutFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: StripeCheckoutCountAggregateInputType | true
    }

  export interface StripeCheckoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StripeCheckout'], meta: { name: 'StripeCheckout' } }
    /**
     * Find zero or one StripeCheckout that matches the filter.
     * @param {StripeCheckoutFindUniqueArgs} args - Arguments to find a StripeCheckout
     * @example
     * // Get one StripeCheckout
     * const stripeCheckout = await prisma.stripeCheckout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StripeCheckoutFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StripeCheckoutFindUniqueArgs<ExtArgs>>
    ): Prisma__StripeCheckoutClient<$Result.GetResult<Prisma.$StripeCheckoutPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StripeCheckout that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StripeCheckoutFindUniqueOrThrowArgs} args - Arguments to find a StripeCheckout
     * @example
     * // Get one StripeCheckout
     * const stripeCheckout = await prisma.stripeCheckout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StripeCheckoutFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeCheckoutFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StripeCheckoutClient<$Result.GetResult<Prisma.$StripeCheckoutPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StripeCheckout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeCheckoutFindFirstArgs} args - Arguments to find a StripeCheckout
     * @example
     * // Get one StripeCheckout
     * const stripeCheckout = await prisma.stripeCheckout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StripeCheckoutFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeCheckoutFindFirstArgs<ExtArgs>>
    ): Prisma__StripeCheckoutClient<$Result.GetResult<Prisma.$StripeCheckoutPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StripeCheckout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeCheckoutFindFirstOrThrowArgs} args - Arguments to find a StripeCheckout
     * @example
     * // Get one StripeCheckout
     * const stripeCheckout = await prisma.stripeCheckout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StripeCheckoutFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeCheckoutFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StripeCheckoutClient<$Result.GetResult<Prisma.$StripeCheckoutPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StripeCheckouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeCheckoutFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StripeCheckouts
     * const stripeCheckouts = await prisma.stripeCheckout.findMany()
     * 
     * // Get first 10 StripeCheckouts
     * const stripeCheckouts = await prisma.stripeCheckout.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stripeCheckoutWithIdOnly = await prisma.stripeCheckout.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StripeCheckoutFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeCheckoutFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StripeCheckoutPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StripeCheckout.
     * @param {StripeCheckoutCreateArgs} args - Arguments to create a StripeCheckout.
     * @example
     * // Create one StripeCheckout
     * const StripeCheckout = await prisma.stripeCheckout.create({
     *   data: {
     *     // ... data to create a StripeCheckout
     *   }
     * })
     * 
    **/
    create<T extends StripeCheckoutCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StripeCheckoutCreateArgs<ExtArgs>>
    ): Prisma__StripeCheckoutClient<$Result.GetResult<Prisma.$StripeCheckoutPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StripeCheckouts.
     *     @param {StripeCheckoutCreateManyArgs} args - Arguments to create many StripeCheckouts.
     *     @example
     *     // Create many StripeCheckouts
     *     const stripeCheckout = await prisma.stripeCheckout.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StripeCheckoutCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeCheckoutCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StripeCheckout.
     * @param {StripeCheckoutDeleteArgs} args - Arguments to delete one StripeCheckout.
     * @example
     * // Delete one StripeCheckout
     * const StripeCheckout = await prisma.stripeCheckout.delete({
     *   where: {
     *     // ... filter to delete one StripeCheckout
     *   }
     * })
     * 
    **/
    delete<T extends StripeCheckoutDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StripeCheckoutDeleteArgs<ExtArgs>>
    ): Prisma__StripeCheckoutClient<$Result.GetResult<Prisma.$StripeCheckoutPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StripeCheckout.
     * @param {StripeCheckoutUpdateArgs} args - Arguments to update one StripeCheckout.
     * @example
     * // Update one StripeCheckout
     * const stripeCheckout = await prisma.stripeCheckout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StripeCheckoutUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StripeCheckoutUpdateArgs<ExtArgs>>
    ): Prisma__StripeCheckoutClient<$Result.GetResult<Prisma.$StripeCheckoutPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StripeCheckouts.
     * @param {StripeCheckoutDeleteManyArgs} args - Arguments to filter StripeCheckouts to delete.
     * @example
     * // Delete a few StripeCheckouts
     * const { count } = await prisma.stripeCheckout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StripeCheckoutDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeCheckoutDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StripeCheckouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeCheckoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StripeCheckouts
     * const stripeCheckout = await prisma.stripeCheckout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StripeCheckoutUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StripeCheckoutUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StripeCheckout.
     * @param {StripeCheckoutUpsertArgs} args - Arguments to update or create a StripeCheckout.
     * @example
     * // Update or create a StripeCheckout
     * const stripeCheckout = await prisma.stripeCheckout.upsert({
     *   create: {
     *     // ... data to create a StripeCheckout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StripeCheckout we want to update
     *   }
     * })
    **/
    upsert<T extends StripeCheckoutUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StripeCheckoutUpsertArgs<ExtArgs>>
    ): Prisma__StripeCheckoutClient<$Result.GetResult<Prisma.$StripeCheckoutPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StripeCheckouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeCheckoutCountArgs} args - Arguments to filter StripeCheckouts to count.
     * @example
     * // Count the number of StripeCheckouts
     * const count = await prisma.stripeCheckout.count({
     *   where: {
     *     // ... the filter for the StripeCheckouts we want to count
     *   }
     * })
    **/
    count<T extends StripeCheckoutCountArgs>(
      args?: Subset<T, StripeCheckoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StripeCheckoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StripeCheckout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeCheckoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StripeCheckoutAggregateArgs>(args: Subset<T, StripeCheckoutAggregateArgs>): Prisma.PrismaPromise<GetStripeCheckoutAggregateType<T>>

    /**
     * Group by StripeCheckout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeCheckoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StripeCheckoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StripeCheckoutGroupByArgs['orderBy'] }
        : { orderBy?: StripeCheckoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StripeCheckoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStripeCheckoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StripeCheckout model
   */
  readonly fields: StripeCheckoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StripeCheckout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StripeCheckoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    StripeCustomer<T extends StripeCheckout$StripeCustomerArgs<ExtArgs> = {}>(args?: Subset<T, StripeCheckout$StripeCustomerArgs<ExtArgs>>): Prisma__StripeCustomerClient<$Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    ProductReview<T extends StripeCheckout$ProductReviewArgs<ExtArgs> = {}>(args?: Subset<T, StripeCheckout$ProductReviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductReviewPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StripeCheckout model
   */ 
  interface StripeCheckoutFieldRefs {
    readonly id: FieldRef<"StripeCheckout", 'Int'>
    readonly customerId: FieldRef<"StripeCheckout", 'String'>
    readonly productId: FieldRef<"StripeCheckout", 'Int'>
    readonly paymentId: FieldRef<"StripeCheckout", 'String'>
    readonly name: FieldRef<"StripeCheckout", 'String'>
    readonly email: FieldRef<"StripeCheckout", 'String'>
    readonly postCode: FieldRef<"StripeCheckout", 'String'>
    readonly address: FieldRef<"StripeCheckout", 'String'>
    readonly serialNumber: FieldRef<"StripeCheckout", 'String'>
    readonly status: FieldRef<"StripeCheckout", 'checkoutStatus'>
    readonly manager: FieldRef<"StripeCheckout", 'String'>
    readonly createdAt: FieldRef<"StripeCheckout", 'DateTime'>
    readonly updatedAt: FieldRef<"StripeCheckout", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * StripeCheckout findUnique
   */
  export type StripeCheckoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCheckout
     */
    select?: StripeCheckoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCheckoutInclude<ExtArgs> | null
    /**
     * Filter, which StripeCheckout to fetch.
     */
    where: StripeCheckoutWhereUniqueInput
  }


  /**
   * StripeCheckout findUniqueOrThrow
   */
  export type StripeCheckoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCheckout
     */
    select?: StripeCheckoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCheckoutInclude<ExtArgs> | null
    /**
     * Filter, which StripeCheckout to fetch.
     */
    where: StripeCheckoutWhereUniqueInput
  }


  /**
   * StripeCheckout findFirst
   */
  export type StripeCheckoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCheckout
     */
    select?: StripeCheckoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCheckoutInclude<ExtArgs> | null
    /**
     * Filter, which StripeCheckout to fetch.
     */
    where?: StripeCheckoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StripeCheckouts to fetch.
     */
    orderBy?: StripeCheckoutOrderByWithRelationInput | StripeCheckoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StripeCheckouts.
     */
    cursor?: StripeCheckoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StripeCheckouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StripeCheckouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StripeCheckouts.
     */
    distinct?: StripeCheckoutScalarFieldEnum | StripeCheckoutScalarFieldEnum[]
  }


  /**
   * StripeCheckout findFirstOrThrow
   */
  export type StripeCheckoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCheckout
     */
    select?: StripeCheckoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCheckoutInclude<ExtArgs> | null
    /**
     * Filter, which StripeCheckout to fetch.
     */
    where?: StripeCheckoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StripeCheckouts to fetch.
     */
    orderBy?: StripeCheckoutOrderByWithRelationInput | StripeCheckoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StripeCheckouts.
     */
    cursor?: StripeCheckoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StripeCheckouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StripeCheckouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StripeCheckouts.
     */
    distinct?: StripeCheckoutScalarFieldEnum | StripeCheckoutScalarFieldEnum[]
  }


  /**
   * StripeCheckout findMany
   */
  export type StripeCheckoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCheckout
     */
    select?: StripeCheckoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCheckoutInclude<ExtArgs> | null
    /**
     * Filter, which StripeCheckouts to fetch.
     */
    where?: StripeCheckoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StripeCheckouts to fetch.
     */
    orderBy?: StripeCheckoutOrderByWithRelationInput | StripeCheckoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StripeCheckouts.
     */
    cursor?: StripeCheckoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StripeCheckouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StripeCheckouts.
     */
    skip?: number
    distinct?: StripeCheckoutScalarFieldEnum | StripeCheckoutScalarFieldEnum[]
  }


  /**
   * StripeCheckout create
   */
  export type StripeCheckoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCheckout
     */
    select?: StripeCheckoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCheckoutInclude<ExtArgs> | null
    /**
     * The data needed to create a StripeCheckout.
     */
    data: XOR<StripeCheckoutCreateInput, StripeCheckoutUncheckedCreateInput>
  }


  /**
   * StripeCheckout createMany
   */
  export type StripeCheckoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StripeCheckouts.
     */
    data: StripeCheckoutCreateManyInput | StripeCheckoutCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * StripeCheckout update
   */
  export type StripeCheckoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCheckout
     */
    select?: StripeCheckoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCheckoutInclude<ExtArgs> | null
    /**
     * The data needed to update a StripeCheckout.
     */
    data: XOR<StripeCheckoutUpdateInput, StripeCheckoutUncheckedUpdateInput>
    /**
     * Choose, which StripeCheckout to update.
     */
    where: StripeCheckoutWhereUniqueInput
  }


  /**
   * StripeCheckout updateMany
   */
  export type StripeCheckoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StripeCheckouts.
     */
    data: XOR<StripeCheckoutUpdateManyMutationInput, StripeCheckoutUncheckedUpdateManyInput>
    /**
     * Filter which StripeCheckouts to update
     */
    where?: StripeCheckoutWhereInput
  }


  /**
   * StripeCheckout upsert
   */
  export type StripeCheckoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCheckout
     */
    select?: StripeCheckoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCheckoutInclude<ExtArgs> | null
    /**
     * The filter to search for the StripeCheckout to update in case it exists.
     */
    where: StripeCheckoutWhereUniqueInput
    /**
     * In case the StripeCheckout found by the `where` argument doesn't exist, create a new StripeCheckout with this data.
     */
    create: XOR<StripeCheckoutCreateInput, StripeCheckoutUncheckedCreateInput>
    /**
     * In case the StripeCheckout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StripeCheckoutUpdateInput, StripeCheckoutUncheckedUpdateInput>
  }


  /**
   * StripeCheckout delete
   */
  export type StripeCheckoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCheckout
     */
    select?: StripeCheckoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCheckoutInclude<ExtArgs> | null
    /**
     * Filter which StripeCheckout to delete.
     */
    where: StripeCheckoutWhereUniqueInput
  }


  /**
   * StripeCheckout deleteMany
   */
  export type StripeCheckoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StripeCheckouts to delete
     */
    where?: StripeCheckoutWhereInput
  }


  /**
   * StripeCheckout.StripeCustomer
   */
  export type StripeCheckout$StripeCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCustomer
     */
    select?: StripeCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCustomerInclude<ExtArgs> | null
    where?: StripeCustomerWhereInput
  }


  /**
   * StripeCheckout.ProductReview
   */
  export type StripeCheckout$ProductReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReview
     */
    select?: ProductReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductReviewInclude<ExtArgs> | null
    where?: ProductReviewWhereInput
    orderBy?: ProductReviewOrderByWithRelationInput | ProductReviewOrderByWithRelationInput[]
    cursor?: ProductReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductReviewScalarFieldEnum | ProductReviewScalarFieldEnum[]
  }


  /**
   * StripeCheckout without action
   */
  export type StripeCheckoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCheckout
     */
    select?: StripeCheckoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCheckoutInclude<ExtArgs> | null
  }



  /**
   * Model StripeCustomer
   */

  export type AggregateStripeCustomer = {
    _count: StripeCustomerCountAggregateOutputType | null
    _avg: StripeCustomerAvgAggregateOutputType | null
    _sum: StripeCustomerSumAggregateOutputType | null
    _min: StripeCustomerMinAggregateOutputType | null
    _max: StripeCustomerMaxAggregateOutputType | null
  }

  export type StripeCustomerAvgAggregateOutputType = {
    id: number | null
  }

  export type StripeCustomerSumAggregateOutputType = {
    id: number | null
  }

  export type StripeCustomerMinAggregateOutputType = {
    id: number | null
    customerId: string | null
    userId: string | null
  }

  export type StripeCustomerMaxAggregateOutputType = {
    id: number | null
    customerId: string | null
    userId: string | null
  }

  export type StripeCustomerCountAggregateOutputType = {
    id: number
    customerId: number
    userId: number
    _all: number
  }


  export type StripeCustomerAvgAggregateInputType = {
    id?: true
  }

  export type StripeCustomerSumAggregateInputType = {
    id?: true
  }

  export type StripeCustomerMinAggregateInputType = {
    id?: true
    customerId?: true
    userId?: true
  }

  export type StripeCustomerMaxAggregateInputType = {
    id?: true
    customerId?: true
    userId?: true
  }

  export type StripeCustomerCountAggregateInputType = {
    id?: true
    customerId?: true
    userId?: true
    _all?: true
  }

  export type StripeCustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StripeCustomer to aggregate.
     */
    where?: StripeCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StripeCustomers to fetch.
     */
    orderBy?: StripeCustomerOrderByWithRelationInput | StripeCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StripeCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StripeCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StripeCustomers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StripeCustomers
    **/
    _count?: true | StripeCustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StripeCustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StripeCustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StripeCustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StripeCustomerMaxAggregateInputType
  }

  export type GetStripeCustomerAggregateType<T extends StripeCustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateStripeCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStripeCustomer[P]>
      : GetScalarType<T[P], AggregateStripeCustomer[P]>
  }




  export type StripeCustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StripeCustomerWhereInput
    orderBy?: StripeCustomerOrderByWithAggregationInput | StripeCustomerOrderByWithAggregationInput[]
    by: StripeCustomerScalarFieldEnum[] | StripeCustomerScalarFieldEnum
    having?: StripeCustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StripeCustomerCountAggregateInputType | true
    _avg?: StripeCustomerAvgAggregateInputType
    _sum?: StripeCustomerSumAggregateInputType
    _min?: StripeCustomerMinAggregateInputType
    _max?: StripeCustomerMaxAggregateInputType
  }

  export type StripeCustomerGroupByOutputType = {
    id: number
    customerId: string
    userId: string
    _count: StripeCustomerCountAggregateOutputType | null
    _avg: StripeCustomerAvgAggregateOutputType | null
    _sum: StripeCustomerSumAggregateOutputType | null
    _min: StripeCustomerMinAggregateOutputType | null
    _max: StripeCustomerMaxAggregateOutputType | null
  }

  type GetStripeCustomerGroupByPayload<T extends StripeCustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StripeCustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StripeCustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StripeCustomerGroupByOutputType[P]>
            : GetScalarType<T[P], StripeCustomerGroupByOutputType[P]>
        }
      >
    >


  export type StripeCustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    userId?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    StripeCheckout?: boolean | StripeCustomer$StripeCheckoutArgs<ExtArgs>
    StripeSubscription?: boolean | StripeCustomer$StripeSubscriptionArgs<ExtArgs>
    _count?: boolean | StripeCustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stripeCustomer"]>

  export type StripeCustomerSelectScalar = {
    id?: boolean
    customerId?: boolean
    userId?: boolean
  }

  export type StripeCustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    StripeCheckout?: boolean | StripeCustomer$StripeCheckoutArgs<ExtArgs>
    StripeSubscription?: boolean | StripeCustomer$StripeSubscriptionArgs<ExtArgs>
    _count?: boolean | StripeCustomerCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StripeCustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StripeCustomer"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      StripeCheckout: Prisma.$StripeCheckoutPayload<ExtArgs>[]
      StripeSubscription: Prisma.$StripeSubscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      customerId: string
      userId: string
    }, ExtArgs["result"]["stripeCustomer"]>
    composites: {}
  }


  type StripeCustomerGetPayload<S extends boolean | null | undefined | StripeCustomerDefaultArgs> = $Result.GetResult<Prisma.$StripeCustomerPayload, S>

  type StripeCustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StripeCustomerFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: StripeCustomerCountAggregateInputType | true
    }

  export interface StripeCustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StripeCustomer'], meta: { name: 'StripeCustomer' } }
    /**
     * Find zero or one StripeCustomer that matches the filter.
     * @param {StripeCustomerFindUniqueArgs} args - Arguments to find a StripeCustomer
     * @example
     * // Get one StripeCustomer
     * const stripeCustomer = await prisma.stripeCustomer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StripeCustomerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StripeCustomerFindUniqueArgs<ExtArgs>>
    ): Prisma__StripeCustomerClient<$Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StripeCustomer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StripeCustomerFindUniqueOrThrowArgs} args - Arguments to find a StripeCustomer
     * @example
     * // Get one StripeCustomer
     * const stripeCustomer = await prisma.stripeCustomer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StripeCustomerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeCustomerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StripeCustomerClient<$Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StripeCustomer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeCustomerFindFirstArgs} args - Arguments to find a StripeCustomer
     * @example
     * // Get one StripeCustomer
     * const stripeCustomer = await prisma.stripeCustomer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StripeCustomerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeCustomerFindFirstArgs<ExtArgs>>
    ): Prisma__StripeCustomerClient<$Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StripeCustomer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeCustomerFindFirstOrThrowArgs} args - Arguments to find a StripeCustomer
     * @example
     * // Get one StripeCustomer
     * const stripeCustomer = await prisma.stripeCustomer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StripeCustomerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeCustomerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StripeCustomerClient<$Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StripeCustomers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeCustomerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StripeCustomers
     * const stripeCustomers = await prisma.stripeCustomer.findMany()
     * 
     * // Get first 10 StripeCustomers
     * const stripeCustomers = await prisma.stripeCustomer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stripeCustomerWithIdOnly = await prisma.stripeCustomer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StripeCustomerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeCustomerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StripeCustomer.
     * @param {StripeCustomerCreateArgs} args - Arguments to create a StripeCustomer.
     * @example
     * // Create one StripeCustomer
     * const StripeCustomer = await prisma.stripeCustomer.create({
     *   data: {
     *     // ... data to create a StripeCustomer
     *   }
     * })
     * 
    **/
    create<T extends StripeCustomerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StripeCustomerCreateArgs<ExtArgs>>
    ): Prisma__StripeCustomerClient<$Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StripeCustomers.
     *     @param {StripeCustomerCreateManyArgs} args - Arguments to create many StripeCustomers.
     *     @example
     *     // Create many StripeCustomers
     *     const stripeCustomer = await prisma.stripeCustomer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StripeCustomerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeCustomerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StripeCustomer.
     * @param {StripeCustomerDeleteArgs} args - Arguments to delete one StripeCustomer.
     * @example
     * // Delete one StripeCustomer
     * const StripeCustomer = await prisma.stripeCustomer.delete({
     *   where: {
     *     // ... filter to delete one StripeCustomer
     *   }
     * })
     * 
    **/
    delete<T extends StripeCustomerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StripeCustomerDeleteArgs<ExtArgs>>
    ): Prisma__StripeCustomerClient<$Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StripeCustomer.
     * @param {StripeCustomerUpdateArgs} args - Arguments to update one StripeCustomer.
     * @example
     * // Update one StripeCustomer
     * const stripeCustomer = await prisma.stripeCustomer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StripeCustomerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StripeCustomerUpdateArgs<ExtArgs>>
    ): Prisma__StripeCustomerClient<$Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StripeCustomers.
     * @param {StripeCustomerDeleteManyArgs} args - Arguments to filter StripeCustomers to delete.
     * @example
     * // Delete a few StripeCustomers
     * const { count } = await prisma.stripeCustomer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StripeCustomerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeCustomerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StripeCustomers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeCustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StripeCustomers
     * const stripeCustomer = await prisma.stripeCustomer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StripeCustomerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StripeCustomerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StripeCustomer.
     * @param {StripeCustomerUpsertArgs} args - Arguments to update or create a StripeCustomer.
     * @example
     * // Update or create a StripeCustomer
     * const stripeCustomer = await prisma.stripeCustomer.upsert({
     *   create: {
     *     // ... data to create a StripeCustomer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StripeCustomer we want to update
     *   }
     * })
    **/
    upsert<T extends StripeCustomerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StripeCustomerUpsertArgs<ExtArgs>>
    ): Prisma__StripeCustomerClient<$Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StripeCustomers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeCustomerCountArgs} args - Arguments to filter StripeCustomers to count.
     * @example
     * // Count the number of StripeCustomers
     * const count = await prisma.stripeCustomer.count({
     *   where: {
     *     // ... the filter for the StripeCustomers we want to count
     *   }
     * })
    **/
    count<T extends StripeCustomerCountArgs>(
      args?: Subset<T, StripeCustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StripeCustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StripeCustomer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeCustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StripeCustomerAggregateArgs>(args: Subset<T, StripeCustomerAggregateArgs>): Prisma.PrismaPromise<GetStripeCustomerAggregateType<T>>

    /**
     * Group by StripeCustomer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeCustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StripeCustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StripeCustomerGroupByArgs['orderBy'] }
        : { orderBy?: StripeCustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StripeCustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStripeCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StripeCustomer model
   */
  readonly fields: StripeCustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StripeCustomer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StripeCustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    StripeCheckout<T extends StripeCustomer$StripeCheckoutArgs<ExtArgs> = {}>(args?: Subset<T, StripeCustomer$StripeCheckoutArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StripeCheckoutPayload<ExtArgs>, T, 'findMany'> | Null>;

    StripeSubscription<T extends StripeCustomer$StripeSubscriptionArgs<ExtArgs> = {}>(args?: Subset<T, StripeCustomer$StripeSubscriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StripeSubscriptionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StripeCustomer model
   */ 
  interface StripeCustomerFieldRefs {
    readonly id: FieldRef<"StripeCustomer", 'Int'>
    readonly customerId: FieldRef<"StripeCustomer", 'String'>
    readonly userId: FieldRef<"StripeCustomer", 'String'>
  }
    

  // Custom InputTypes

  /**
   * StripeCustomer findUnique
   */
  export type StripeCustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCustomer
     */
    select?: StripeCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCustomerInclude<ExtArgs> | null
    /**
     * Filter, which StripeCustomer to fetch.
     */
    where: StripeCustomerWhereUniqueInput
  }


  /**
   * StripeCustomer findUniqueOrThrow
   */
  export type StripeCustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCustomer
     */
    select?: StripeCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCustomerInclude<ExtArgs> | null
    /**
     * Filter, which StripeCustomer to fetch.
     */
    where: StripeCustomerWhereUniqueInput
  }


  /**
   * StripeCustomer findFirst
   */
  export type StripeCustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCustomer
     */
    select?: StripeCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCustomerInclude<ExtArgs> | null
    /**
     * Filter, which StripeCustomer to fetch.
     */
    where?: StripeCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StripeCustomers to fetch.
     */
    orderBy?: StripeCustomerOrderByWithRelationInput | StripeCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StripeCustomers.
     */
    cursor?: StripeCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StripeCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StripeCustomers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StripeCustomers.
     */
    distinct?: StripeCustomerScalarFieldEnum | StripeCustomerScalarFieldEnum[]
  }


  /**
   * StripeCustomer findFirstOrThrow
   */
  export type StripeCustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCustomer
     */
    select?: StripeCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCustomerInclude<ExtArgs> | null
    /**
     * Filter, which StripeCustomer to fetch.
     */
    where?: StripeCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StripeCustomers to fetch.
     */
    orderBy?: StripeCustomerOrderByWithRelationInput | StripeCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StripeCustomers.
     */
    cursor?: StripeCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StripeCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StripeCustomers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StripeCustomers.
     */
    distinct?: StripeCustomerScalarFieldEnum | StripeCustomerScalarFieldEnum[]
  }


  /**
   * StripeCustomer findMany
   */
  export type StripeCustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCustomer
     */
    select?: StripeCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCustomerInclude<ExtArgs> | null
    /**
     * Filter, which StripeCustomers to fetch.
     */
    where?: StripeCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StripeCustomers to fetch.
     */
    orderBy?: StripeCustomerOrderByWithRelationInput | StripeCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StripeCustomers.
     */
    cursor?: StripeCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StripeCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StripeCustomers.
     */
    skip?: number
    distinct?: StripeCustomerScalarFieldEnum | StripeCustomerScalarFieldEnum[]
  }


  /**
   * StripeCustomer create
   */
  export type StripeCustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCustomer
     */
    select?: StripeCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a StripeCustomer.
     */
    data: XOR<StripeCustomerCreateInput, StripeCustomerUncheckedCreateInput>
  }


  /**
   * StripeCustomer createMany
   */
  export type StripeCustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StripeCustomers.
     */
    data: StripeCustomerCreateManyInput | StripeCustomerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * StripeCustomer update
   */
  export type StripeCustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCustomer
     */
    select?: StripeCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a StripeCustomer.
     */
    data: XOR<StripeCustomerUpdateInput, StripeCustomerUncheckedUpdateInput>
    /**
     * Choose, which StripeCustomer to update.
     */
    where: StripeCustomerWhereUniqueInput
  }


  /**
   * StripeCustomer updateMany
   */
  export type StripeCustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StripeCustomers.
     */
    data: XOR<StripeCustomerUpdateManyMutationInput, StripeCustomerUncheckedUpdateManyInput>
    /**
     * Filter which StripeCustomers to update
     */
    where?: StripeCustomerWhereInput
  }


  /**
   * StripeCustomer upsert
   */
  export type StripeCustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCustomer
     */
    select?: StripeCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the StripeCustomer to update in case it exists.
     */
    where: StripeCustomerWhereUniqueInput
    /**
     * In case the StripeCustomer found by the `where` argument doesn't exist, create a new StripeCustomer with this data.
     */
    create: XOR<StripeCustomerCreateInput, StripeCustomerUncheckedCreateInput>
    /**
     * In case the StripeCustomer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StripeCustomerUpdateInput, StripeCustomerUncheckedUpdateInput>
  }


  /**
   * StripeCustomer delete
   */
  export type StripeCustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCustomer
     */
    select?: StripeCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCustomerInclude<ExtArgs> | null
    /**
     * Filter which StripeCustomer to delete.
     */
    where: StripeCustomerWhereUniqueInput
  }


  /**
   * StripeCustomer deleteMany
   */
  export type StripeCustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StripeCustomers to delete
     */
    where?: StripeCustomerWhereInput
  }


  /**
   * StripeCustomer.StripeCheckout
   */
  export type StripeCustomer$StripeCheckoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCheckout
     */
    select?: StripeCheckoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCheckoutInclude<ExtArgs> | null
    where?: StripeCheckoutWhereInput
    orderBy?: StripeCheckoutOrderByWithRelationInput | StripeCheckoutOrderByWithRelationInput[]
    cursor?: StripeCheckoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StripeCheckoutScalarFieldEnum | StripeCheckoutScalarFieldEnum[]
  }


  /**
   * StripeCustomer.StripeSubscription
   */
  export type StripeCustomer$StripeSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeSubscription
     */
    select?: StripeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeSubscriptionInclude<ExtArgs> | null
    where?: StripeSubscriptionWhereInput
    orderBy?: StripeSubscriptionOrderByWithRelationInput | StripeSubscriptionOrderByWithRelationInput[]
    cursor?: StripeSubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StripeSubscriptionScalarFieldEnum | StripeSubscriptionScalarFieldEnum[]
  }


  /**
   * StripeCustomer without action
   */
  export type StripeCustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCustomer
     */
    select?: StripeCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCustomerInclude<ExtArgs> | null
  }



  /**
   * Model StripeSubscription
   */

  export type AggregateStripeSubscription = {
    _count: StripeSubscriptionCountAggregateOutputType | null
    _avg: StripeSubscriptionAvgAggregateOutputType | null
    _sum: StripeSubscriptionSumAggregateOutputType | null
    _min: StripeSubscriptionMinAggregateOutputType | null
    _max: StripeSubscriptionMaxAggregateOutputType | null
  }

  export type StripeSubscriptionAvgAggregateOutputType = {
    id: number | null
    stripeCustomerId: number | null
  }

  export type StripeSubscriptionSumAggregateOutputType = {
    id: number | null
    stripeCustomerId: number | null
  }

  export type StripeSubscriptionMinAggregateOutputType = {
    id: number | null
    subscriptionId: string | null
    plan: string | null
    status: $Enums.subscriptionStatus | null
    periodStart: string | null
    periodEnd: string | null
    cancelAt: string | null
    cancelAtPeriodEnd: boolean | null
    stripeCustomerId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StripeSubscriptionMaxAggregateOutputType = {
    id: number | null
    subscriptionId: string | null
    plan: string | null
    status: $Enums.subscriptionStatus | null
    periodStart: string | null
    periodEnd: string | null
    cancelAt: string | null
    cancelAtPeriodEnd: boolean | null
    stripeCustomerId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StripeSubscriptionCountAggregateOutputType = {
    id: number
    subscriptionId: number
    plan: number
    status: number
    periodStart: number
    periodEnd: number
    cancelAt: number
    cancelAtPeriodEnd: number
    stripeCustomerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StripeSubscriptionAvgAggregateInputType = {
    id?: true
    stripeCustomerId?: true
  }

  export type StripeSubscriptionSumAggregateInputType = {
    id?: true
    stripeCustomerId?: true
  }

  export type StripeSubscriptionMinAggregateInputType = {
    id?: true
    subscriptionId?: true
    plan?: true
    status?: true
    periodStart?: true
    periodEnd?: true
    cancelAt?: true
    cancelAtPeriodEnd?: true
    stripeCustomerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StripeSubscriptionMaxAggregateInputType = {
    id?: true
    subscriptionId?: true
    plan?: true
    status?: true
    periodStart?: true
    periodEnd?: true
    cancelAt?: true
    cancelAtPeriodEnd?: true
    stripeCustomerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StripeSubscriptionCountAggregateInputType = {
    id?: true
    subscriptionId?: true
    plan?: true
    status?: true
    periodStart?: true
    periodEnd?: true
    cancelAt?: true
    cancelAtPeriodEnd?: true
    stripeCustomerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StripeSubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StripeSubscription to aggregate.
     */
    where?: StripeSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StripeSubscriptions to fetch.
     */
    orderBy?: StripeSubscriptionOrderByWithRelationInput | StripeSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StripeSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StripeSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StripeSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StripeSubscriptions
    **/
    _count?: true | StripeSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StripeSubscriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StripeSubscriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StripeSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StripeSubscriptionMaxAggregateInputType
  }

  export type GetStripeSubscriptionAggregateType<T extends StripeSubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateStripeSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStripeSubscription[P]>
      : GetScalarType<T[P], AggregateStripeSubscription[P]>
  }




  export type StripeSubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StripeSubscriptionWhereInput
    orderBy?: StripeSubscriptionOrderByWithAggregationInput | StripeSubscriptionOrderByWithAggregationInput[]
    by: StripeSubscriptionScalarFieldEnum[] | StripeSubscriptionScalarFieldEnum
    having?: StripeSubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StripeSubscriptionCountAggregateInputType | true
    _avg?: StripeSubscriptionAvgAggregateInputType
    _sum?: StripeSubscriptionSumAggregateInputType
    _min?: StripeSubscriptionMinAggregateInputType
    _max?: StripeSubscriptionMaxAggregateInputType
  }

  export type StripeSubscriptionGroupByOutputType = {
    id: number
    subscriptionId: string
    plan: string
    status: $Enums.subscriptionStatus
    periodStart: string
    periodEnd: string
    cancelAt: string | null
    cancelAtPeriodEnd: boolean
    stripeCustomerId: number
    createdAt: Date
    updatedAt: Date
    _count: StripeSubscriptionCountAggregateOutputType | null
    _avg: StripeSubscriptionAvgAggregateOutputType | null
    _sum: StripeSubscriptionSumAggregateOutputType | null
    _min: StripeSubscriptionMinAggregateOutputType | null
    _max: StripeSubscriptionMaxAggregateOutputType | null
  }

  type GetStripeSubscriptionGroupByPayload<T extends StripeSubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StripeSubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StripeSubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StripeSubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], StripeSubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type StripeSubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriptionId?: boolean
    plan?: boolean
    status?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    cancelAt?: boolean
    cancelAtPeriodEnd?: boolean
    stripeCustomerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    StripeCustomer?: boolean | StripeCustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stripeSubscription"]>

  export type StripeSubscriptionSelectScalar = {
    id?: boolean
    subscriptionId?: boolean
    plan?: boolean
    status?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    cancelAt?: boolean
    cancelAtPeriodEnd?: boolean
    stripeCustomerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StripeSubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    StripeCustomer?: boolean | StripeCustomerDefaultArgs<ExtArgs>
  }


  export type $StripeSubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StripeSubscription"
    objects: {
      StripeCustomer: Prisma.$StripeCustomerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      subscriptionId: string
      plan: string
      status: $Enums.subscriptionStatus
      periodStart: string
      periodEnd: string
      cancelAt: string | null
      cancelAtPeriodEnd: boolean
      stripeCustomerId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["stripeSubscription"]>
    composites: {}
  }


  type StripeSubscriptionGetPayload<S extends boolean | null | undefined | StripeSubscriptionDefaultArgs> = $Result.GetResult<Prisma.$StripeSubscriptionPayload, S>

  type StripeSubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StripeSubscriptionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: StripeSubscriptionCountAggregateInputType | true
    }

  export interface StripeSubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StripeSubscription'], meta: { name: 'StripeSubscription' } }
    /**
     * Find zero or one StripeSubscription that matches the filter.
     * @param {StripeSubscriptionFindUniqueArgs} args - Arguments to find a StripeSubscription
     * @example
     * // Get one StripeSubscription
     * const stripeSubscription = await prisma.stripeSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StripeSubscriptionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StripeSubscriptionFindUniqueArgs<ExtArgs>>
    ): Prisma__StripeSubscriptionClient<$Result.GetResult<Prisma.$StripeSubscriptionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StripeSubscription that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StripeSubscriptionFindUniqueOrThrowArgs} args - Arguments to find a StripeSubscription
     * @example
     * // Get one StripeSubscription
     * const stripeSubscription = await prisma.stripeSubscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StripeSubscriptionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeSubscriptionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StripeSubscriptionClient<$Result.GetResult<Prisma.$StripeSubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StripeSubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeSubscriptionFindFirstArgs} args - Arguments to find a StripeSubscription
     * @example
     * // Get one StripeSubscription
     * const stripeSubscription = await prisma.stripeSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StripeSubscriptionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeSubscriptionFindFirstArgs<ExtArgs>>
    ): Prisma__StripeSubscriptionClient<$Result.GetResult<Prisma.$StripeSubscriptionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StripeSubscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeSubscriptionFindFirstOrThrowArgs} args - Arguments to find a StripeSubscription
     * @example
     * // Get one StripeSubscription
     * const stripeSubscription = await prisma.stripeSubscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StripeSubscriptionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeSubscriptionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StripeSubscriptionClient<$Result.GetResult<Prisma.$StripeSubscriptionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StripeSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeSubscriptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StripeSubscriptions
     * const stripeSubscriptions = await prisma.stripeSubscription.findMany()
     * 
     * // Get first 10 StripeSubscriptions
     * const stripeSubscriptions = await prisma.stripeSubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stripeSubscriptionWithIdOnly = await prisma.stripeSubscription.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StripeSubscriptionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeSubscriptionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StripeSubscriptionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StripeSubscription.
     * @param {StripeSubscriptionCreateArgs} args - Arguments to create a StripeSubscription.
     * @example
     * // Create one StripeSubscription
     * const StripeSubscription = await prisma.stripeSubscription.create({
     *   data: {
     *     // ... data to create a StripeSubscription
     *   }
     * })
     * 
    **/
    create<T extends StripeSubscriptionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StripeSubscriptionCreateArgs<ExtArgs>>
    ): Prisma__StripeSubscriptionClient<$Result.GetResult<Prisma.$StripeSubscriptionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StripeSubscriptions.
     *     @param {StripeSubscriptionCreateManyArgs} args - Arguments to create many StripeSubscriptions.
     *     @example
     *     // Create many StripeSubscriptions
     *     const stripeSubscription = await prisma.stripeSubscription.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StripeSubscriptionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeSubscriptionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StripeSubscription.
     * @param {StripeSubscriptionDeleteArgs} args - Arguments to delete one StripeSubscription.
     * @example
     * // Delete one StripeSubscription
     * const StripeSubscription = await prisma.stripeSubscription.delete({
     *   where: {
     *     // ... filter to delete one StripeSubscription
     *   }
     * })
     * 
    **/
    delete<T extends StripeSubscriptionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StripeSubscriptionDeleteArgs<ExtArgs>>
    ): Prisma__StripeSubscriptionClient<$Result.GetResult<Prisma.$StripeSubscriptionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StripeSubscription.
     * @param {StripeSubscriptionUpdateArgs} args - Arguments to update one StripeSubscription.
     * @example
     * // Update one StripeSubscription
     * const stripeSubscription = await prisma.stripeSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StripeSubscriptionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StripeSubscriptionUpdateArgs<ExtArgs>>
    ): Prisma__StripeSubscriptionClient<$Result.GetResult<Prisma.$StripeSubscriptionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StripeSubscriptions.
     * @param {StripeSubscriptionDeleteManyArgs} args - Arguments to filter StripeSubscriptions to delete.
     * @example
     * // Delete a few StripeSubscriptions
     * const { count } = await prisma.stripeSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StripeSubscriptionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StripeSubscriptionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StripeSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StripeSubscriptions
     * const stripeSubscription = await prisma.stripeSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StripeSubscriptionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StripeSubscriptionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StripeSubscription.
     * @param {StripeSubscriptionUpsertArgs} args - Arguments to update or create a StripeSubscription.
     * @example
     * // Update or create a StripeSubscription
     * const stripeSubscription = await prisma.stripeSubscription.upsert({
     *   create: {
     *     // ... data to create a StripeSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StripeSubscription we want to update
     *   }
     * })
    **/
    upsert<T extends StripeSubscriptionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StripeSubscriptionUpsertArgs<ExtArgs>>
    ): Prisma__StripeSubscriptionClient<$Result.GetResult<Prisma.$StripeSubscriptionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StripeSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeSubscriptionCountArgs} args - Arguments to filter StripeSubscriptions to count.
     * @example
     * // Count the number of StripeSubscriptions
     * const count = await prisma.stripeSubscription.count({
     *   where: {
     *     // ... the filter for the StripeSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends StripeSubscriptionCountArgs>(
      args?: Subset<T, StripeSubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StripeSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StripeSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StripeSubscriptionAggregateArgs>(args: Subset<T, StripeSubscriptionAggregateArgs>): Prisma.PrismaPromise<GetStripeSubscriptionAggregateType<T>>

    /**
     * Group by StripeSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeSubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StripeSubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StripeSubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: StripeSubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StripeSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStripeSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StripeSubscription model
   */
  readonly fields: StripeSubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StripeSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StripeSubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    StripeCustomer<T extends StripeCustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StripeCustomerDefaultArgs<ExtArgs>>): Prisma__StripeCustomerClient<$Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StripeSubscription model
   */ 
  interface StripeSubscriptionFieldRefs {
    readonly id: FieldRef<"StripeSubscription", 'Int'>
    readonly subscriptionId: FieldRef<"StripeSubscription", 'String'>
    readonly plan: FieldRef<"StripeSubscription", 'String'>
    readonly status: FieldRef<"StripeSubscription", 'subscriptionStatus'>
    readonly periodStart: FieldRef<"StripeSubscription", 'String'>
    readonly periodEnd: FieldRef<"StripeSubscription", 'String'>
    readonly cancelAt: FieldRef<"StripeSubscription", 'String'>
    readonly cancelAtPeriodEnd: FieldRef<"StripeSubscription", 'Boolean'>
    readonly stripeCustomerId: FieldRef<"StripeSubscription", 'Int'>
    readonly createdAt: FieldRef<"StripeSubscription", 'DateTime'>
    readonly updatedAt: FieldRef<"StripeSubscription", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * StripeSubscription findUnique
   */
  export type StripeSubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeSubscription
     */
    select?: StripeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which StripeSubscription to fetch.
     */
    where: StripeSubscriptionWhereUniqueInput
  }


  /**
   * StripeSubscription findUniqueOrThrow
   */
  export type StripeSubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeSubscription
     */
    select?: StripeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which StripeSubscription to fetch.
     */
    where: StripeSubscriptionWhereUniqueInput
  }


  /**
   * StripeSubscription findFirst
   */
  export type StripeSubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeSubscription
     */
    select?: StripeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which StripeSubscription to fetch.
     */
    where?: StripeSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StripeSubscriptions to fetch.
     */
    orderBy?: StripeSubscriptionOrderByWithRelationInput | StripeSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StripeSubscriptions.
     */
    cursor?: StripeSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StripeSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StripeSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StripeSubscriptions.
     */
    distinct?: StripeSubscriptionScalarFieldEnum | StripeSubscriptionScalarFieldEnum[]
  }


  /**
   * StripeSubscription findFirstOrThrow
   */
  export type StripeSubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeSubscription
     */
    select?: StripeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which StripeSubscription to fetch.
     */
    where?: StripeSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StripeSubscriptions to fetch.
     */
    orderBy?: StripeSubscriptionOrderByWithRelationInput | StripeSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StripeSubscriptions.
     */
    cursor?: StripeSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StripeSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StripeSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StripeSubscriptions.
     */
    distinct?: StripeSubscriptionScalarFieldEnum | StripeSubscriptionScalarFieldEnum[]
  }


  /**
   * StripeSubscription findMany
   */
  export type StripeSubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeSubscription
     */
    select?: StripeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which StripeSubscriptions to fetch.
     */
    where?: StripeSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StripeSubscriptions to fetch.
     */
    orderBy?: StripeSubscriptionOrderByWithRelationInput | StripeSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StripeSubscriptions.
     */
    cursor?: StripeSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StripeSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StripeSubscriptions.
     */
    skip?: number
    distinct?: StripeSubscriptionScalarFieldEnum | StripeSubscriptionScalarFieldEnum[]
  }


  /**
   * StripeSubscription create
   */
  export type StripeSubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeSubscription
     */
    select?: StripeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a StripeSubscription.
     */
    data: XOR<StripeSubscriptionCreateInput, StripeSubscriptionUncheckedCreateInput>
  }


  /**
   * StripeSubscription createMany
   */
  export type StripeSubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StripeSubscriptions.
     */
    data: StripeSubscriptionCreateManyInput | StripeSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * StripeSubscription update
   */
  export type StripeSubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeSubscription
     */
    select?: StripeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a StripeSubscription.
     */
    data: XOR<StripeSubscriptionUpdateInput, StripeSubscriptionUncheckedUpdateInput>
    /**
     * Choose, which StripeSubscription to update.
     */
    where: StripeSubscriptionWhereUniqueInput
  }


  /**
   * StripeSubscription updateMany
   */
  export type StripeSubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StripeSubscriptions.
     */
    data: XOR<StripeSubscriptionUpdateManyMutationInput, StripeSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which StripeSubscriptions to update
     */
    where?: StripeSubscriptionWhereInput
  }


  /**
   * StripeSubscription upsert
   */
  export type StripeSubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeSubscription
     */
    select?: StripeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeSubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the StripeSubscription to update in case it exists.
     */
    where: StripeSubscriptionWhereUniqueInput
    /**
     * In case the StripeSubscription found by the `where` argument doesn't exist, create a new StripeSubscription with this data.
     */
    create: XOR<StripeSubscriptionCreateInput, StripeSubscriptionUncheckedCreateInput>
    /**
     * In case the StripeSubscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StripeSubscriptionUpdateInput, StripeSubscriptionUncheckedUpdateInput>
  }


  /**
   * StripeSubscription delete
   */
  export type StripeSubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeSubscription
     */
    select?: StripeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter which StripeSubscription to delete.
     */
    where: StripeSubscriptionWhereUniqueInput
  }


  /**
   * StripeSubscription deleteMany
   */
  export type StripeSubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StripeSubscriptions to delete
     */
    where?: StripeSubscriptionWhereInput
  }


  /**
   * StripeSubscription without action
   */
  export type StripeSubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeSubscription
     */
    select?: StripeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeSubscriptionInclude<ExtArgs> | null
  }



  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    userName: string | null
    gender: $Enums.Gender | null
    country: string | null
    city: string | null
    email: string | null
    birthYear: string | null
    activated: boolean | null
    invited: boolean | null
    invitedUntil: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    userName: string | null
    gender: $Enums.Gender | null
    country: string | null
    city: string | null
    email: string | null
    birthYear: string | null
    activated: boolean | null
    invited: boolean | null
    invitedUntil: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    userName: number
    gender: number
    country: number
    city: number
    email: number
    birthYear: number
    activated: number
    invited: number
    invitedUntil: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    userName?: true
    gender?: true
    country?: true
    city?: true
    email?: true
    birthYear?: true
    activated?: true
    invited?: true
    invitedUntil?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    userName?: true
    gender?: true
    country?: true
    city?: true
    email?: true
    birthYear?: true
    activated?: true
    invited?: true
    invitedUntil?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    userName?: true
    gender?: true
    country?: true
    city?: true
    email?: true
    birthYear?: true
    activated?: true
    invited?: true
    invitedUntil?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    userName: string
    gender: $Enums.Gender
    country: string
    city: string
    email: string
    birthYear: string
    activated: boolean
    invited: boolean
    invitedUntil: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userName?: boolean
    gender?: boolean
    country?: boolean
    city?: boolean
    email?: boolean
    birthYear?: boolean
    activated?: boolean
    invited?: boolean
    invitedUntil?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    StripeCustomer?: boolean | User$StripeCustomerArgs<ExtArgs>
    OneTimePassword?: boolean | User$OneTimePasswordArgs<ExtArgs>
    LikeGrammarQuestion?: boolean | User$LikeGrammarQuestionArgs<ExtArgs>
    LikeListening?: boolean | User$LikeListeningArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    userName?: boolean
    gender?: boolean
    country?: boolean
    city?: boolean
    email?: boolean
    birthYear?: boolean
    activated?: boolean
    invited?: boolean
    invitedUntil?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    StripeCustomer?: boolean | User$StripeCustomerArgs<ExtArgs>
    OneTimePassword?: boolean | User$OneTimePasswordArgs<ExtArgs>
    LikeGrammarQuestion?: boolean | User$LikeGrammarQuestionArgs<ExtArgs>
    LikeListening?: boolean | User$LikeListeningArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      StripeCustomer: Prisma.$StripeCustomerPayload<ExtArgs>[]
      OneTimePassword: Prisma.$OneTimePasswordPayload<ExtArgs>[]
      LikeGrammarQuestion: Prisma.$LikeGrammarQuestionPayload<ExtArgs>[]
      LikeListening: Prisma.$LikeListeningPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userName: string
      gender: $Enums.Gender
      country: string
      city: string
      email: string
      birthYear: string
      activated: boolean
      invited: boolean
      invitedUntil: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    StripeCustomer<T extends User$StripeCustomerArgs<ExtArgs> = {}>(args?: Subset<T, User$StripeCustomerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, 'findMany'> | Null>;

    OneTimePassword<T extends User$OneTimePasswordArgs<ExtArgs> = {}>(args?: Subset<T, User$OneTimePasswordArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OneTimePasswordPayload<ExtArgs>, T, 'findMany'> | Null>;

    LikeGrammarQuestion<T extends User$LikeGrammarQuestionArgs<ExtArgs> = {}>(args?: Subset<T, User$LikeGrammarQuestionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeGrammarQuestionPayload<ExtArgs>, T, 'findMany'> | Null>;

    LikeListening<T extends User$LikeListeningArgs<ExtArgs> = {}>(args?: Subset<T, User$LikeListeningArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeListeningPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly userName: FieldRef<"User", 'String'>
    readonly gender: FieldRef<"User", 'Gender'>
    readonly country: FieldRef<"User", 'String'>
    readonly city: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly birthYear: FieldRef<"User", 'String'>
    readonly activated: FieldRef<"User", 'Boolean'>
    readonly invited: FieldRef<"User", 'Boolean'>
    readonly invitedUntil: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.StripeCustomer
   */
  export type User$StripeCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCustomer
     */
    select?: StripeCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StripeCustomerInclude<ExtArgs> | null
    where?: StripeCustomerWhereInput
    orderBy?: StripeCustomerOrderByWithRelationInput | StripeCustomerOrderByWithRelationInput[]
    cursor?: StripeCustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StripeCustomerScalarFieldEnum | StripeCustomerScalarFieldEnum[]
  }


  /**
   * User.OneTimePassword
   */
  export type User$OneTimePasswordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OneTimePassword
     */
    select?: OneTimePasswordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneTimePasswordInclude<ExtArgs> | null
    where?: OneTimePasswordWhereInput
    orderBy?: OneTimePasswordOrderByWithRelationInput | OneTimePasswordOrderByWithRelationInput[]
    cursor?: OneTimePasswordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OneTimePasswordScalarFieldEnum | OneTimePasswordScalarFieldEnum[]
  }


  /**
   * User.LikeGrammarQuestion
   */
  export type User$LikeGrammarQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeGrammarQuestion
     */
    select?: LikeGrammarQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeGrammarQuestionInclude<ExtArgs> | null
    where?: LikeGrammarQuestionWhereInput
    orderBy?: LikeGrammarQuestionOrderByWithRelationInput | LikeGrammarQuestionOrderByWithRelationInput[]
    cursor?: LikeGrammarQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeGrammarQuestionScalarFieldEnum | LikeGrammarQuestionScalarFieldEnum[]
  }


  /**
   * User.LikeListening
   */
  export type User$LikeListeningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeListening
     */
    select?: LikeListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeListeningInclude<ExtArgs> | null
    where?: LikeListeningWhereInput
    orderBy?: LikeListeningOrderByWithRelationInput | LikeListeningOrderByWithRelationInput[]
    cursor?: LikeListeningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeListeningScalarFieldEnum | LikeListeningScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Passage
   */

  export type AggregatePassage = {
    _count: PassageCountAggregateOutputType | null
    _avg: PassageAvgAggregateOutputType | null
    _sum: PassageSumAggregateOutputType | null
    _min: PassageMinAggregateOutputType | null
    _max: PassageMaxAggregateOutputType | null
  }

  export type PassageAvgAggregateOutputType = {
    id: number | null
  }

  export type PassageSumAggregateOutputType = {
    id: number | null
  }

  export type PassageMinAggregateOutputType = {
    id: number | null
    level: $Enums.PassageLevel | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PassageMaxAggregateOutputType = {
    id: number | null
    level: $Enums.PassageLevel | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PassageCountAggregateOutputType = {
    id: number
    level: number
    title: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PassageAvgAggregateInputType = {
    id?: true
  }

  export type PassageSumAggregateInputType = {
    id?: true
  }

  export type PassageMinAggregateInputType = {
    id?: true
    level?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PassageMaxAggregateInputType = {
    id?: true
    level?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PassageCountAggregateInputType = {
    id?: true
    level?: true
    title?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PassageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Passage to aggregate.
     */
    where?: PassageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passages to fetch.
     */
    orderBy?: PassageOrderByWithRelationInput | PassageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PassageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Passages
    **/
    _count?: true | PassageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PassageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PassageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PassageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PassageMaxAggregateInputType
  }

  export type GetPassageAggregateType<T extends PassageAggregateArgs> = {
        [P in keyof T & keyof AggregatePassage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePassage[P]>
      : GetScalarType<T[P], AggregatePassage[P]>
  }




  export type PassageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassageWhereInput
    orderBy?: PassageOrderByWithAggregationInput | PassageOrderByWithAggregationInput[]
    by: PassageScalarFieldEnum[] | PassageScalarFieldEnum
    having?: PassageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PassageCountAggregateInputType | true
    _avg?: PassageAvgAggregateInputType
    _sum?: PassageSumAggregateInputType
    _min?: PassageMinAggregateInputType
    _max?: PassageMaxAggregateInputType
  }

  export type PassageGroupByOutputType = {
    id: number
    level: $Enums.PassageLevel
    title: string
    createdAt: Date
    updatedAt: Date
    _count: PassageCountAggregateOutputType | null
    _avg: PassageAvgAggregateOutputType | null
    _sum: PassageSumAggregateOutputType | null
    _min: PassageMinAggregateOutputType | null
    _max: PassageMaxAggregateOutputType | null
  }

  type GetPassageGroupByPayload<T extends PassageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PassageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PassageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PassageGroupByOutputType[P]>
            : GetScalarType<T[P], PassageGroupByOutputType[P]>
        }
      >
    >


  export type PassageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    PassageQuestion?: boolean | Passage$PassageQuestionArgs<ExtArgs>
    PassageSentence?: boolean | Passage$PassageSentenceArgs<ExtArgs>
    _count?: boolean | PassageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passage"]>

  export type PassageSelectScalar = {
    id?: boolean
    level?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PassageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PassageQuestion?: boolean | Passage$PassageQuestionArgs<ExtArgs>
    PassageSentence?: boolean | Passage$PassageSentenceArgs<ExtArgs>
    _count?: boolean | PassageCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PassagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Passage"
    objects: {
      PassageQuestion: Prisma.$PassageQuestionPayload<ExtArgs>[]
      PassageSentence: Prisma.$PassageSentencePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      level: $Enums.PassageLevel
      title: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["passage"]>
    composites: {}
  }


  type PassageGetPayload<S extends boolean | null | undefined | PassageDefaultArgs> = $Result.GetResult<Prisma.$PassagePayload, S>

  type PassageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PassageFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PassageCountAggregateInputType | true
    }

  export interface PassageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Passage'], meta: { name: 'Passage' } }
    /**
     * Find zero or one Passage that matches the filter.
     * @param {PassageFindUniqueArgs} args - Arguments to find a Passage
     * @example
     * // Get one Passage
     * const passage = await prisma.passage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PassageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PassageFindUniqueArgs<ExtArgs>>
    ): Prisma__PassageClient<$Result.GetResult<Prisma.$PassagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Passage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PassageFindUniqueOrThrowArgs} args - Arguments to find a Passage
     * @example
     * // Get one Passage
     * const passage = await prisma.passage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PassageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PassageClient<$Result.GetResult<Prisma.$PassagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Passage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageFindFirstArgs} args - Arguments to find a Passage
     * @example
     * // Get one Passage
     * const passage = await prisma.passage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PassageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageFindFirstArgs<ExtArgs>>
    ): Prisma__PassageClient<$Result.GetResult<Prisma.$PassagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Passage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageFindFirstOrThrowArgs} args - Arguments to find a Passage
     * @example
     * // Get one Passage
     * const passage = await prisma.passage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PassageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PassageClient<$Result.GetResult<Prisma.$PassagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Passages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Passages
     * const passages = await prisma.passage.findMany()
     * 
     * // Get first 10 Passages
     * const passages = await prisma.passage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passageWithIdOnly = await prisma.passage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PassageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Passage.
     * @param {PassageCreateArgs} args - Arguments to create a Passage.
     * @example
     * // Create one Passage
     * const Passage = await prisma.passage.create({
     *   data: {
     *     // ... data to create a Passage
     *   }
     * })
     * 
    **/
    create<T extends PassageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PassageCreateArgs<ExtArgs>>
    ): Prisma__PassageClient<$Result.GetResult<Prisma.$PassagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Passages.
     *     @param {PassageCreateManyArgs} args - Arguments to create many Passages.
     *     @example
     *     // Create many Passages
     *     const passage = await prisma.passage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PassageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Passage.
     * @param {PassageDeleteArgs} args - Arguments to delete one Passage.
     * @example
     * // Delete one Passage
     * const Passage = await prisma.passage.delete({
     *   where: {
     *     // ... filter to delete one Passage
     *   }
     * })
     * 
    **/
    delete<T extends PassageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PassageDeleteArgs<ExtArgs>>
    ): Prisma__PassageClient<$Result.GetResult<Prisma.$PassagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Passage.
     * @param {PassageUpdateArgs} args - Arguments to update one Passage.
     * @example
     * // Update one Passage
     * const passage = await prisma.passage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PassageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PassageUpdateArgs<ExtArgs>>
    ): Prisma__PassageClient<$Result.GetResult<Prisma.$PassagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Passages.
     * @param {PassageDeleteManyArgs} args - Arguments to filter Passages to delete.
     * @example
     * // Delete a few Passages
     * const { count } = await prisma.passage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PassageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Passages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Passages
     * const passage = await prisma.passage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PassageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PassageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Passage.
     * @param {PassageUpsertArgs} args - Arguments to update or create a Passage.
     * @example
     * // Update or create a Passage
     * const passage = await prisma.passage.upsert({
     *   create: {
     *     // ... data to create a Passage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Passage we want to update
     *   }
     * })
    **/
    upsert<T extends PassageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PassageUpsertArgs<ExtArgs>>
    ): Prisma__PassageClient<$Result.GetResult<Prisma.$PassagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Passages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageCountArgs} args - Arguments to filter Passages to count.
     * @example
     * // Count the number of Passages
     * const count = await prisma.passage.count({
     *   where: {
     *     // ... the filter for the Passages we want to count
     *   }
     * })
    **/
    count<T extends PassageCountArgs>(
      args?: Subset<T, PassageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PassageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Passage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PassageAggregateArgs>(args: Subset<T, PassageAggregateArgs>): Prisma.PrismaPromise<GetPassageAggregateType<T>>

    /**
     * Group by Passage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PassageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PassageGroupByArgs['orderBy'] }
        : { orderBy?: PassageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PassageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPassageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Passage model
   */
  readonly fields: PassageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Passage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PassageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    PassageQuestion<T extends Passage$PassageQuestionArgs<ExtArgs> = {}>(args?: Subset<T, Passage$PassageQuestionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassageQuestionPayload<ExtArgs>, T, 'findMany'> | Null>;

    PassageSentence<T extends Passage$PassageSentenceArgs<ExtArgs> = {}>(args?: Subset<T, Passage$PassageSentenceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassageSentencePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Passage model
   */ 
  interface PassageFieldRefs {
    readonly id: FieldRef<"Passage", 'Int'>
    readonly level: FieldRef<"Passage", 'PassageLevel'>
    readonly title: FieldRef<"Passage", 'String'>
    readonly createdAt: FieldRef<"Passage", 'DateTime'>
    readonly updatedAt: FieldRef<"Passage", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Passage findUnique
   */
  export type PassageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passage
     */
    select?: PassageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageInclude<ExtArgs> | null
    /**
     * Filter, which Passage to fetch.
     */
    where: PassageWhereUniqueInput
  }


  /**
   * Passage findUniqueOrThrow
   */
  export type PassageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passage
     */
    select?: PassageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageInclude<ExtArgs> | null
    /**
     * Filter, which Passage to fetch.
     */
    where: PassageWhereUniqueInput
  }


  /**
   * Passage findFirst
   */
  export type PassageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passage
     */
    select?: PassageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageInclude<ExtArgs> | null
    /**
     * Filter, which Passage to fetch.
     */
    where?: PassageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passages to fetch.
     */
    orderBy?: PassageOrderByWithRelationInput | PassageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Passages.
     */
    cursor?: PassageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Passages.
     */
    distinct?: PassageScalarFieldEnum | PassageScalarFieldEnum[]
  }


  /**
   * Passage findFirstOrThrow
   */
  export type PassageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passage
     */
    select?: PassageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageInclude<ExtArgs> | null
    /**
     * Filter, which Passage to fetch.
     */
    where?: PassageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passages to fetch.
     */
    orderBy?: PassageOrderByWithRelationInput | PassageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Passages.
     */
    cursor?: PassageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Passages.
     */
    distinct?: PassageScalarFieldEnum | PassageScalarFieldEnum[]
  }


  /**
   * Passage findMany
   */
  export type PassageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passage
     */
    select?: PassageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageInclude<ExtArgs> | null
    /**
     * Filter, which Passages to fetch.
     */
    where?: PassageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passages to fetch.
     */
    orderBy?: PassageOrderByWithRelationInput | PassageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Passages.
     */
    cursor?: PassageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passages.
     */
    skip?: number
    distinct?: PassageScalarFieldEnum | PassageScalarFieldEnum[]
  }


  /**
   * Passage create
   */
  export type PassageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passage
     */
    select?: PassageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageInclude<ExtArgs> | null
    /**
     * The data needed to create a Passage.
     */
    data: XOR<PassageCreateInput, PassageUncheckedCreateInput>
  }


  /**
   * Passage createMany
   */
  export type PassageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Passages.
     */
    data: PassageCreateManyInput | PassageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Passage update
   */
  export type PassageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passage
     */
    select?: PassageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageInclude<ExtArgs> | null
    /**
     * The data needed to update a Passage.
     */
    data: XOR<PassageUpdateInput, PassageUncheckedUpdateInput>
    /**
     * Choose, which Passage to update.
     */
    where: PassageWhereUniqueInput
  }


  /**
   * Passage updateMany
   */
  export type PassageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Passages.
     */
    data: XOR<PassageUpdateManyMutationInput, PassageUncheckedUpdateManyInput>
    /**
     * Filter which Passages to update
     */
    where?: PassageWhereInput
  }


  /**
   * Passage upsert
   */
  export type PassageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passage
     */
    select?: PassageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageInclude<ExtArgs> | null
    /**
     * The filter to search for the Passage to update in case it exists.
     */
    where: PassageWhereUniqueInput
    /**
     * In case the Passage found by the `where` argument doesn't exist, create a new Passage with this data.
     */
    create: XOR<PassageCreateInput, PassageUncheckedCreateInput>
    /**
     * In case the Passage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PassageUpdateInput, PassageUncheckedUpdateInput>
  }


  /**
   * Passage delete
   */
  export type PassageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passage
     */
    select?: PassageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageInclude<ExtArgs> | null
    /**
     * Filter which Passage to delete.
     */
    where: PassageWhereUniqueInput
  }


  /**
   * Passage deleteMany
   */
  export type PassageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Passages to delete
     */
    where?: PassageWhereInput
  }


  /**
   * Passage.PassageQuestion
   */
  export type Passage$PassageQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageQuestion
     */
    select?: PassageQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageQuestionInclude<ExtArgs> | null
    where?: PassageQuestionWhereInput
    orderBy?: PassageQuestionOrderByWithRelationInput | PassageQuestionOrderByWithRelationInput[]
    cursor?: PassageQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PassageQuestionScalarFieldEnum | PassageQuestionScalarFieldEnum[]
  }


  /**
   * Passage.PassageSentence
   */
  export type Passage$PassageSentenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageSentence
     */
    select?: PassageSentenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageSentenceInclude<ExtArgs> | null
    where?: PassageSentenceWhereInput
    orderBy?: PassageSentenceOrderByWithRelationInput | PassageSentenceOrderByWithRelationInput[]
    cursor?: PassageSentenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PassageSentenceScalarFieldEnum | PassageSentenceScalarFieldEnum[]
  }


  /**
   * Passage without action
   */
  export type PassageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passage
     */
    select?: PassageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageInclude<ExtArgs> | null
  }



  /**
   * Model PassageQuestion
   */

  export type AggregatePassageQuestion = {
    _count: PassageQuestionCountAggregateOutputType | null
    _avg: PassageQuestionAvgAggregateOutputType | null
    _sum: PassageQuestionSumAggregateOutputType | null
    _min: PassageQuestionMinAggregateOutputType | null
    _max: PassageQuestionMaxAggregateOutputType | null
  }

  export type PassageQuestionAvgAggregateOutputType = {
    id: number | null
    passageId: number | null
  }

  export type PassageQuestionSumAggregateOutputType = {
    id: number | null
    passageId: number | null
  }

  export type PassageQuestionMinAggregateOutputType = {
    id: number | null
    passageId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PassageQuestionMaxAggregateOutputType = {
    id: number | null
    passageId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PassageQuestionCountAggregateOutputType = {
    id: number
    question1: number
    question2: number
    question3: number
    question4: number
    question5: number
    question6: number
    question7: number
    question8: number
    question9: number
    question10: number
    question11: number
    question12: number
    question13: number
    question14: number
    question15: number
    passageId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PassageQuestionAvgAggregateInputType = {
    id?: true
    passageId?: true
  }

  export type PassageQuestionSumAggregateInputType = {
    id?: true
    passageId?: true
  }

  export type PassageQuestionMinAggregateInputType = {
    id?: true
    passageId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PassageQuestionMaxAggregateInputType = {
    id?: true
    passageId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PassageQuestionCountAggregateInputType = {
    id?: true
    question1?: true
    question2?: true
    question3?: true
    question4?: true
    question5?: true
    question6?: true
    question7?: true
    question8?: true
    question9?: true
    question10?: true
    question11?: true
    question12?: true
    question13?: true
    question14?: true
    question15?: true
    passageId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PassageQuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PassageQuestion to aggregate.
     */
    where?: PassageQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PassageQuestions to fetch.
     */
    orderBy?: PassageQuestionOrderByWithRelationInput | PassageQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PassageQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PassageQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PassageQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PassageQuestions
    **/
    _count?: true | PassageQuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PassageQuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PassageQuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PassageQuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PassageQuestionMaxAggregateInputType
  }

  export type GetPassageQuestionAggregateType<T extends PassageQuestionAggregateArgs> = {
        [P in keyof T & keyof AggregatePassageQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePassageQuestion[P]>
      : GetScalarType<T[P], AggregatePassageQuestion[P]>
  }




  export type PassageQuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassageQuestionWhereInput
    orderBy?: PassageQuestionOrderByWithAggregationInput | PassageQuestionOrderByWithAggregationInput[]
    by: PassageQuestionScalarFieldEnum[] | PassageQuestionScalarFieldEnum
    having?: PassageQuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PassageQuestionCountAggregateInputType | true
    _avg?: PassageQuestionAvgAggregateInputType
    _sum?: PassageQuestionSumAggregateInputType
    _min?: PassageQuestionMinAggregateInputType
    _max?: PassageQuestionMaxAggregateInputType
  }

  export type PassageQuestionGroupByOutputType = {
    id: number
    question1: JsonValue | null
    question2: JsonValue | null
    question3: JsonValue | null
    question4: JsonValue | null
    question5: JsonValue | null
    question6: JsonValue | null
    question7: JsonValue | null
    question8: JsonValue | null
    question9: JsonValue | null
    question10: JsonValue | null
    question11: JsonValue | null
    question12: JsonValue | null
    question13: JsonValue | null
    question14: JsonValue | null
    question15: JsonValue | null
    passageId: number
    createdAt: Date
    updatedAt: Date
    _count: PassageQuestionCountAggregateOutputType | null
    _avg: PassageQuestionAvgAggregateOutputType | null
    _sum: PassageQuestionSumAggregateOutputType | null
    _min: PassageQuestionMinAggregateOutputType | null
    _max: PassageQuestionMaxAggregateOutputType | null
  }

  type GetPassageQuestionGroupByPayload<T extends PassageQuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PassageQuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PassageQuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PassageQuestionGroupByOutputType[P]>
            : GetScalarType<T[P], PassageQuestionGroupByOutputType[P]>
        }
      >
    >


  export type PassageQuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question1?: boolean
    question2?: boolean
    question3?: boolean
    question4?: boolean
    question5?: boolean
    question6?: boolean
    question7?: boolean
    question8?: boolean
    question9?: boolean
    question10?: boolean
    question11?: boolean
    question12?: boolean
    question13?: boolean
    question14?: boolean
    question15?: boolean
    passageId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Passage?: boolean | PassageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passageQuestion"]>

  export type PassageQuestionSelectScalar = {
    id?: boolean
    question1?: boolean
    question2?: boolean
    question3?: boolean
    question4?: boolean
    question5?: boolean
    question6?: boolean
    question7?: boolean
    question8?: boolean
    question9?: boolean
    question10?: boolean
    question11?: boolean
    question12?: boolean
    question13?: boolean
    question14?: boolean
    question15?: boolean
    passageId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PassageQuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Passage?: boolean | PassageDefaultArgs<ExtArgs>
  }


  export type $PassageQuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PassageQuestion"
    objects: {
      Passage: Prisma.$PassagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      question1: Prisma.JsonValue | null
      question2: Prisma.JsonValue | null
      question3: Prisma.JsonValue | null
      question4: Prisma.JsonValue | null
      question5: Prisma.JsonValue | null
      question6: Prisma.JsonValue | null
      question7: Prisma.JsonValue | null
      question8: Prisma.JsonValue | null
      question9: Prisma.JsonValue | null
      question10: Prisma.JsonValue | null
      question11: Prisma.JsonValue | null
      question12: Prisma.JsonValue | null
      question13: Prisma.JsonValue | null
      question14: Prisma.JsonValue | null
      question15: Prisma.JsonValue | null
      passageId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["passageQuestion"]>
    composites: {}
  }


  type PassageQuestionGetPayload<S extends boolean | null | undefined | PassageQuestionDefaultArgs> = $Result.GetResult<Prisma.$PassageQuestionPayload, S>

  type PassageQuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PassageQuestionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PassageQuestionCountAggregateInputType | true
    }

  export interface PassageQuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PassageQuestion'], meta: { name: 'PassageQuestion' } }
    /**
     * Find zero or one PassageQuestion that matches the filter.
     * @param {PassageQuestionFindUniqueArgs} args - Arguments to find a PassageQuestion
     * @example
     * // Get one PassageQuestion
     * const passageQuestion = await prisma.passageQuestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PassageQuestionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PassageQuestionFindUniqueArgs<ExtArgs>>
    ): Prisma__PassageQuestionClient<$Result.GetResult<Prisma.$PassageQuestionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PassageQuestion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PassageQuestionFindUniqueOrThrowArgs} args - Arguments to find a PassageQuestion
     * @example
     * // Get one PassageQuestion
     * const passageQuestion = await prisma.passageQuestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PassageQuestionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageQuestionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PassageQuestionClient<$Result.GetResult<Prisma.$PassageQuestionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PassageQuestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageQuestionFindFirstArgs} args - Arguments to find a PassageQuestion
     * @example
     * // Get one PassageQuestion
     * const passageQuestion = await prisma.passageQuestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PassageQuestionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageQuestionFindFirstArgs<ExtArgs>>
    ): Prisma__PassageQuestionClient<$Result.GetResult<Prisma.$PassageQuestionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PassageQuestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageQuestionFindFirstOrThrowArgs} args - Arguments to find a PassageQuestion
     * @example
     * // Get one PassageQuestion
     * const passageQuestion = await prisma.passageQuestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PassageQuestionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageQuestionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PassageQuestionClient<$Result.GetResult<Prisma.$PassageQuestionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PassageQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageQuestionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PassageQuestions
     * const passageQuestions = await prisma.passageQuestion.findMany()
     * 
     * // Get first 10 PassageQuestions
     * const passageQuestions = await prisma.passageQuestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passageQuestionWithIdOnly = await prisma.passageQuestion.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PassageQuestionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageQuestionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassageQuestionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PassageQuestion.
     * @param {PassageQuestionCreateArgs} args - Arguments to create a PassageQuestion.
     * @example
     * // Create one PassageQuestion
     * const PassageQuestion = await prisma.passageQuestion.create({
     *   data: {
     *     // ... data to create a PassageQuestion
     *   }
     * })
     * 
    **/
    create<T extends PassageQuestionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PassageQuestionCreateArgs<ExtArgs>>
    ): Prisma__PassageQuestionClient<$Result.GetResult<Prisma.$PassageQuestionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PassageQuestions.
     *     @param {PassageQuestionCreateManyArgs} args - Arguments to create many PassageQuestions.
     *     @example
     *     // Create many PassageQuestions
     *     const passageQuestion = await prisma.passageQuestion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PassageQuestionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageQuestionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PassageQuestion.
     * @param {PassageQuestionDeleteArgs} args - Arguments to delete one PassageQuestion.
     * @example
     * // Delete one PassageQuestion
     * const PassageQuestion = await prisma.passageQuestion.delete({
     *   where: {
     *     // ... filter to delete one PassageQuestion
     *   }
     * })
     * 
    **/
    delete<T extends PassageQuestionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PassageQuestionDeleteArgs<ExtArgs>>
    ): Prisma__PassageQuestionClient<$Result.GetResult<Prisma.$PassageQuestionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PassageQuestion.
     * @param {PassageQuestionUpdateArgs} args - Arguments to update one PassageQuestion.
     * @example
     * // Update one PassageQuestion
     * const passageQuestion = await prisma.passageQuestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PassageQuestionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PassageQuestionUpdateArgs<ExtArgs>>
    ): Prisma__PassageQuestionClient<$Result.GetResult<Prisma.$PassageQuestionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PassageQuestions.
     * @param {PassageQuestionDeleteManyArgs} args - Arguments to filter PassageQuestions to delete.
     * @example
     * // Delete a few PassageQuestions
     * const { count } = await prisma.passageQuestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PassageQuestionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageQuestionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PassageQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageQuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PassageQuestions
     * const passageQuestion = await prisma.passageQuestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PassageQuestionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PassageQuestionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PassageQuestion.
     * @param {PassageQuestionUpsertArgs} args - Arguments to update or create a PassageQuestion.
     * @example
     * // Update or create a PassageQuestion
     * const passageQuestion = await prisma.passageQuestion.upsert({
     *   create: {
     *     // ... data to create a PassageQuestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PassageQuestion we want to update
     *   }
     * })
    **/
    upsert<T extends PassageQuestionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PassageQuestionUpsertArgs<ExtArgs>>
    ): Prisma__PassageQuestionClient<$Result.GetResult<Prisma.$PassageQuestionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PassageQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageQuestionCountArgs} args - Arguments to filter PassageQuestions to count.
     * @example
     * // Count the number of PassageQuestions
     * const count = await prisma.passageQuestion.count({
     *   where: {
     *     // ... the filter for the PassageQuestions we want to count
     *   }
     * })
    **/
    count<T extends PassageQuestionCountArgs>(
      args?: Subset<T, PassageQuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PassageQuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PassageQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PassageQuestionAggregateArgs>(args: Subset<T, PassageQuestionAggregateArgs>): Prisma.PrismaPromise<GetPassageQuestionAggregateType<T>>

    /**
     * Group by PassageQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageQuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PassageQuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PassageQuestionGroupByArgs['orderBy'] }
        : { orderBy?: PassageQuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PassageQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPassageQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PassageQuestion model
   */
  readonly fields: PassageQuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PassageQuestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PassageQuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Passage<T extends PassageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PassageDefaultArgs<ExtArgs>>): Prisma__PassageClient<$Result.GetResult<Prisma.$PassagePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PassageQuestion model
   */ 
  interface PassageQuestionFieldRefs {
    readonly id: FieldRef<"PassageQuestion", 'Int'>
    readonly question1: FieldRef<"PassageQuestion", 'Json'>
    readonly question2: FieldRef<"PassageQuestion", 'Json'>
    readonly question3: FieldRef<"PassageQuestion", 'Json'>
    readonly question4: FieldRef<"PassageQuestion", 'Json'>
    readonly question5: FieldRef<"PassageQuestion", 'Json'>
    readonly question6: FieldRef<"PassageQuestion", 'Json'>
    readonly question7: FieldRef<"PassageQuestion", 'Json'>
    readonly question8: FieldRef<"PassageQuestion", 'Json'>
    readonly question9: FieldRef<"PassageQuestion", 'Json'>
    readonly question10: FieldRef<"PassageQuestion", 'Json'>
    readonly question11: FieldRef<"PassageQuestion", 'Json'>
    readonly question12: FieldRef<"PassageQuestion", 'Json'>
    readonly question13: FieldRef<"PassageQuestion", 'Json'>
    readonly question14: FieldRef<"PassageQuestion", 'Json'>
    readonly question15: FieldRef<"PassageQuestion", 'Json'>
    readonly passageId: FieldRef<"PassageQuestion", 'Int'>
    readonly createdAt: FieldRef<"PassageQuestion", 'DateTime'>
    readonly updatedAt: FieldRef<"PassageQuestion", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * PassageQuestion findUnique
   */
  export type PassageQuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageQuestion
     */
    select?: PassageQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PassageQuestion to fetch.
     */
    where: PassageQuestionWhereUniqueInput
  }


  /**
   * PassageQuestion findUniqueOrThrow
   */
  export type PassageQuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageQuestion
     */
    select?: PassageQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PassageQuestion to fetch.
     */
    where: PassageQuestionWhereUniqueInput
  }


  /**
   * PassageQuestion findFirst
   */
  export type PassageQuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageQuestion
     */
    select?: PassageQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PassageQuestion to fetch.
     */
    where?: PassageQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PassageQuestions to fetch.
     */
    orderBy?: PassageQuestionOrderByWithRelationInput | PassageQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PassageQuestions.
     */
    cursor?: PassageQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PassageQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PassageQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PassageQuestions.
     */
    distinct?: PassageQuestionScalarFieldEnum | PassageQuestionScalarFieldEnum[]
  }


  /**
   * PassageQuestion findFirstOrThrow
   */
  export type PassageQuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageQuestion
     */
    select?: PassageQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PassageQuestion to fetch.
     */
    where?: PassageQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PassageQuestions to fetch.
     */
    orderBy?: PassageQuestionOrderByWithRelationInput | PassageQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PassageQuestions.
     */
    cursor?: PassageQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PassageQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PassageQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PassageQuestions.
     */
    distinct?: PassageQuestionScalarFieldEnum | PassageQuestionScalarFieldEnum[]
  }


  /**
   * PassageQuestion findMany
   */
  export type PassageQuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageQuestion
     */
    select?: PassageQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PassageQuestions to fetch.
     */
    where?: PassageQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PassageQuestions to fetch.
     */
    orderBy?: PassageQuestionOrderByWithRelationInput | PassageQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PassageQuestions.
     */
    cursor?: PassageQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PassageQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PassageQuestions.
     */
    skip?: number
    distinct?: PassageQuestionScalarFieldEnum | PassageQuestionScalarFieldEnum[]
  }


  /**
   * PassageQuestion create
   */
  export type PassageQuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageQuestion
     */
    select?: PassageQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageQuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a PassageQuestion.
     */
    data: XOR<PassageQuestionCreateInput, PassageQuestionUncheckedCreateInput>
  }


  /**
   * PassageQuestion createMany
   */
  export type PassageQuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PassageQuestions.
     */
    data: PassageQuestionCreateManyInput | PassageQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PassageQuestion update
   */
  export type PassageQuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageQuestion
     */
    select?: PassageQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageQuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a PassageQuestion.
     */
    data: XOR<PassageQuestionUpdateInput, PassageQuestionUncheckedUpdateInput>
    /**
     * Choose, which PassageQuestion to update.
     */
    where: PassageQuestionWhereUniqueInput
  }


  /**
   * PassageQuestion updateMany
   */
  export type PassageQuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PassageQuestions.
     */
    data: XOR<PassageQuestionUpdateManyMutationInput, PassageQuestionUncheckedUpdateManyInput>
    /**
     * Filter which PassageQuestions to update
     */
    where?: PassageQuestionWhereInput
  }


  /**
   * PassageQuestion upsert
   */
  export type PassageQuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageQuestion
     */
    select?: PassageQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageQuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the PassageQuestion to update in case it exists.
     */
    where: PassageQuestionWhereUniqueInput
    /**
     * In case the PassageQuestion found by the `where` argument doesn't exist, create a new PassageQuestion with this data.
     */
    create: XOR<PassageQuestionCreateInput, PassageQuestionUncheckedCreateInput>
    /**
     * In case the PassageQuestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PassageQuestionUpdateInput, PassageQuestionUncheckedUpdateInput>
  }


  /**
   * PassageQuestion delete
   */
  export type PassageQuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageQuestion
     */
    select?: PassageQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageQuestionInclude<ExtArgs> | null
    /**
     * Filter which PassageQuestion to delete.
     */
    where: PassageQuestionWhereUniqueInput
  }


  /**
   * PassageQuestion deleteMany
   */
  export type PassageQuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PassageQuestions to delete
     */
    where?: PassageQuestionWhereInput
  }


  /**
   * PassageQuestion without action
   */
  export type PassageQuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageQuestion
     */
    select?: PassageQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageQuestionInclude<ExtArgs> | null
  }



  /**
   * Model PassageSentence
   */

  export type AggregatePassageSentence = {
    _count: PassageSentenceCountAggregateOutputType | null
    _avg: PassageSentenceAvgAggregateOutputType | null
    _sum: PassageSentenceSumAggregateOutputType | null
    _min: PassageSentenceMinAggregateOutputType | null
    _max: PassageSentenceMaxAggregateOutputType | null
  }

  export type PassageSentenceAvgAggregateOutputType = {
    id: number | null
    passageId: number | null
  }

  export type PassageSentenceSumAggregateOutputType = {
    id: number | null
    passageId: number | null
  }

  export type PassageSentenceMinAggregateOutputType = {
    id: number | null
    passageId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PassageSentenceMaxAggregateOutputType = {
    id: number | null
    passageId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PassageSentenceCountAggregateOutputType = {
    id: number
    sentence1: number
    sentence2: number
    sentence3: number
    sentence4: number
    sentence5: number
    sentence6: number
    sentence7: number
    sentence8: number
    sentence9: number
    sentence10: number
    sentence11: number
    sentence12: number
    sentence13: number
    sentence14: number
    sentence15: number
    passageId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PassageSentenceAvgAggregateInputType = {
    id?: true
    passageId?: true
  }

  export type PassageSentenceSumAggregateInputType = {
    id?: true
    passageId?: true
  }

  export type PassageSentenceMinAggregateInputType = {
    id?: true
    passageId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PassageSentenceMaxAggregateInputType = {
    id?: true
    passageId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PassageSentenceCountAggregateInputType = {
    id?: true
    sentence1?: true
    sentence2?: true
    sentence3?: true
    sentence4?: true
    sentence5?: true
    sentence6?: true
    sentence7?: true
    sentence8?: true
    sentence9?: true
    sentence10?: true
    sentence11?: true
    sentence12?: true
    sentence13?: true
    sentence14?: true
    sentence15?: true
    passageId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PassageSentenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PassageSentence to aggregate.
     */
    where?: PassageSentenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PassageSentences to fetch.
     */
    orderBy?: PassageSentenceOrderByWithRelationInput | PassageSentenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PassageSentenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PassageSentences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PassageSentences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PassageSentences
    **/
    _count?: true | PassageSentenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PassageSentenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PassageSentenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PassageSentenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PassageSentenceMaxAggregateInputType
  }

  export type GetPassageSentenceAggregateType<T extends PassageSentenceAggregateArgs> = {
        [P in keyof T & keyof AggregatePassageSentence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePassageSentence[P]>
      : GetScalarType<T[P], AggregatePassageSentence[P]>
  }




  export type PassageSentenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassageSentenceWhereInput
    orderBy?: PassageSentenceOrderByWithAggregationInput | PassageSentenceOrderByWithAggregationInput[]
    by: PassageSentenceScalarFieldEnum[] | PassageSentenceScalarFieldEnum
    having?: PassageSentenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PassageSentenceCountAggregateInputType | true
    _avg?: PassageSentenceAvgAggregateInputType
    _sum?: PassageSentenceSumAggregateInputType
    _min?: PassageSentenceMinAggregateInputType
    _max?: PassageSentenceMaxAggregateInputType
  }

  export type PassageSentenceGroupByOutputType = {
    id: number
    sentence1: JsonValue | null
    sentence2: JsonValue | null
    sentence3: JsonValue | null
    sentence4: JsonValue | null
    sentence5: JsonValue | null
    sentence6: JsonValue | null
    sentence7: JsonValue | null
    sentence8: JsonValue | null
    sentence9: JsonValue | null
    sentence10: JsonValue | null
    sentence11: JsonValue | null
    sentence12: JsonValue | null
    sentence13: JsonValue | null
    sentence14: JsonValue | null
    sentence15: JsonValue | null
    passageId: number
    createdAt: Date
    updatedAt: Date
    _count: PassageSentenceCountAggregateOutputType | null
    _avg: PassageSentenceAvgAggregateOutputType | null
    _sum: PassageSentenceSumAggregateOutputType | null
    _min: PassageSentenceMinAggregateOutputType | null
    _max: PassageSentenceMaxAggregateOutputType | null
  }

  type GetPassageSentenceGroupByPayload<T extends PassageSentenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PassageSentenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PassageSentenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PassageSentenceGroupByOutputType[P]>
            : GetScalarType<T[P], PassageSentenceGroupByOutputType[P]>
        }
      >
    >


  export type PassageSentenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sentence1?: boolean
    sentence2?: boolean
    sentence3?: boolean
    sentence4?: boolean
    sentence5?: boolean
    sentence6?: boolean
    sentence7?: boolean
    sentence8?: boolean
    sentence9?: boolean
    sentence10?: boolean
    sentence11?: boolean
    sentence12?: boolean
    sentence13?: boolean
    sentence14?: boolean
    sentence15?: boolean
    passageId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Passage?: boolean | PassageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passageSentence"]>

  export type PassageSentenceSelectScalar = {
    id?: boolean
    sentence1?: boolean
    sentence2?: boolean
    sentence3?: boolean
    sentence4?: boolean
    sentence5?: boolean
    sentence6?: boolean
    sentence7?: boolean
    sentence8?: boolean
    sentence9?: boolean
    sentence10?: boolean
    sentence11?: boolean
    sentence12?: boolean
    sentence13?: boolean
    sentence14?: boolean
    sentence15?: boolean
    passageId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PassageSentenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Passage?: boolean | PassageDefaultArgs<ExtArgs>
  }


  export type $PassageSentencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PassageSentence"
    objects: {
      Passage: Prisma.$PassagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sentence1: Prisma.JsonValue | null
      sentence2: Prisma.JsonValue | null
      sentence3: Prisma.JsonValue | null
      sentence4: Prisma.JsonValue | null
      sentence5: Prisma.JsonValue | null
      sentence6: Prisma.JsonValue | null
      sentence7: Prisma.JsonValue | null
      sentence8: Prisma.JsonValue | null
      sentence9: Prisma.JsonValue | null
      sentence10: Prisma.JsonValue | null
      sentence11: Prisma.JsonValue | null
      sentence12: Prisma.JsonValue | null
      sentence13: Prisma.JsonValue | null
      sentence14: Prisma.JsonValue | null
      sentence15: Prisma.JsonValue | null
      passageId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["passageSentence"]>
    composites: {}
  }


  type PassageSentenceGetPayload<S extends boolean | null | undefined | PassageSentenceDefaultArgs> = $Result.GetResult<Prisma.$PassageSentencePayload, S>

  type PassageSentenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PassageSentenceFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PassageSentenceCountAggregateInputType | true
    }

  export interface PassageSentenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PassageSentence'], meta: { name: 'PassageSentence' } }
    /**
     * Find zero or one PassageSentence that matches the filter.
     * @param {PassageSentenceFindUniqueArgs} args - Arguments to find a PassageSentence
     * @example
     * // Get one PassageSentence
     * const passageSentence = await prisma.passageSentence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PassageSentenceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PassageSentenceFindUniqueArgs<ExtArgs>>
    ): Prisma__PassageSentenceClient<$Result.GetResult<Prisma.$PassageSentencePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PassageSentence that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PassageSentenceFindUniqueOrThrowArgs} args - Arguments to find a PassageSentence
     * @example
     * // Get one PassageSentence
     * const passageSentence = await prisma.passageSentence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PassageSentenceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageSentenceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PassageSentenceClient<$Result.GetResult<Prisma.$PassageSentencePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PassageSentence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageSentenceFindFirstArgs} args - Arguments to find a PassageSentence
     * @example
     * // Get one PassageSentence
     * const passageSentence = await prisma.passageSentence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PassageSentenceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageSentenceFindFirstArgs<ExtArgs>>
    ): Prisma__PassageSentenceClient<$Result.GetResult<Prisma.$PassageSentencePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PassageSentence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageSentenceFindFirstOrThrowArgs} args - Arguments to find a PassageSentence
     * @example
     * // Get one PassageSentence
     * const passageSentence = await prisma.passageSentence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PassageSentenceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageSentenceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PassageSentenceClient<$Result.GetResult<Prisma.$PassageSentencePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PassageSentences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageSentenceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PassageSentences
     * const passageSentences = await prisma.passageSentence.findMany()
     * 
     * // Get first 10 PassageSentences
     * const passageSentences = await prisma.passageSentence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passageSentenceWithIdOnly = await prisma.passageSentence.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PassageSentenceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageSentenceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassageSentencePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PassageSentence.
     * @param {PassageSentenceCreateArgs} args - Arguments to create a PassageSentence.
     * @example
     * // Create one PassageSentence
     * const PassageSentence = await prisma.passageSentence.create({
     *   data: {
     *     // ... data to create a PassageSentence
     *   }
     * })
     * 
    **/
    create<T extends PassageSentenceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PassageSentenceCreateArgs<ExtArgs>>
    ): Prisma__PassageSentenceClient<$Result.GetResult<Prisma.$PassageSentencePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PassageSentences.
     *     @param {PassageSentenceCreateManyArgs} args - Arguments to create many PassageSentences.
     *     @example
     *     // Create many PassageSentences
     *     const passageSentence = await prisma.passageSentence.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PassageSentenceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageSentenceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PassageSentence.
     * @param {PassageSentenceDeleteArgs} args - Arguments to delete one PassageSentence.
     * @example
     * // Delete one PassageSentence
     * const PassageSentence = await prisma.passageSentence.delete({
     *   where: {
     *     // ... filter to delete one PassageSentence
     *   }
     * })
     * 
    **/
    delete<T extends PassageSentenceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PassageSentenceDeleteArgs<ExtArgs>>
    ): Prisma__PassageSentenceClient<$Result.GetResult<Prisma.$PassageSentencePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PassageSentence.
     * @param {PassageSentenceUpdateArgs} args - Arguments to update one PassageSentence.
     * @example
     * // Update one PassageSentence
     * const passageSentence = await prisma.passageSentence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PassageSentenceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PassageSentenceUpdateArgs<ExtArgs>>
    ): Prisma__PassageSentenceClient<$Result.GetResult<Prisma.$PassageSentencePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PassageSentences.
     * @param {PassageSentenceDeleteManyArgs} args - Arguments to filter PassageSentences to delete.
     * @example
     * // Delete a few PassageSentences
     * const { count } = await prisma.passageSentence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PassageSentenceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageSentenceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PassageSentences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageSentenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PassageSentences
     * const passageSentence = await prisma.passageSentence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PassageSentenceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PassageSentenceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PassageSentence.
     * @param {PassageSentenceUpsertArgs} args - Arguments to update or create a PassageSentence.
     * @example
     * // Update or create a PassageSentence
     * const passageSentence = await prisma.passageSentence.upsert({
     *   create: {
     *     // ... data to create a PassageSentence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PassageSentence we want to update
     *   }
     * })
    **/
    upsert<T extends PassageSentenceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PassageSentenceUpsertArgs<ExtArgs>>
    ): Prisma__PassageSentenceClient<$Result.GetResult<Prisma.$PassageSentencePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PassageSentences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageSentenceCountArgs} args - Arguments to filter PassageSentences to count.
     * @example
     * // Count the number of PassageSentences
     * const count = await prisma.passageSentence.count({
     *   where: {
     *     // ... the filter for the PassageSentences we want to count
     *   }
     * })
    **/
    count<T extends PassageSentenceCountArgs>(
      args?: Subset<T, PassageSentenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PassageSentenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PassageSentence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageSentenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PassageSentenceAggregateArgs>(args: Subset<T, PassageSentenceAggregateArgs>): Prisma.PrismaPromise<GetPassageSentenceAggregateType<T>>

    /**
     * Group by PassageSentence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageSentenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PassageSentenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PassageSentenceGroupByArgs['orderBy'] }
        : { orderBy?: PassageSentenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PassageSentenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPassageSentenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PassageSentence model
   */
  readonly fields: PassageSentenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PassageSentence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PassageSentenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Passage<T extends PassageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PassageDefaultArgs<ExtArgs>>): Prisma__PassageClient<$Result.GetResult<Prisma.$PassagePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PassageSentence model
   */ 
  interface PassageSentenceFieldRefs {
    readonly id: FieldRef<"PassageSentence", 'Int'>
    readonly sentence1: FieldRef<"PassageSentence", 'Json'>
    readonly sentence2: FieldRef<"PassageSentence", 'Json'>
    readonly sentence3: FieldRef<"PassageSentence", 'Json'>
    readonly sentence4: FieldRef<"PassageSentence", 'Json'>
    readonly sentence5: FieldRef<"PassageSentence", 'Json'>
    readonly sentence6: FieldRef<"PassageSentence", 'Json'>
    readonly sentence7: FieldRef<"PassageSentence", 'Json'>
    readonly sentence8: FieldRef<"PassageSentence", 'Json'>
    readonly sentence9: FieldRef<"PassageSentence", 'Json'>
    readonly sentence10: FieldRef<"PassageSentence", 'Json'>
    readonly sentence11: FieldRef<"PassageSentence", 'Json'>
    readonly sentence12: FieldRef<"PassageSentence", 'Json'>
    readonly sentence13: FieldRef<"PassageSentence", 'Json'>
    readonly sentence14: FieldRef<"PassageSentence", 'Json'>
    readonly sentence15: FieldRef<"PassageSentence", 'Json'>
    readonly passageId: FieldRef<"PassageSentence", 'Int'>
    readonly createdAt: FieldRef<"PassageSentence", 'DateTime'>
    readonly updatedAt: FieldRef<"PassageSentence", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * PassageSentence findUnique
   */
  export type PassageSentenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageSentence
     */
    select?: PassageSentenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageSentenceInclude<ExtArgs> | null
    /**
     * Filter, which PassageSentence to fetch.
     */
    where: PassageSentenceWhereUniqueInput
  }


  /**
   * PassageSentence findUniqueOrThrow
   */
  export type PassageSentenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageSentence
     */
    select?: PassageSentenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageSentenceInclude<ExtArgs> | null
    /**
     * Filter, which PassageSentence to fetch.
     */
    where: PassageSentenceWhereUniqueInput
  }


  /**
   * PassageSentence findFirst
   */
  export type PassageSentenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageSentence
     */
    select?: PassageSentenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageSentenceInclude<ExtArgs> | null
    /**
     * Filter, which PassageSentence to fetch.
     */
    where?: PassageSentenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PassageSentences to fetch.
     */
    orderBy?: PassageSentenceOrderByWithRelationInput | PassageSentenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PassageSentences.
     */
    cursor?: PassageSentenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PassageSentences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PassageSentences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PassageSentences.
     */
    distinct?: PassageSentenceScalarFieldEnum | PassageSentenceScalarFieldEnum[]
  }


  /**
   * PassageSentence findFirstOrThrow
   */
  export type PassageSentenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageSentence
     */
    select?: PassageSentenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageSentenceInclude<ExtArgs> | null
    /**
     * Filter, which PassageSentence to fetch.
     */
    where?: PassageSentenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PassageSentences to fetch.
     */
    orderBy?: PassageSentenceOrderByWithRelationInput | PassageSentenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PassageSentences.
     */
    cursor?: PassageSentenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PassageSentences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PassageSentences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PassageSentences.
     */
    distinct?: PassageSentenceScalarFieldEnum | PassageSentenceScalarFieldEnum[]
  }


  /**
   * PassageSentence findMany
   */
  export type PassageSentenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageSentence
     */
    select?: PassageSentenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageSentenceInclude<ExtArgs> | null
    /**
     * Filter, which PassageSentences to fetch.
     */
    where?: PassageSentenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PassageSentences to fetch.
     */
    orderBy?: PassageSentenceOrderByWithRelationInput | PassageSentenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PassageSentences.
     */
    cursor?: PassageSentenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PassageSentences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PassageSentences.
     */
    skip?: number
    distinct?: PassageSentenceScalarFieldEnum | PassageSentenceScalarFieldEnum[]
  }


  /**
   * PassageSentence create
   */
  export type PassageSentenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageSentence
     */
    select?: PassageSentenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageSentenceInclude<ExtArgs> | null
    /**
     * The data needed to create a PassageSentence.
     */
    data: XOR<PassageSentenceCreateInput, PassageSentenceUncheckedCreateInput>
  }


  /**
   * PassageSentence createMany
   */
  export type PassageSentenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PassageSentences.
     */
    data: PassageSentenceCreateManyInput | PassageSentenceCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PassageSentence update
   */
  export type PassageSentenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageSentence
     */
    select?: PassageSentenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageSentenceInclude<ExtArgs> | null
    /**
     * The data needed to update a PassageSentence.
     */
    data: XOR<PassageSentenceUpdateInput, PassageSentenceUncheckedUpdateInput>
    /**
     * Choose, which PassageSentence to update.
     */
    where: PassageSentenceWhereUniqueInput
  }


  /**
   * PassageSentence updateMany
   */
  export type PassageSentenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PassageSentences.
     */
    data: XOR<PassageSentenceUpdateManyMutationInput, PassageSentenceUncheckedUpdateManyInput>
    /**
     * Filter which PassageSentences to update
     */
    where?: PassageSentenceWhereInput
  }


  /**
   * PassageSentence upsert
   */
  export type PassageSentenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageSentence
     */
    select?: PassageSentenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageSentenceInclude<ExtArgs> | null
    /**
     * The filter to search for the PassageSentence to update in case it exists.
     */
    where: PassageSentenceWhereUniqueInput
    /**
     * In case the PassageSentence found by the `where` argument doesn't exist, create a new PassageSentence with this data.
     */
    create: XOR<PassageSentenceCreateInput, PassageSentenceUncheckedCreateInput>
    /**
     * In case the PassageSentence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PassageSentenceUpdateInput, PassageSentenceUncheckedUpdateInput>
  }


  /**
   * PassageSentence delete
   */
  export type PassageSentenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageSentence
     */
    select?: PassageSentenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageSentenceInclude<ExtArgs> | null
    /**
     * Filter which PassageSentence to delete.
     */
    where: PassageSentenceWhereUniqueInput
  }


  /**
   * PassageSentence deleteMany
   */
  export type PassageSentenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PassageSentences to delete
     */
    where?: PassageSentenceWhereInput
  }


  /**
   * PassageSentence without action
   */
  export type PassageSentenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageSentence
     */
    select?: PassageSentenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PassageSentenceInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdminUserScalarFieldEnum: {
    id: 'id',
    role: 'role',
    adminName: 'adminName',
    adminEmail: 'adminEmail',
    password: 'password'
  };

  export type AdminUserScalarFieldEnum = (typeof AdminUserScalarFieldEnum)[keyof typeof AdminUserScalarFieldEnum]


  export const BlogScalarFieldEnum: {
    id: 'id',
    categoryId: 'categoryId',
    published: 'published',
    name: 'name',
    title: 'title',
    keywordList: 'keywordList',
    description: 'description'
  };

  export type BlogScalarFieldEnum = (typeof BlogScalarFieldEnum)[keyof typeof BlogScalarFieldEnum]


  export const BlogCategoryScalarFieldEnum: {
    id: 'id',
    category: 'category'
  };

  export type BlogCategoryScalarFieldEnum = (typeof BlogCategoryScalarFieldEnum)[keyof typeof BlogCategoryScalarFieldEnum]


  export const BlogUniversityScalarFieldEnum: {
    id: 'id',
    schoolName: 'schoolName',
    publicSchool: 'publicSchool',
    region: 'region',
    eikenUsable: 'eikenUsable',
    schoolUrl: 'schoolUrl'
  };

  export type BlogUniversityScalarFieldEnum = (typeof BlogUniversityScalarFieldEnum)[keyof typeof BlogUniversityScalarFieldEnum]


  export const BlogUniversityDepartmentScalarFieldEnum: {
    id: 'id',
    blogId: 'blogId',
    universityId: 'universityId',
    name: 'name',
    rikei: 'rikei',
    examType: 'examType',
    articleYear: 'articleYear'
  };

  export type BlogUniversityDepartmentScalarFieldEnum = (typeof BlogUniversityDepartmentScalarFieldEnum)[keyof typeof BlogUniversityDepartmentScalarFieldEnum]


  export const GradeScalarFieldEnum: {
    id: 'id',
    grade: 'grade',
    gradeJp: 'gradeJp'
  };

  export type GradeScalarFieldEnum = (typeof GradeScalarFieldEnum)[keyof typeof GradeScalarFieldEnum]


  export const GrammarScalarFieldEnum: {
    id: 'id',
    unit: 'unit',
    tangen: 'tangen',
    localId: 'localId',
    gradeId: 'gradeId'
  };

  export type GrammarScalarFieldEnum = (typeof GrammarScalarFieldEnum)[keyof typeof GrammarScalarFieldEnum]


  export const GrammarQuestionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    sentence: 'sentence',
    question: 'question',
    answer: 'answer',
    explanation: 'explanation',
    localId: 'localId',
    grammarId: 'grammarId'
  };

  export type GrammarQuestionScalarFieldEnum = (typeof GrammarQuestionScalarFieldEnum)[keyof typeof GrammarQuestionScalarFieldEnum]


  export const LikeGrammarQuestionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    grammarQuestionId: 'grammarQuestionId',
    createdAt: 'createdAt'
  };

  export type LikeGrammarQuestionScalarFieldEnum = (typeof LikeGrammarQuestionScalarFieldEnum)[keyof typeof LikeGrammarQuestionScalarFieldEnum]


  export const LikeListeningScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    listeningId: 'listeningId',
    createdAt: 'createdAt'
  };

  export type LikeListeningScalarFieldEnum = (typeof LikeListeningScalarFieldEnum)[keyof typeof LikeListeningScalarFieldEnum]


  export const ListeningScalarFieldEnum: {
    id: 'id',
    title: 'title',
    url: 'url',
    lap: 'lap',
    localId: 'localId'
  };

  export type ListeningScalarFieldEnum = (typeof ListeningScalarFieldEnum)[keyof typeof ListeningScalarFieldEnum]


  export const LogScalarFieldEnum: {
    id: 'id',
    about: 'about',
    level: 'level',
    message: 'message',
    meta: 'meta'
  };

  export type LogScalarFieldEnum = (typeof LogScalarFieldEnum)[keyof typeof LogScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    checkoutType: 'checkoutType',
    image: 'image',
    priceId: 'priceId',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ProductReviewScalarFieldEnum: {
    id: 'id',
    text: 'text',
    reviewer: 'reviewer',
    rating: 'rating',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    productId: 'productId',
    checkoutId: 'checkoutId'
  };

  export type ProductReviewScalarFieldEnum = (typeof ProductReviewScalarFieldEnum)[keyof typeof ProductReviewScalarFieldEnum]


  export const OneTimePasswordScalarFieldEnum: {
    id: 'id',
    usage: 'usage',
    oneTimePassword: 'oneTimePassword',
    validated: 'validated',
    updatedAt: 'updatedAt',
    userId: 'userId',
    adminUserId: 'adminUserId'
  };

  export type OneTimePasswordScalarFieldEnum = (typeof OneTimePasswordScalarFieldEnum)[keyof typeof OneTimePasswordScalarFieldEnum]


  export const StripeCheckoutScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    productId: 'productId',
    paymentId: 'paymentId',
    name: 'name',
    email: 'email',
    postCode: 'postCode',
    address: 'address',
    serialNumber: 'serialNumber',
    status: 'status',
    manager: 'manager',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StripeCheckoutScalarFieldEnum = (typeof StripeCheckoutScalarFieldEnum)[keyof typeof StripeCheckoutScalarFieldEnum]


  export const StripeCustomerScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    userId: 'userId'
  };

  export type StripeCustomerScalarFieldEnum = (typeof StripeCustomerScalarFieldEnum)[keyof typeof StripeCustomerScalarFieldEnum]


  export const StripeSubscriptionScalarFieldEnum: {
    id: 'id',
    subscriptionId: 'subscriptionId',
    plan: 'plan',
    status: 'status',
    periodStart: 'periodStart',
    periodEnd: 'periodEnd',
    cancelAt: 'cancelAt',
    cancelAtPeriodEnd: 'cancelAtPeriodEnd',
    stripeCustomerId: 'stripeCustomerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StripeSubscriptionScalarFieldEnum = (typeof StripeSubscriptionScalarFieldEnum)[keyof typeof StripeSubscriptionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    userName: 'userName',
    gender: 'gender',
    country: 'country',
    city: 'city',
    email: 'email',
    birthYear: 'birthYear',
    activated: 'activated',
    invited: 'invited',
    invitedUntil: 'invitedUntil',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PassageScalarFieldEnum: {
    id: 'id',
    level: 'level',
    title: 'title',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PassageScalarFieldEnum = (typeof PassageScalarFieldEnum)[keyof typeof PassageScalarFieldEnum]


  export const PassageQuestionScalarFieldEnum: {
    id: 'id',
    question1: 'question1',
    question2: 'question2',
    question3: 'question3',
    question4: 'question4',
    question5: 'question5',
    question6: 'question6',
    question7: 'question7',
    question8: 'question8',
    question9: 'question9',
    question10: 'question10',
    question11: 'question11',
    question12: 'question12',
    question13: 'question13',
    question14: 'question14',
    question15: 'question15',
    passageId: 'passageId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PassageQuestionScalarFieldEnum = (typeof PassageQuestionScalarFieldEnum)[keyof typeof PassageQuestionScalarFieldEnum]


  export const PassageSentenceScalarFieldEnum: {
    id: 'id',
    sentence1: 'sentence1',
    sentence2: 'sentence2',
    sentence3: 'sentence3',
    sentence4: 'sentence4',
    sentence5: 'sentence5',
    sentence6: 'sentence6',
    sentence7: 'sentence7',
    sentence8: 'sentence8',
    sentence9: 'sentence9',
    sentence10: 'sentence10',
    sentence11: 'sentence11',
    sentence12: 'sentence12',
    sentence13: 'sentence13',
    sentence14: 'sentence14',
    sentence15: 'sentence15',
    passageId: 'passageId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PassageSentenceScalarFieldEnum = (typeof PassageSentenceScalarFieldEnum)[keyof typeof PassageSentenceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'AdminRole'
   */
  export type EnumAdminRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminRole'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'LogAbout'
   */
  export type EnumLogAboutFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogAbout'>
    


  /**
   * Reference to a field of type 'LogLevel'
   */
  export type EnumLogLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogLevel'>
    


  /**
   * Reference to a field of type 'checkoutType'
   */
  export type EnumcheckoutTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'checkoutType'>
    


  /**
   * Reference to a field of type 'OneTimeNumberUsage'
   */
  export type EnumOneTimeNumberUsageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OneTimeNumberUsage'>
    


  /**
   * Reference to a field of type 'checkoutStatus'
   */
  export type EnumcheckoutStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'checkoutStatus'>
    


  /**
   * Reference to a field of type 'subscriptionStatus'
   */
  export type EnumsubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'subscriptionStatus'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'PassageLevel'
   */
  export type EnumPassageLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PassageLevel'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type AdminUserWhereInput = {
    AND?: AdminUserWhereInput | AdminUserWhereInput[]
    OR?: AdminUserWhereInput[]
    NOT?: AdminUserWhereInput | AdminUserWhereInput[]
    id?: StringFilter<"AdminUser"> | string
    role?: EnumAdminRoleFilter<"AdminUser"> | $Enums.AdminRole
    adminName?: StringFilter<"AdminUser"> | string
    adminEmail?: StringFilter<"AdminUser"> | string
    password?: StringFilter<"AdminUser"> | string
    OneTimePassword?: OneTimePasswordListRelationFilter
  }

  export type AdminUserOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    adminName?: SortOrder
    adminEmail?: SortOrder
    password?: SortOrder
    OneTimePassword?: OneTimePasswordOrderByRelationAggregateInput
  }

  export type AdminUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    adminEmail?: string
    AND?: AdminUserWhereInput | AdminUserWhereInput[]
    OR?: AdminUserWhereInput[]
    NOT?: AdminUserWhereInput | AdminUserWhereInput[]
    role?: EnumAdminRoleFilter<"AdminUser"> | $Enums.AdminRole
    adminName?: StringFilter<"AdminUser"> | string
    password?: StringFilter<"AdminUser"> | string
    OneTimePassword?: OneTimePasswordListRelationFilter
  }, "id" | "adminEmail">

  export type AdminUserOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    adminName?: SortOrder
    adminEmail?: SortOrder
    password?: SortOrder
    _count?: AdminUserCountOrderByAggregateInput
    _max?: AdminUserMaxOrderByAggregateInput
    _min?: AdminUserMinOrderByAggregateInput
  }

  export type AdminUserScalarWhereWithAggregatesInput = {
    AND?: AdminUserScalarWhereWithAggregatesInput | AdminUserScalarWhereWithAggregatesInput[]
    OR?: AdminUserScalarWhereWithAggregatesInput[]
    NOT?: AdminUserScalarWhereWithAggregatesInput | AdminUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdminUser"> | string
    role?: EnumAdminRoleWithAggregatesFilter<"AdminUser"> | $Enums.AdminRole
    adminName?: StringWithAggregatesFilter<"AdminUser"> | string
    adminEmail?: StringWithAggregatesFilter<"AdminUser"> | string
    password?: StringWithAggregatesFilter<"AdminUser"> | string
  }

  export type BlogWhereInput = {
    AND?: BlogWhereInput | BlogWhereInput[]
    OR?: BlogWhereInput[]
    NOT?: BlogWhereInput | BlogWhereInput[]
    id?: IntFilter<"Blog"> | number
    categoryId?: IntFilter<"Blog"> | number
    published?: BoolFilter<"Blog"> | boolean
    name?: StringFilter<"Blog"> | string
    title?: StringFilter<"Blog"> | string
    keywordList?: StringFilter<"Blog"> | string
    description?: StringFilter<"Blog"> | string
    Category?: XOR<BlogCategoryRelationFilter, BlogCategoryWhereInput>
    BlogUniversityDepartment?: BlogUniversityDepartmentListRelationFilter
  }

  export type BlogOrderByWithRelationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    published?: SortOrder
    name?: SortOrder
    title?: SortOrder
    keywordList?: SortOrder
    description?: SortOrder
    Category?: BlogCategoryOrderByWithRelationInput
    BlogUniversityDepartment?: BlogUniversityDepartmentOrderByRelationAggregateInput
  }

  export type BlogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BlogWhereInput | BlogWhereInput[]
    OR?: BlogWhereInput[]
    NOT?: BlogWhereInput | BlogWhereInput[]
    categoryId?: IntFilter<"Blog"> | number
    published?: BoolFilter<"Blog"> | boolean
    name?: StringFilter<"Blog"> | string
    title?: StringFilter<"Blog"> | string
    keywordList?: StringFilter<"Blog"> | string
    description?: StringFilter<"Blog"> | string
    Category?: XOR<BlogCategoryRelationFilter, BlogCategoryWhereInput>
    BlogUniversityDepartment?: BlogUniversityDepartmentListRelationFilter
  }, "id">

  export type BlogOrderByWithAggregationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    published?: SortOrder
    name?: SortOrder
    title?: SortOrder
    keywordList?: SortOrder
    description?: SortOrder
    _count?: BlogCountOrderByAggregateInput
    _avg?: BlogAvgOrderByAggregateInput
    _max?: BlogMaxOrderByAggregateInput
    _min?: BlogMinOrderByAggregateInput
    _sum?: BlogSumOrderByAggregateInput
  }

  export type BlogScalarWhereWithAggregatesInput = {
    AND?: BlogScalarWhereWithAggregatesInput | BlogScalarWhereWithAggregatesInput[]
    OR?: BlogScalarWhereWithAggregatesInput[]
    NOT?: BlogScalarWhereWithAggregatesInput | BlogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Blog"> | number
    categoryId?: IntWithAggregatesFilter<"Blog"> | number
    published?: BoolWithAggregatesFilter<"Blog"> | boolean
    name?: StringWithAggregatesFilter<"Blog"> | string
    title?: StringWithAggregatesFilter<"Blog"> | string
    keywordList?: StringWithAggregatesFilter<"Blog"> | string
    description?: StringWithAggregatesFilter<"Blog"> | string
  }

  export type BlogCategoryWhereInput = {
    AND?: BlogCategoryWhereInput | BlogCategoryWhereInput[]
    OR?: BlogCategoryWhereInput[]
    NOT?: BlogCategoryWhereInput | BlogCategoryWhereInput[]
    id?: IntFilter<"BlogCategory"> | number
    category?: StringFilter<"BlogCategory"> | string
    Blog?: BlogListRelationFilter
  }

  export type BlogCategoryOrderByWithRelationInput = {
    id?: SortOrder
    category?: SortOrder
    Blog?: BlogOrderByRelationAggregateInput
  }

  export type BlogCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BlogCategoryWhereInput | BlogCategoryWhereInput[]
    OR?: BlogCategoryWhereInput[]
    NOT?: BlogCategoryWhereInput | BlogCategoryWhereInput[]
    category?: StringFilter<"BlogCategory"> | string
    Blog?: BlogListRelationFilter
  }, "id">

  export type BlogCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    category?: SortOrder
    _count?: BlogCategoryCountOrderByAggregateInput
    _avg?: BlogCategoryAvgOrderByAggregateInput
    _max?: BlogCategoryMaxOrderByAggregateInput
    _min?: BlogCategoryMinOrderByAggregateInput
    _sum?: BlogCategorySumOrderByAggregateInput
  }

  export type BlogCategoryScalarWhereWithAggregatesInput = {
    AND?: BlogCategoryScalarWhereWithAggregatesInput | BlogCategoryScalarWhereWithAggregatesInput[]
    OR?: BlogCategoryScalarWhereWithAggregatesInput[]
    NOT?: BlogCategoryScalarWhereWithAggregatesInput | BlogCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BlogCategory"> | number
    category?: StringWithAggregatesFilter<"BlogCategory"> | string
  }

  export type BlogUniversityWhereInput = {
    AND?: BlogUniversityWhereInput | BlogUniversityWhereInput[]
    OR?: BlogUniversityWhereInput[]
    NOT?: BlogUniversityWhereInput | BlogUniversityWhereInput[]
    id?: IntFilter<"BlogUniversity"> | number
    schoolName?: StringFilter<"BlogUniversity"> | string
    publicSchool?: BoolFilter<"BlogUniversity"> | boolean
    region?: IntFilter<"BlogUniversity"> | number
    eikenUsable?: BoolFilter<"BlogUniversity"> | boolean
    schoolUrl?: StringNullableFilter<"BlogUniversity"> | string | null
    BlogUniversityDepartment?: BlogUniversityDepartmentListRelationFilter
  }

  export type BlogUniversityOrderByWithRelationInput = {
    id?: SortOrder
    schoolName?: SortOrder
    publicSchool?: SortOrder
    region?: SortOrder
    eikenUsable?: SortOrder
    schoolUrl?: SortOrderInput | SortOrder
    BlogUniversityDepartment?: BlogUniversityDepartmentOrderByRelationAggregateInput
  }

  export type BlogUniversityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BlogUniversityWhereInput | BlogUniversityWhereInput[]
    OR?: BlogUniversityWhereInput[]
    NOT?: BlogUniversityWhereInput | BlogUniversityWhereInput[]
    schoolName?: StringFilter<"BlogUniversity"> | string
    publicSchool?: BoolFilter<"BlogUniversity"> | boolean
    region?: IntFilter<"BlogUniversity"> | number
    eikenUsable?: BoolFilter<"BlogUniversity"> | boolean
    schoolUrl?: StringNullableFilter<"BlogUniversity"> | string | null
    BlogUniversityDepartment?: BlogUniversityDepartmentListRelationFilter
  }, "id">

  export type BlogUniversityOrderByWithAggregationInput = {
    id?: SortOrder
    schoolName?: SortOrder
    publicSchool?: SortOrder
    region?: SortOrder
    eikenUsable?: SortOrder
    schoolUrl?: SortOrderInput | SortOrder
    _count?: BlogUniversityCountOrderByAggregateInput
    _avg?: BlogUniversityAvgOrderByAggregateInput
    _max?: BlogUniversityMaxOrderByAggregateInput
    _min?: BlogUniversityMinOrderByAggregateInput
    _sum?: BlogUniversitySumOrderByAggregateInput
  }

  export type BlogUniversityScalarWhereWithAggregatesInput = {
    AND?: BlogUniversityScalarWhereWithAggregatesInput | BlogUniversityScalarWhereWithAggregatesInput[]
    OR?: BlogUniversityScalarWhereWithAggregatesInput[]
    NOT?: BlogUniversityScalarWhereWithAggregatesInput | BlogUniversityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BlogUniversity"> | number
    schoolName?: StringWithAggregatesFilter<"BlogUniversity"> | string
    publicSchool?: BoolWithAggregatesFilter<"BlogUniversity"> | boolean
    region?: IntWithAggregatesFilter<"BlogUniversity"> | number
    eikenUsable?: BoolWithAggregatesFilter<"BlogUniversity"> | boolean
    schoolUrl?: StringNullableWithAggregatesFilter<"BlogUniversity"> | string | null
  }

  export type BlogUniversityDepartmentWhereInput = {
    AND?: BlogUniversityDepartmentWhereInput | BlogUniversityDepartmentWhereInput[]
    OR?: BlogUniversityDepartmentWhereInput[]
    NOT?: BlogUniversityDepartmentWhereInput | BlogUniversityDepartmentWhereInput[]
    id?: IntFilter<"BlogUniversityDepartment"> | number
    blogId?: IntNullableFilter<"BlogUniversityDepartment"> | number | null
    universityId?: IntFilter<"BlogUniversityDepartment"> | number
    name?: StringFilter<"BlogUniversityDepartment"> | string
    rikei?: BoolFilter<"BlogUniversityDepartment"> | boolean
    examType?: IntNullableFilter<"BlogUniversityDepartment"> | number | null
    articleYear?: StringNullableFilter<"BlogUniversityDepartment"> | string | null
    Blog?: XOR<BlogNullableRelationFilter, BlogWhereInput> | null
    University?: XOR<BlogUniversityRelationFilter, BlogUniversityWhereInput>
  }

  export type BlogUniversityDepartmentOrderByWithRelationInput = {
    id?: SortOrder
    blogId?: SortOrderInput | SortOrder
    universityId?: SortOrder
    name?: SortOrder
    rikei?: SortOrder
    examType?: SortOrderInput | SortOrder
    articleYear?: SortOrderInput | SortOrder
    Blog?: BlogOrderByWithRelationInput
    University?: BlogUniversityOrderByWithRelationInput
  }

  export type BlogUniversityDepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BlogUniversityDepartmentWhereInput | BlogUniversityDepartmentWhereInput[]
    OR?: BlogUniversityDepartmentWhereInput[]
    NOT?: BlogUniversityDepartmentWhereInput | BlogUniversityDepartmentWhereInput[]
    blogId?: IntNullableFilter<"BlogUniversityDepartment"> | number | null
    universityId?: IntFilter<"BlogUniversityDepartment"> | number
    name?: StringFilter<"BlogUniversityDepartment"> | string
    rikei?: BoolFilter<"BlogUniversityDepartment"> | boolean
    examType?: IntNullableFilter<"BlogUniversityDepartment"> | number | null
    articleYear?: StringNullableFilter<"BlogUniversityDepartment"> | string | null
    Blog?: XOR<BlogNullableRelationFilter, BlogWhereInput> | null
    University?: XOR<BlogUniversityRelationFilter, BlogUniversityWhereInput>
  }, "id">

  export type BlogUniversityDepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    blogId?: SortOrderInput | SortOrder
    universityId?: SortOrder
    name?: SortOrder
    rikei?: SortOrder
    examType?: SortOrderInput | SortOrder
    articleYear?: SortOrderInput | SortOrder
    _count?: BlogUniversityDepartmentCountOrderByAggregateInput
    _avg?: BlogUniversityDepartmentAvgOrderByAggregateInput
    _max?: BlogUniversityDepartmentMaxOrderByAggregateInput
    _min?: BlogUniversityDepartmentMinOrderByAggregateInput
    _sum?: BlogUniversityDepartmentSumOrderByAggregateInput
  }

  export type BlogUniversityDepartmentScalarWhereWithAggregatesInput = {
    AND?: BlogUniversityDepartmentScalarWhereWithAggregatesInput | BlogUniversityDepartmentScalarWhereWithAggregatesInput[]
    OR?: BlogUniversityDepartmentScalarWhereWithAggregatesInput[]
    NOT?: BlogUniversityDepartmentScalarWhereWithAggregatesInput | BlogUniversityDepartmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BlogUniversityDepartment"> | number
    blogId?: IntNullableWithAggregatesFilter<"BlogUniversityDepartment"> | number | null
    universityId?: IntWithAggregatesFilter<"BlogUniversityDepartment"> | number
    name?: StringWithAggregatesFilter<"BlogUniversityDepartment"> | string
    rikei?: BoolWithAggregatesFilter<"BlogUniversityDepartment"> | boolean
    examType?: IntNullableWithAggregatesFilter<"BlogUniversityDepartment"> | number | null
    articleYear?: StringNullableWithAggregatesFilter<"BlogUniversityDepartment"> | string | null
  }

  export type GradeWhereInput = {
    AND?: GradeWhereInput | GradeWhereInput[]
    OR?: GradeWhereInput[]
    NOT?: GradeWhereInput | GradeWhereInput[]
    id?: IntFilter<"Grade"> | number
    grade?: StringFilter<"Grade"> | string
    gradeJp?: StringFilter<"Grade"> | string
    Grammar?: GrammarListRelationFilter
  }

  export type GradeOrderByWithRelationInput = {
    id?: SortOrder
    grade?: SortOrder
    gradeJp?: SortOrder
    Grammar?: GrammarOrderByRelationAggregateInput
  }

  export type GradeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GradeWhereInput | GradeWhereInput[]
    OR?: GradeWhereInput[]
    NOT?: GradeWhereInput | GradeWhereInput[]
    grade?: StringFilter<"Grade"> | string
    gradeJp?: StringFilter<"Grade"> | string
    Grammar?: GrammarListRelationFilter
  }, "id">

  export type GradeOrderByWithAggregationInput = {
    id?: SortOrder
    grade?: SortOrder
    gradeJp?: SortOrder
    _count?: GradeCountOrderByAggregateInput
    _avg?: GradeAvgOrderByAggregateInput
    _max?: GradeMaxOrderByAggregateInput
    _min?: GradeMinOrderByAggregateInput
    _sum?: GradeSumOrderByAggregateInput
  }

  export type GradeScalarWhereWithAggregatesInput = {
    AND?: GradeScalarWhereWithAggregatesInput | GradeScalarWhereWithAggregatesInput[]
    OR?: GradeScalarWhereWithAggregatesInput[]
    NOT?: GradeScalarWhereWithAggregatesInput | GradeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Grade"> | number
    grade?: StringWithAggregatesFilter<"Grade"> | string
    gradeJp?: StringWithAggregatesFilter<"Grade"> | string
  }

  export type GrammarWhereInput = {
    AND?: GrammarWhereInput | GrammarWhereInput[]
    OR?: GrammarWhereInput[]
    NOT?: GrammarWhereInput | GrammarWhereInput[]
    id?: IntFilter<"Grammar"> | number
    unit?: StringFilter<"Grammar"> | string
    tangen?: StringFilter<"Grammar"> | string
    localId?: IntFilter<"Grammar"> | number
    gradeId?: IntFilter<"Grammar"> | number
    Grade?: XOR<GradeRelationFilter, GradeWhereInput>
    GrammarQuestion?: GrammarQuestionListRelationFilter
  }

  export type GrammarOrderByWithRelationInput = {
    id?: SortOrder
    unit?: SortOrder
    tangen?: SortOrder
    localId?: SortOrder
    gradeId?: SortOrder
    Grade?: GradeOrderByWithRelationInput
    GrammarQuestion?: GrammarQuestionOrderByRelationAggregateInput
  }

  export type GrammarWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GrammarWhereInput | GrammarWhereInput[]
    OR?: GrammarWhereInput[]
    NOT?: GrammarWhereInput | GrammarWhereInput[]
    unit?: StringFilter<"Grammar"> | string
    tangen?: StringFilter<"Grammar"> | string
    localId?: IntFilter<"Grammar"> | number
    gradeId?: IntFilter<"Grammar"> | number
    Grade?: XOR<GradeRelationFilter, GradeWhereInput>
    GrammarQuestion?: GrammarQuestionListRelationFilter
  }, "id">

  export type GrammarOrderByWithAggregationInput = {
    id?: SortOrder
    unit?: SortOrder
    tangen?: SortOrder
    localId?: SortOrder
    gradeId?: SortOrder
    _count?: GrammarCountOrderByAggregateInput
    _avg?: GrammarAvgOrderByAggregateInput
    _max?: GrammarMaxOrderByAggregateInput
    _min?: GrammarMinOrderByAggregateInput
    _sum?: GrammarSumOrderByAggregateInput
  }

  export type GrammarScalarWhereWithAggregatesInput = {
    AND?: GrammarScalarWhereWithAggregatesInput | GrammarScalarWhereWithAggregatesInput[]
    OR?: GrammarScalarWhereWithAggregatesInput[]
    NOT?: GrammarScalarWhereWithAggregatesInput | GrammarScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Grammar"> | number
    unit?: StringWithAggregatesFilter<"Grammar"> | string
    tangen?: StringWithAggregatesFilter<"Grammar"> | string
    localId?: IntWithAggregatesFilter<"Grammar"> | number
    gradeId?: IntWithAggregatesFilter<"Grammar"> | number
  }

  export type GrammarQuestionWhereInput = {
    AND?: GrammarQuestionWhereInput | GrammarQuestionWhereInput[]
    OR?: GrammarQuestionWhereInput[]
    NOT?: GrammarQuestionWhereInput | GrammarQuestionWhereInput[]
    id?: IntFilter<"GrammarQuestion"> | number
    title?: StringFilter<"GrammarQuestion"> | string
    sentence?: StringFilter<"GrammarQuestion"> | string
    question?: JsonFilter<"GrammarQuestion">
    answer?: StringFilter<"GrammarQuestion"> | string
    explanation?: StringFilter<"GrammarQuestion"> | string
    localId?: IntFilter<"GrammarQuestion"> | number
    grammarId?: IntFilter<"GrammarQuestion"> | number
    Grammar?: XOR<GrammarRelationFilter, GrammarWhereInput>
    LikeGrammarQuestion?: LikeGrammarQuestionListRelationFilter
  }

  export type GrammarQuestionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    sentence?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    explanation?: SortOrder
    localId?: SortOrder
    grammarId?: SortOrder
    Grammar?: GrammarOrderByWithRelationInput
    LikeGrammarQuestion?: LikeGrammarQuestionOrderByRelationAggregateInput
  }

  export type GrammarQuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GrammarQuestionWhereInput | GrammarQuestionWhereInput[]
    OR?: GrammarQuestionWhereInput[]
    NOT?: GrammarQuestionWhereInput | GrammarQuestionWhereInput[]
    title?: StringFilter<"GrammarQuestion"> | string
    sentence?: StringFilter<"GrammarQuestion"> | string
    question?: JsonFilter<"GrammarQuestion">
    answer?: StringFilter<"GrammarQuestion"> | string
    explanation?: StringFilter<"GrammarQuestion"> | string
    localId?: IntFilter<"GrammarQuestion"> | number
    grammarId?: IntFilter<"GrammarQuestion"> | number
    Grammar?: XOR<GrammarRelationFilter, GrammarWhereInput>
    LikeGrammarQuestion?: LikeGrammarQuestionListRelationFilter
  }, "id">

  export type GrammarQuestionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    sentence?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    explanation?: SortOrder
    localId?: SortOrder
    grammarId?: SortOrder
    _count?: GrammarQuestionCountOrderByAggregateInput
    _avg?: GrammarQuestionAvgOrderByAggregateInput
    _max?: GrammarQuestionMaxOrderByAggregateInput
    _min?: GrammarQuestionMinOrderByAggregateInput
    _sum?: GrammarQuestionSumOrderByAggregateInput
  }

  export type GrammarQuestionScalarWhereWithAggregatesInput = {
    AND?: GrammarQuestionScalarWhereWithAggregatesInput | GrammarQuestionScalarWhereWithAggregatesInput[]
    OR?: GrammarQuestionScalarWhereWithAggregatesInput[]
    NOT?: GrammarQuestionScalarWhereWithAggregatesInput | GrammarQuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GrammarQuestion"> | number
    title?: StringWithAggregatesFilter<"GrammarQuestion"> | string
    sentence?: StringWithAggregatesFilter<"GrammarQuestion"> | string
    question?: JsonWithAggregatesFilter<"GrammarQuestion">
    answer?: StringWithAggregatesFilter<"GrammarQuestion"> | string
    explanation?: StringWithAggregatesFilter<"GrammarQuestion"> | string
    localId?: IntWithAggregatesFilter<"GrammarQuestion"> | number
    grammarId?: IntWithAggregatesFilter<"GrammarQuestion"> | number
  }

  export type LikeGrammarQuestionWhereInput = {
    AND?: LikeGrammarQuestionWhereInput | LikeGrammarQuestionWhereInput[]
    OR?: LikeGrammarQuestionWhereInput[]
    NOT?: LikeGrammarQuestionWhereInput | LikeGrammarQuestionWhereInput[]
    id?: IntFilter<"LikeGrammarQuestion"> | number
    userId?: StringFilter<"LikeGrammarQuestion"> | string
    grammarQuestionId?: IntFilter<"LikeGrammarQuestion"> | number
    createdAt?: DateTimeFilter<"LikeGrammarQuestion"> | Date | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    GrammarQuestion?: XOR<GrammarQuestionRelationFilter, GrammarQuestionWhereInput>
  }

  export type LikeGrammarQuestionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    grammarQuestionId?: SortOrder
    createdAt?: SortOrder
    User?: UserOrderByWithRelationInput
    GrammarQuestion?: GrammarQuestionOrderByWithRelationInput
  }

  export type LikeGrammarQuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LikeGrammarQuestionWhereInput | LikeGrammarQuestionWhereInput[]
    OR?: LikeGrammarQuestionWhereInput[]
    NOT?: LikeGrammarQuestionWhereInput | LikeGrammarQuestionWhereInput[]
    userId?: StringFilter<"LikeGrammarQuestion"> | string
    grammarQuestionId?: IntFilter<"LikeGrammarQuestion"> | number
    createdAt?: DateTimeFilter<"LikeGrammarQuestion"> | Date | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    GrammarQuestion?: XOR<GrammarQuestionRelationFilter, GrammarQuestionWhereInput>
  }, "id">

  export type LikeGrammarQuestionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    grammarQuestionId?: SortOrder
    createdAt?: SortOrder
    _count?: LikeGrammarQuestionCountOrderByAggregateInput
    _avg?: LikeGrammarQuestionAvgOrderByAggregateInput
    _max?: LikeGrammarQuestionMaxOrderByAggregateInput
    _min?: LikeGrammarQuestionMinOrderByAggregateInput
    _sum?: LikeGrammarQuestionSumOrderByAggregateInput
  }

  export type LikeGrammarQuestionScalarWhereWithAggregatesInput = {
    AND?: LikeGrammarQuestionScalarWhereWithAggregatesInput | LikeGrammarQuestionScalarWhereWithAggregatesInput[]
    OR?: LikeGrammarQuestionScalarWhereWithAggregatesInput[]
    NOT?: LikeGrammarQuestionScalarWhereWithAggregatesInput | LikeGrammarQuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LikeGrammarQuestion"> | number
    userId?: StringWithAggregatesFilter<"LikeGrammarQuestion"> | string
    grammarQuestionId?: IntWithAggregatesFilter<"LikeGrammarQuestion"> | number
    createdAt?: DateTimeWithAggregatesFilter<"LikeGrammarQuestion"> | Date | string
  }

  export type LikeListeningWhereInput = {
    AND?: LikeListeningWhereInput | LikeListeningWhereInput[]
    OR?: LikeListeningWhereInput[]
    NOT?: LikeListeningWhereInput | LikeListeningWhereInput[]
    id?: IntFilter<"LikeListening"> | number
    userId?: StringFilter<"LikeListening"> | string
    listeningId?: IntFilter<"LikeListening"> | number
    createdAt?: DateTimeFilter<"LikeListening"> | Date | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    Listening?: XOR<ListeningRelationFilter, ListeningWhereInput>
  }

  export type LikeListeningOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    listeningId?: SortOrder
    createdAt?: SortOrder
    User?: UserOrderByWithRelationInput
    Listening?: ListeningOrderByWithRelationInput
  }

  export type LikeListeningWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LikeListeningWhereInput | LikeListeningWhereInput[]
    OR?: LikeListeningWhereInput[]
    NOT?: LikeListeningWhereInput | LikeListeningWhereInput[]
    userId?: StringFilter<"LikeListening"> | string
    listeningId?: IntFilter<"LikeListening"> | number
    createdAt?: DateTimeFilter<"LikeListening"> | Date | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    Listening?: XOR<ListeningRelationFilter, ListeningWhereInput>
  }, "id">

  export type LikeListeningOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    listeningId?: SortOrder
    createdAt?: SortOrder
    _count?: LikeListeningCountOrderByAggregateInput
    _avg?: LikeListeningAvgOrderByAggregateInput
    _max?: LikeListeningMaxOrderByAggregateInput
    _min?: LikeListeningMinOrderByAggregateInput
    _sum?: LikeListeningSumOrderByAggregateInput
  }

  export type LikeListeningScalarWhereWithAggregatesInput = {
    AND?: LikeListeningScalarWhereWithAggregatesInput | LikeListeningScalarWhereWithAggregatesInput[]
    OR?: LikeListeningScalarWhereWithAggregatesInput[]
    NOT?: LikeListeningScalarWhereWithAggregatesInput | LikeListeningScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LikeListening"> | number
    userId?: StringWithAggregatesFilter<"LikeListening"> | string
    listeningId?: IntWithAggregatesFilter<"LikeListening"> | number
    createdAt?: DateTimeWithAggregatesFilter<"LikeListening"> | Date | string
  }

  export type ListeningWhereInput = {
    AND?: ListeningWhereInput | ListeningWhereInput[]
    OR?: ListeningWhereInput[]
    NOT?: ListeningWhereInput | ListeningWhereInput[]
    id?: IntFilter<"Listening"> | number
    title?: StringFilter<"Listening"> | string
    url?: StringFilter<"Listening"> | string
    lap?: IntFilter<"Listening"> | number
    localId?: IntFilter<"Listening"> | number
    LikeListening?: LikeListeningListRelationFilter
  }

  export type ListeningOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    url?: SortOrder
    lap?: SortOrder
    localId?: SortOrder
    LikeListening?: LikeListeningOrderByRelationAggregateInput
  }

  export type ListeningWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ListeningWhereInput | ListeningWhereInput[]
    OR?: ListeningWhereInput[]
    NOT?: ListeningWhereInput | ListeningWhereInput[]
    title?: StringFilter<"Listening"> | string
    url?: StringFilter<"Listening"> | string
    lap?: IntFilter<"Listening"> | number
    localId?: IntFilter<"Listening"> | number
    LikeListening?: LikeListeningListRelationFilter
  }, "id">

  export type ListeningOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    url?: SortOrder
    lap?: SortOrder
    localId?: SortOrder
    _count?: ListeningCountOrderByAggregateInput
    _avg?: ListeningAvgOrderByAggregateInput
    _max?: ListeningMaxOrderByAggregateInput
    _min?: ListeningMinOrderByAggregateInput
    _sum?: ListeningSumOrderByAggregateInput
  }

  export type ListeningScalarWhereWithAggregatesInput = {
    AND?: ListeningScalarWhereWithAggregatesInput | ListeningScalarWhereWithAggregatesInput[]
    OR?: ListeningScalarWhereWithAggregatesInput[]
    NOT?: ListeningScalarWhereWithAggregatesInput | ListeningScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Listening"> | number
    title?: StringWithAggregatesFilter<"Listening"> | string
    url?: StringWithAggregatesFilter<"Listening"> | string
    lap?: IntWithAggregatesFilter<"Listening"> | number
    localId?: IntWithAggregatesFilter<"Listening"> | number
  }

  export type LogWhereInput = {
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    id?: IntFilter<"Log"> | number
    about?: EnumLogAboutFilter<"Log"> | $Enums.LogAbout
    level?: EnumLogLevelFilter<"Log"> | $Enums.LogLevel
    message?: StringFilter<"Log"> | string
    meta?: JsonNullableFilter<"Log">
  }

  export type LogOrderByWithRelationInput = {
    id?: SortOrder
    about?: SortOrder
    level?: SortOrder
    message?: SortOrder
    meta?: SortOrderInput | SortOrder
  }

  export type LogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    about?: EnumLogAboutFilter<"Log"> | $Enums.LogAbout
    level?: EnumLogLevelFilter<"Log"> | $Enums.LogLevel
    message?: StringFilter<"Log"> | string
    meta?: JsonNullableFilter<"Log">
  }, "id">

  export type LogOrderByWithAggregationInput = {
    id?: SortOrder
    about?: SortOrder
    level?: SortOrder
    message?: SortOrder
    meta?: SortOrderInput | SortOrder
    _count?: LogCountOrderByAggregateInput
    _avg?: LogAvgOrderByAggregateInput
    _max?: LogMaxOrderByAggregateInput
    _min?: LogMinOrderByAggregateInput
    _sum?: LogSumOrderByAggregateInput
  }

  export type LogScalarWhereWithAggregatesInput = {
    AND?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    OR?: LogScalarWhereWithAggregatesInput[]
    NOT?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Log"> | number
    about?: EnumLogAboutWithAggregatesFilter<"Log"> | $Enums.LogAbout
    level?: EnumLogLevelWithAggregatesFilter<"Log"> | $Enums.LogLevel
    message?: StringWithAggregatesFilter<"Log"> | string
    meta?: JsonNullableWithAggregatesFilter<"Log">
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    price?: IntFilter<"Product"> | number
    checkoutType?: EnumcheckoutTypeFilter<"Product"> | $Enums.checkoutType
    image?: JsonNullableFilter<"Product">
    priceId?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    ProductReview?: ProductReviewListRelationFilter
    StripeCheckout?: StripeCheckoutListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    checkoutType?: SortOrder
    image?: SortOrderInput | SortOrder
    priceId?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ProductReview?: ProductReviewOrderByRelationAggregateInput
    StripeCheckout?: StripeCheckoutOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    price?: IntFilter<"Product"> | number
    checkoutType?: EnumcheckoutTypeFilter<"Product"> | $Enums.checkoutType
    image?: JsonNullableFilter<"Product">
    priceId?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    ProductReview?: ProductReviewListRelationFilter
    StripeCheckout?: StripeCheckoutListRelationFilter
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    checkoutType?: SortOrder
    image?: SortOrderInput | SortOrder
    priceId?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Product"> | number
    name?: StringWithAggregatesFilter<"Product"> | string
    price?: IntWithAggregatesFilter<"Product"> | number
    checkoutType?: EnumcheckoutTypeWithAggregatesFilter<"Product"> | $Enums.checkoutType
    image?: JsonNullableWithAggregatesFilter<"Product">
    priceId?: StringWithAggregatesFilter<"Product"> | string
    description?: StringNullableWithAggregatesFilter<"Product"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
  }

  export type ProductReviewWhereInput = {
    AND?: ProductReviewWhereInput | ProductReviewWhereInput[]
    OR?: ProductReviewWhereInput[]
    NOT?: ProductReviewWhereInput | ProductReviewWhereInput[]
    id?: IntFilter<"ProductReview"> | number
    text?: StringFilter<"ProductReview"> | string
    reviewer?: StringFilter<"ProductReview"> | string
    rating?: IntFilter<"ProductReview"> | number
    createdAt?: DateTimeFilter<"ProductReview"> | Date | string
    updatedAt?: DateTimeFilter<"ProductReview"> | Date | string
    productId?: IntFilter<"ProductReview"> | number
    checkoutId?: IntNullableFilter<"ProductReview"> | number | null
    Product?: XOR<ProductRelationFilter, ProductWhereInput>
    StripeCheckout?: XOR<StripeCheckoutNullableRelationFilter, StripeCheckoutWhereInput> | null
  }

  export type ProductReviewOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    reviewer?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productId?: SortOrder
    checkoutId?: SortOrderInput | SortOrder
    Product?: ProductOrderByWithRelationInput
    StripeCheckout?: StripeCheckoutOrderByWithRelationInput
  }

  export type ProductReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductReviewWhereInput | ProductReviewWhereInput[]
    OR?: ProductReviewWhereInput[]
    NOT?: ProductReviewWhereInput | ProductReviewWhereInput[]
    text?: StringFilter<"ProductReview"> | string
    reviewer?: StringFilter<"ProductReview"> | string
    rating?: IntFilter<"ProductReview"> | number
    createdAt?: DateTimeFilter<"ProductReview"> | Date | string
    updatedAt?: DateTimeFilter<"ProductReview"> | Date | string
    productId?: IntFilter<"ProductReview"> | number
    checkoutId?: IntNullableFilter<"ProductReview"> | number | null
    Product?: XOR<ProductRelationFilter, ProductWhereInput>
    StripeCheckout?: XOR<StripeCheckoutNullableRelationFilter, StripeCheckoutWhereInput> | null
  }, "id">

  export type ProductReviewOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    reviewer?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productId?: SortOrder
    checkoutId?: SortOrderInput | SortOrder
    _count?: ProductReviewCountOrderByAggregateInput
    _avg?: ProductReviewAvgOrderByAggregateInput
    _max?: ProductReviewMaxOrderByAggregateInput
    _min?: ProductReviewMinOrderByAggregateInput
    _sum?: ProductReviewSumOrderByAggregateInput
  }

  export type ProductReviewScalarWhereWithAggregatesInput = {
    AND?: ProductReviewScalarWhereWithAggregatesInput | ProductReviewScalarWhereWithAggregatesInput[]
    OR?: ProductReviewScalarWhereWithAggregatesInput[]
    NOT?: ProductReviewScalarWhereWithAggregatesInput | ProductReviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductReview"> | number
    text?: StringWithAggregatesFilter<"ProductReview"> | string
    reviewer?: StringWithAggregatesFilter<"ProductReview"> | string
    rating?: IntWithAggregatesFilter<"ProductReview"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ProductReview"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProductReview"> | Date | string
    productId?: IntWithAggregatesFilter<"ProductReview"> | number
    checkoutId?: IntNullableWithAggregatesFilter<"ProductReview"> | number | null
  }

  export type OneTimePasswordWhereInput = {
    AND?: OneTimePasswordWhereInput | OneTimePasswordWhereInput[]
    OR?: OneTimePasswordWhereInput[]
    NOT?: OneTimePasswordWhereInput | OneTimePasswordWhereInput[]
    id?: IntFilter<"OneTimePassword"> | number
    usage?: EnumOneTimeNumberUsageFilter<"OneTimePassword"> | $Enums.OneTimeNumberUsage
    oneTimePassword?: StringFilter<"OneTimePassword"> | string
    validated?: BoolFilter<"OneTimePassword"> | boolean
    updatedAt?: DateTimeFilter<"OneTimePassword"> | Date | string
    userId?: StringNullableFilter<"OneTimePassword"> | string | null
    adminUserId?: StringNullableFilter<"OneTimePassword"> | string | null
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    AdminUser?: XOR<AdminUserNullableRelationFilter, AdminUserWhereInput> | null
  }

  export type OneTimePasswordOrderByWithRelationInput = {
    id?: SortOrder
    usage?: SortOrder
    oneTimePassword?: SortOrder
    validated?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    adminUserId?: SortOrderInput | SortOrder
    User?: UserOrderByWithRelationInput
    AdminUser?: AdminUserOrderByWithRelationInput
  }

  export type OneTimePasswordWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OneTimePasswordWhereInput | OneTimePasswordWhereInput[]
    OR?: OneTimePasswordWhereInput[]
    NOT?: OneTimePasswordWhereInput | OneTimePasswordWhereInput[]
    usage?: EnumOneTimeNumberUsageFilter<"OneTimePassword"> | $Enums.OneTimeNumberUsage
    oneTimePassword?: StringFilter<"OneTimePassword"> | string
    validated?: BoolFilter<"OneTimePassword"> | boolean
    updatedAt?: DateTimeFilter<"OneTimePassword"> | Date | string
    userId?: StringNullableFilter<"OneTimePassword"> | string | null
    adminUserId?: StringNullableFilter<"OneTimePassword"> | string | null
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    AdminUser?: XOR<AdminUserNullableRelationFilter, AdminUserWhereInput> | null
  }, "id">

  export type OneTimePasswordOrderByWithAggregationInput = {
    id?: SortOrder
    usage?: SortOrder
    oneTimePassword?: SortOrder
    validated?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    adminUserId?: SortOrderInput | SortOrder
    _count?: OneTimePasswordCountOrderByAggregateInput
    _avg?: OneTimePasswordAvgOrderByAggregateInput
    _max?: OneTimePasswordMaxOrderByAggregateInput
    _min?: OneTimePasswordMinOrderByAggregateInput
    _sum?: OneTimePasswordSumOrderByAggregateInput
  }

  export type OneTimePasswordScalarWhereWithAggregatesInput = {
    AND?: OneTimePasswordScalarWhereWithAggregatesInput | OneTimePasswordScalarWhereWithAggregatesInput[]
    OR?: OneTimePasswordScalarWhereWithAggregatesInput[]
    NOT?: OneTimePasswordScalarWhereWithAggregatesInput | OneTimePasswordScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OneTimePassword"> | number
    usage?: EnumOneTimeNumberUsageWithAggregatesFilter<"OneTimePassword"> | $Enums.OneTimeNumberUsage
    oneTimePassword?: StringWithAggregatesFilter<"OneTimePassword"> | string
    validated?: BoolWithAggregatesFilter<"OneTimePassword"> | boolean
    updatedAt?: DateTimeWithAggregatesFilter<"OneTimePassword"> | Date | string
    userId?: StringNullableWithAggregatesFilter<"OneTimePassword"> | string | null
    adminUserId?: StringNullableWithAggregatesFilter<"OneTimePassword"> | string | null
  }

  export type StripeCheckoutWhereInput = {
    AND?: StripeCheckoutWhereInput | StripeCheckoutWhereInput[]
    OR?: StripeCheckoutWhereInput[]
    NOT?: StripeCheckoutWhereInput | StripeCheckoutWhereInput[]
    id?: IntFilter<"StripeCheckout"> | number
    customerId?: StringNullableFilter<"StripeCheckout"> | string | null
    productId?: IntFilter<"StripeCheckout"> | number
    paymentId?: StringFilter<"StripeCheckout"> | string
    name?: StringFilter<"StripeCheckout"> | string
    email?: StringFilter<"StripeCheckout"> | string
    postCode?: StringFilter<"StripeCheckout"> | string
    address?: StringFilter<"StripeCheckout"> | string
    serialNumber?: StringFilter<"StripeCheckout"> | string
    status?: EnumcheckoutStatusFilter<"StripeCheckout"> | $Enums.checkoutStatus
    manager?: StringNullableFilter<"StripeCheckout"> | string | null
    createdAt?: DateTimeFilter<"StripeCheckout"> | Date | string
    updatedAt?: DateTimeFilter<"StripeCheckout"> | Date | string
    StripeCustomer?: XOR<StripeCustomerNullableRelationFilter, StripeCustomerWhereInput> | null
    Product?: XOR<ProductRelationFilter, ProductWhereInput>
    ProductReview?: ProductReviewListRelationFilter
  }

  export type StripeCheckoutOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrderInput | SortOrder
    productId?: SortOrder
    paymentId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    postCode?: SortOrder
    address?: SortOrder
    serialNumber?: SortOrder
    status?: SortOrder
    manager?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    StripeCustomer?: StripeCustomerOrderByWithRelationInput
    Product?: ProductOrderByWithRelationInput
    ProductReview?: ProductReviewOrderByRelationAggregateInput
  }

  export type StripeCheckoutWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StripeCheckoutWhereInput | StripeCheckoutWhereInput[]
    OR?: StripeCheckoutWhereInput[]
    NOT?: StripeCheckoutWhereInput | StripeCheckoutWhereInput[]
    customerId?: StringNullableFilter<"StripeCheckout"> | string | null
    productId?: IntFilter<"StripeCheckout"> | number
    paymentId?: StringFilter<"StripeCheckout"> | string
    name?: StringFilter<"StripeCheckout"> | string
    email?: StringFilter<"StripeCheckout"> | string
    postCode?: StringFilter<"StripeCheckout"> | string
    address?: StringFilter<"StripeCheckout"> | string
    serialNumber?: StringFilter<"StripeCheckout"> | string
    status?: EnumcheckoutStatusFilter<"StripeCheckout"> | $Enums.checkoutStatus
    manager?: StringNullableFilter<"StripeCheckout"> | string | null
    createdAt?: DateTimeFilter<"StripeCheckout"> | Date | string
    updatedAt?: DateTimeFilter<"StripeCheckout"> | Date | string
    StripeCustomer?: XOR<StripeCustomerNullableRelationFilter, StripeCustomerWhereInput> | null
    Product?: XOR<ProductRelationFilter, ProductWhereInput>
    ProductReview?: ProductReviewListRelationFilter
  }, "id">

  export type StripeCheckoutOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrderInput | SortOrder
    productId?: SortOrder
    paymentId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    postCode?: SortOrder
    address?: SortOrder
    serialNumber?: SortOrder
    status?: SortOrder
    manager?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StripeCheckoutCountOrderByAggregateInput
    _avg?: StripeCheckoutAvgOrderByAggregateInput
    _max?: StripeCheckoutMaxOrderByAggregateInput
    _min?: StripeCheckoutMinOrderByAggregateInput
    _sum?: StripeCheckoutSumOrderByAggregateInput
  }

  export type StripeCheckoutScalarWhereWithAggregatesInput = {
    AND?: StripeCheckoutScalarWhereWithAggregatesInput | StripeCheckoutScalarWhereWithAggregatesInput[]
    OR?: StripeCheckoutScalarWhereWithAggregatesInput[]
    NOT?: StripeCheckoutScalarWhereWithAggregatesInput | StripeCheckoutScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StripeCheckout"> | number
    customerId?: StringNullableWithAggregatesFilter<"StripeCheckout"> | string | null
    productId?: IntWithAggregatesFilter<"StripeCheckout"> | number
    paymentId?: StringWithAggregatesFilter<"StripeCheckout"> | string
    name?: StringWithAggregatesFilter<"StripeCheckout"> | string
    email?: StringWithAggregatesFilter<"StripeCheckout"> | string
    postCode?: StringWithAggregatesFilter<"StripeCheckout"> | string
    address?: StringWithAggregatesFilter<"StripeCheckout"> | string
    serialNumber?: StringWithAggregatesFilter<"StripeCheckout"> | string
    status?: EnumcheckoutStatusWithAggregatesFilter<"StripeCheckout"> | $Enums.checkoutStatus
    manager?: StringNullableWithAggregatesFilter<"StripeCheckout"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StripeCheckout"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StripeCheckout"> | Date | string
  }

  export type StripeCustomerWhereInput = {
    AND?: StripeCustomerWhereInput | StripeCustomerWhereInput[]
    OR?: StripeCustomerWhereInput[]
    NOT?: StripeCustomerWhereInput | StripeCustomerWhereInput[]
    id?: IntFilter<"StripeCustomer"> | number
    customerId?: StringFilter<"StripeCustomer"> | string
    userId?: StringFilter<"StripeCustomer"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    StripeCheckout?: StripeCheckoutListRelationFilter
    StripeSubscription?: StripeSubscriptionListRelationFilter
  }

  export type StripeCustomerOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
    StripeCheckout?: StripeCheckoutOrderByRelationAggregateInput
    StripeSubscription?: StripeSubscriptionOrderByRelationAggregateInput
  }

  export type StripeCustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    customerId?: string
    AND?: StripeCustomerWhereInput | StripeCustomerWhereInput[]
    OR?: StripeCustomerWhereInput[]
    NOT?: StripeCustomerWhereInput | StripeCustomerWhereInput[]
    userId?: StringFilter<"StripeCustomer"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    StripeCheckout?: StripeCheckoutListRelationFilter
    StripeSubscription?: StripeSubscriptionListRelationFilter
  }, "id" | "customerId">

  export type StripeCustomerOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
    _count?: StripeCustomerCountOrderByAggregateInput
    _avg?: StripeCustomerAvgOrderByAggregateInput
    _max?: StripeCustomerMaxOrderByAggregateInput
    _min?: StripeCustomerMinOrderByAggregateInput
    _sum?: StripeCustomerSumOrderByAggregateInput
  }

  export type StripeCustomerScalarWhereWithAggregatesInput = {
    AND?: StripeCustomerScalarWhereWithAggregatesInput | StripeCustomerScalarWhereWithAggregatesInput[]
    OR?: StripeCustomerScalarWhereWithAggregatesInput[]
    NOT?: StripeCustomerScalarWhereWithAggregatesInput | StripeCustomerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StripeCustomer"> | number
    customerId?: StringWithAggregatesFilter<"StripeCustomer"> | string
    userId?: StringWithAggregatesFilter<"StripeCustomer"> | string
  }

  export type StripeSubscriptionWhereInput = {
    AND?: StripeSubscriptionWhereInput | StripeSubscriptionWhereInput[]
    OR?: StripeSubscriptionWhereInput[]
    NOT?: StripeSubscriptionWhereInput | StripeSubscriptionWhereInput[]
    id?: IntFilter<"StripeSubscription"> | number
    subscriptionId?: StringFilter<"StripeSubscription"> | string
    plan?: StringFilter<"StripeSubscription"> | string
    status?: EnumsubscriptionStatusFilter<"StripeSubscription"> | $Enums.subscriptionStatus
    periodStart?: StringFilter<"StripeSubscription"> | string
    periodEnd?: StringFilter<"StripeSubscription"> | string
    cancelAt?: StringNullableFilter<"StripeSubscription"> | string | null
    cancelAtPeriodEnd?: BoolFilter<"StripeSubscription"> | boolean
    stripeCustomerId?: IntFilter<"StripeSubscription"> | number
    createdAt?: DateTimeFilter<"StripeSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"StripeSubscription"> | Date | string
    StripeCustomer?: XOR<StripeCustomerRelationFilter, StripeCustomerWhereInput>
  }

  export type StripeSubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    plan?: SortOrder
    status?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    cancelAt?: SortOrderInput | SortOrder
    cancelAtPeriodEnd?: SortOrder
    stripeCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    StripeCustomer?: StripeCustomerOrderByWithRelationInput
  }

  export type StripeSubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StripeSubscriptionWhereInput | StripeSubscriptionWhereInput[]
    OR?: StripeSubscriptionWhereInput[]
    NOT?: StripeSubscriptionWhereInput | StripeSubscriptionWhereInput[]
    subscriptionId?: StringFilter<"StripeSubscription"> | string
    plan?: StringFilter<"StripeSubscription"> | string
    status?: EnumsubscriptionStatusFilter<"StripeSubscription"> | $Enums.subscriptionStatus
    periodStart?: StringFilter<"StripeSubscription"> | string
    periodEnd?: StringFilter<"StripeSubscription"> | string
    cancelAt?: StringNullableFilter<"StripeSubscription"> | string | null
    cancelAtPeriodEnd?: BoolFilter<"StripeSubscription"> | boolean
    stripeCustomerId?: IntFilter<"StripeSubscription"> | number
    createdAt?: DateTimeFilter<"StripeSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"StripeSubscription"> | Date | string
    StripeCustomer?: XOR<StripeCustomerRelationFilter, StripeCustomerWhereInput>
  }, "id">

  export type StripeSubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    plan?: SortOrder
    status?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    cancelAt?: SortOrderInput | SortOrder
    cancelAtPeriodEnd?: SortOrder
    stripeCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StripeSubscriptionCountOrderByAggregateInput
    _avg?: StripeSubscriptionAvgOrderByAggregateInput
    _max?: StripeSubscriptionMaxOrderByAggregateInput
    _min?: StripeSubscriptionMinOrderByAggregateInput
    _sum?: StripeSubscriptionSumOrderByAggregateInput
  }

  export type StripeSubscriptionScalarWhereWithAggregatesInput = {
    AND?: StripeSubscriptionScalarWhereWithAggregatesInput | StripeSubscriptionScalarWhereWithAggregatesInput[]
    OR?: StripeSubscriptionScalarWhereWithAggregatesInput[]
    NOT?: StripeSubscriptionScalarWhereWithAggregatesInput | StripeSubscriptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StripeSubscription"> | number
    subscriptionId?: StringWithAggregatesFilter<"StripeSubscription"> | string
    plan?: StringWithAggregatesFilter<"StripeSubscription"> | string
    status?: EnumsubscriptionStatusWithAggregatesFilter<"StripeSubscription"> | $Enums.subscriptionStatus
    periodStart?: StringWithAggregatesFilter<"StripeSubscription"> | string
    periodEnd?: StringWithAggregatesFilter<"StripeSubscription"> | string
    cancelAt?: StringNullableWithAggregatesFilter<"StripeSubscription"> | string | null
    cancelAtPeriodEnd?: BoolWithAggregatesFilter<"StripeSubscription"> | boolean
    stripeCustomerId?: IntWithAggregatesFilter<"StripeSubscription"> | number
    createdAt?: DateTimeWithAggregatesFilter<"StripeSubscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StripeSubscription"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    userName?: StringFilter<"User"> | string
    gender?: EnumGenderFilter<"User"> | $Enums.Gender
    country?: StringFilter<"User"> | string
    city?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    birthYear?: StringFilter<"User"> | string
    activated?: BoolFilter<"User"> | boolean
    invited?: BoolFilter<"User"> | boolean
    invitedUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    StripeCustomer?: StripeCustomerListRelationFilter
    OneTimePassword?: OneTimePasswordListRelationFilter
    LikeGrammarQuestion?: LikeGrammarQuestionListRelationFilter
    LikeListening?: LikeListeningListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    userName?: SortOrder
    gender?: SortOrder
    country?: SortOrder
    city?: SortOrder
    email?: SortOrder
    birthYear?: SortOrder
    activated?: SortOrder
    invited?: SortOrder
    invitedUntil?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    StripeCustomer?: StripeCustomerOrderByRelationAggregateInput
    OneTimePassword?: OneTimePasswordOrderByRelationAggregateInput
    LikeGrammarQuestion?: LikeGrammarQuestionOrderByRelationAggregateInput
    LikeListening?: LikeListeningOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    userName?: StringFilter<"User"> | string
    gender?: EnumGenderFilter<"User"> | $Enums.Gender
    country?: StringFilter<"User"> | string
    city?: StringFilter<"User"> | string
    birthYear?: StringFilter<"User"> | string
    activated?: BoolFilter<"User"> | boolean
    invited?: BoolFilter<"User"> | boolean
    invitedUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    StripeCustomer?: StripeCustomerListRelationFilter
    OneTimePassword?: OneTimePasswordListRelationFilter
    LikeGrammarQuestion?: LikeGrammarQuestionListRelationFilter
    LikeListening?: LikeListeningListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    userName?: SortOrder
    gender?: SortOrder
    country?: SortOrder
    city?: SortOrder
    email?: SortOrder
    birthYear?: SortOrder
    activated?: SortOrder
    invited?: SortOrder
    invitedUntil?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    userName?: StringWithAggregatesFilter<"User"> | string
    gender?: EnumGenderWithAggregatesFilter<"User"> | $Enums.Gender
    country?: StringWithAggregatesFilter<"User"> | string
    city?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    birthYear?: StringWithAggregatesFilter<"User"> | string
    activated?: BoolWithAggregatesFilter<"User"> | boolean
    invited?: BoolWithAggregatesFilter<"User"> | boolean
    invitedUntil?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type PassageWhereInput = {
    AND?: PassageWhereInput | PassageWhereInput[]
    OR?: PassageWhereInput[]
    NOT?: PassageWhereInput | PassageWhereInput[]
    id?: IntFilter<"Passage"> | number
    level?: EnumPassageLevelFilter<"Passage"> | $Enums.PassageLevel
    title?: StringFilter<"Passage"> | string
    createdAt?: DateTimeFilter<"Passage"> | Date | string
    updatedAt?: DateTimeFilter<"Passage"> | Date | string
    PassageQuestion?: PassageQuestionListRelationFilter
    PassageSentence?: PassageSentenceListRelationFilter
  }

  export type PassageOrderByWithRelationInput = {
    id?: SortOrder
    level?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    PassageQuestion?: PassageQuestionOrderByRelationAggregateInput
    PassageSentence?: PassageSentenceOrderByRelationAggregateInput
  }

  export type PassageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PassageWhereInput | PassageWhereInput[]
    OR?: PassageWhereInput[]
    NOT?: PassageWhereInput | PassageWhereInput[]
    level?: EnumPassageLevelFilter<"Passage"> | $Enums.PassageLevel
    title?: StringFilter<"Passage"> | string
    createdAt?: DateTimeFilter<"Passage"> | Date | string
    updatedAt?: DateTimeFilter<"Passage"> | Date | string
    PassageQuestion?: PassageQuestionListRelationFilter
    PassageSentence?: PassageSentenceListRelationFilter
  }, "id">

  export type PassageOrderByWithAggregationInput = {
    id?: SortOrder
    level?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PassageCountOrderByAggregateInput
    _avg?: PassageAvgOrderByAggregateInput
    _max?: PassageMaxOrderByAggregateInput
    _min?: PassageMinOrderByAggregateInput
    _sum?: PassageSumOrderByAggregateInput
  }

  export type PassageScalarWhereWithAggregatesInput = {
    AND?: PassageScalarWhereWithAggregatesInput | PassageScalarWhereWithAggregatesInput[]
    OR?: PassageScalarWhereWithAggregatesInput[]
    NOT?: PassageScalarWhereWithAggregatesInput | PassageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Passage"> | number
    level?: EnumPassageLevelWithAggregatesFilter<"Passage"> | $Enums.PassageLevel
    title?: StringWithAggregatesFilter<"Passage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Passage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Passage"> | Date | string
  }

  export type PassageQuestionWhereInput = {
    AND?: PassageQuestionWhereInput | PassageQuestionWhereInput[]
    OR?: PassageQuestionWhereInput[]
    NOT?: PassageQuestionWhereInput | PassageQuestionWhereInput[]
    id?: IntFilter<"PassageQuestion"> | number
    question1?: JsonNullableFilter<"PassageQuestion">
    question2?: JsonNullableFilter<"PassageQuestion">
    question3?: JsonNullableFilter<"PassageQuestion">
    question4?: JsonNullableFilter<"PassageQuestion">
    question5?: JsonNullableFilter<"PassageQuestion">
    question6?: JsonNullableFilter<"PassageQuestion">
    question7?: JsonNullableFilter<"PassageQuestion">
    question8?: JsonNullableFilter<"PassageQuestion">
    question9?: JsonNullableFilter<"PassageQuestion">
    question10?: JsonNullableFilter<"PassageQuestion">
    question11?: JsonNullableFilter<"PassageQuestion">
    question12?: JsonNullableFilter<"PassageQuestion">
    question13?: JsonNullableFilter<"PassageQuestion">
    question14?: JsonNullableFilter<"PassageQuestion">
    question15?: JsonNullableFilter<"PassageQuestion">
    passageId?: IntFilter<"PassageQuestion"> | number
    createdAt?: DateTimeFilter<"PassageQuestion"> | Date | string
    updatedAt?: DateTimeFilter<"PassageQuestion"> | Date | string
    Passage?: XOR<PassageRelationFilter, PassageWhereInput>
  }

  export type PassageQuestionOrderByWithRelationInput = {
    id?: SortOrder
    question1?: SortOrderInput | SortOrder
    question2?: SortOrderInput | SortOrder
    question3?: SortOrderInput | SortOrder
    question4?: SortOrderInput | SortOrder
    question5?: SortOrderInput | SortOrder
    question6?: SortOrderInput | SortOrder
    question7?: SortOrderInput | SortOrder
    question8?: SortOrderInput | SortOrder
    question9?: SortOrderInput | SortOrder
    question10?: SortOrderInput | SortOrder
    question11?: SortOrderInput | SortOrder
    question12?: SortOrderInput | SortOrder
    question13?: SortOrderInput | SortOrder
    question14?: SortOrderInput | SortOrder
    question15?: SortOrderInput | SortOrder
    passageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Passage?: PassageOrderByWithRelationInput
  }

  export type PassageQuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PassageQuestionWhereInput | PassageQuestionWhereInput[]
    OR?: PassageQuestionWhereInput[]
    NOT?: PassageQuestionWhereInput | PassageQuestionWhereInput[]
    question1?: JsonNullableFilter<"PassageQuestion">
    question2?: JsonNullableFilter<"PassageQuestion">
    question3?: JsonNullableFilter<"PassageQuestion">
    question4?: JsonNullableFilter<"PassageQuestion">
    question5?: JsonNullableFilter<"PassageQuestion">
    question6?: JsonNullableFilter<"PassageQuestion">
    question7?: JsonNullableFilter<"PassageQuestion">
    question8?: JsonNullableFilter<"PassageQuestion">
    question9?: JsonNullableFilter<"PassageQuestion">
    question10?: JsonNullableFilter<"PassageQuestion">
    question11?: JsonNullableFilter<"PassageQuestion">
    question12?: JsonNullableFilter<"PassageQuestion">
    question13?: JsonNullableFilter<"PassageQuestion">
    question14?: JsonNullableFilter<"PassageQuestion">
    question15?: JsonNullableFilter<"PassageQuestion">
    passageId?: IntFilter<"PassageQuestion"> | number
    createdAt?: DateTimeFilter<"PassageQuestion"> | Date | string
    updatedAt?: DateTimeFilter<"PassageQuestion"> | Date | string
    Passage?: XOR<PassageRelationFilter, PassageWhereInput>
  }, "id">

  export type PassageQuestionOrderByWithAggregationInput = {
    id?: SortOrder
    question1?: SortOrderInput | SortOrder
    question2?: SortOrderInput | SortOrder
    question3?: SortOrderInput | SortOrder
    question4?: SortOrderInput | SortOrder
    question5?: SortOrderInput | SortOrder
    question6?: SortOrderInput | SortOrder
    question7?: SortOrderInput | SortOrder
    question8?: SortOrderInput | SortOrder
    question9?: SortOrderInput | SortOrder
    question10?: SortOrderInput | SortOrder
    question11?: SortOrderInput | SortOrder
    question12?: SortOrderInput | SortOrder
    question13?: SortOrderInput | SortOrder
    question14?: SortOrderInput | SortOrder
    question15?: SortOrderInput | SortOrder
    passageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PassageQuestionCountOrderByAggregateInput
    _avg?: PassageQuestionAvgOrderByAggregateInput
    _max?: PassageQuestionMaxOrderByAggregateInput
    _min?: PassageQuestionMinOrderByAggregateInput
    _sum?: PassageQuestionSumOrderByAggregateInput
  }

  export type PassageQuestionScalarWhereWithAggregatesInput = {
    AND?: PassageQuestionScalarWhereWithAggregatesInput | PassageQuestionScalarWhereWithAggregatesInput[]
    OR?: PassageQuestionScalarWhereWithAggregatesInput[]
    NOT?: PassageQuestionScalarWhereWithAggregatesInput | PassageQuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PassageQuestion"> | number
    question1?: JsonNullableWithAggregatesFilter<"PassageQuestion">
    question2?: JsonNullableWithAggregatesFilter<"PassageQuestion">
    question3?: JsonNullableWithAggregatesFilter<"PassageQuestion">
    question4?: JsonNullableWithAggregatesFilter<"PassageQuestion">
    question5?: JsonNullableWithAggregatesFilter<"PassageQuestion">
    question6?: JsonNullableWithAggregatesFilter<"PassageQuestion">
    question7?: JsonNullableWithAggregatesFilter<"PassageQuestion">
    question8?: JsonNullableWithAggregatesFilter<"PassageQuestion">
    question9?: JsonNullableWithAggregatesFilter<"PassageQuestion">
    question10?: JsonNullableWithAggregatesFilter<"PassageQuestion">
    question11?: JsonNullableWithAggregatesFilter<"PassageQuestion">
    question12?: JsonNullableWithAggregatesFilter<"PassageQuestion">
    question13?: JsonNullableWithAggregatesFilter<"PassageQuestion">
    question14?: JsonNullableWithAggregatesFilter<"PassageQuestion">
    question15?: JsonNullableWithAggregatesFilter<"PassageQuestion">
    passageId?: IntWithAggregatesFilter<"PassageQuestion"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PassageQuestion"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PassageQuestion"> | Date | string
  }

  export type PassageSentenceWhereInput = {
    AND?: PassageSentenceWhereInput | PassageSentenceWhereInput[]
    OR?: PassageSentenceWhereInput[]
    NOT?: PassageSentenceWhereInput | PassageSentenceWhereInput[]
    id?: IntFilter<"PassageSentence"> | number
    sentence1?: JsonNullableFilter<"PassageSentence">
    sentence2?: JsonNullableFilter<"PassageSentence">
    sentence3?: JsonNullableFilter<"PassageSentence">
    sentence4?: JsonNullableFilter<"PassageSentence">
    sentence5?: JsonNullableFilter<"PassageSentence">
    sentence6?: JsonNullableFilter<"PassageSentence">
    sentence7?: JsonNullableFilter<"PassageSentence">
    sentence8?: JsonNullableFilter<"PassageSentence">
    sentence9?: JsonNullableFilter<"PassageSentence">
    sentence10?: JsonNullableFilter<"PassageSentence">
    sentence11?: JsonNullableFilter<"PassageSentence">
    sentence12?: JsonNullableFilter<"PassageSentence">
    sentence13?: JsonNullableFilter<"PassageSentence">
    sentence14?: JsonNullableFilter<"PassageSentence">
    sentence15?: JsonNullableFilter<"PassageSentence">
    passageId?: IntFilter<"PassageSentence"> | number
    createdAt?: DateTimeFilter<"PassageSentence"> | Date | string
    updatedAt?: DateTimeFilter<"PassageSentence"> | Date | string
    Passage?: XOR<PassageRelationFilter, PassageWhereInput>
  }

  export type PassageSentenceOrderByWithRelationInput = {
    id?: SortOrder
    sentence1?: SortOrderInput | SortOrder
    sentence2?: SortOrderInput | SortOrder
    sentence3?: SortOrderInput | SortOrder
    sentence4?: SortOrderInput | SortOrder
    sentence5?: SortOrderInput | SortOrder
    sentence6?: SortOrderInput | SortOrder
    sentence7?: SortOrderInput | SortOrder
    sentence8?: SortOrderInput | SortOrder
    sentence9?: SortOrderInput | SortOrder
    sentence10?: SortOrderInput | SortOrder
    sentence11?: SortOrderInput | SortOrder
    sentence12?: SortOrderInput | SortOrder
    sentence13?: SortOrderInput | SortOrder
    sentence14?: SortOrderInput | SortOrder
    sentence15?: SortOrderInput | SortOrder
    passageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Passage?: PassageOrderByWithRelationInput
  }

  export type PassageSentenceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PassageSentenceWhereInput | PassageSentenceWhereInput[]
    OR?: PassageSentenceWhereInput[]
    NOT?: PassageSentenceWhereInput | PassageSentenceWhereInput[]
    sentence1?: JsonNullableFilter<"PassageSentence">
    sentence2?: JsonNullableFilter<"PassageSentence">
    sentence3?: JsonNullableFilter<"PassageSentence">
    sentence4?: JsonNullableFilter<"PassageSentence">
    sentence5?: JsonNullableFilter<"PassageSentence">
    sentence6?: JsonNullableFilter<"PassageSentence">
    sentence7?: JsonNullableFilter<"PassageSentence">
    sentence8?: JsonNullableFilter<"PassageSentence">
    sentence9?: JsonNullableFilter<"PassageSentence">
    sentence10?: JsonNullableFilter<"PassageSentence">
    sentence11?: JsonNullableFilter<"PassageSentence">
    sentence12?: JsonNullableFilter<"PassageSentence">
    sentence13?: JsonNullableFilter<"PassageSentence">
    sentence14?: JsonNullableFilter<"PassageSentence">
    sentence15?: JsonNullableFilter<"PassageSentence">
    passageId?: IntFilter<"PassageSentence"> | number
    createdAt?: DateTimeFilter<"PassageSentence"> | Date | string
    updatedAt?: DateTimeFilter<"PassageSentence"> | Date | string
    Passage?: XOR<PassageRelationFilter, PassageWhereInput>
  }, "id">

  export type PassageSentenceOrderByWithAggregationInput = {
    id?: SortOrder
    sentence1?: SortOrderInput | SortOrder
    sentence2?: SortOrderInput | SortOrder
    sentence3?: SortOrderInput | SortOrder
    sentence4?: SortOrderInput | SortOrder
    sentence5?: SortOrderInput | SortOrder
    sentence6?: SortOrderInput | SortOrder
    sentence7?: SortOrderInput | SortOrder
    sentence8?: SortOrderInput | SortOrder
    sentence9?: SortOrderInput | SortOrder
    sentence10?: SortOrderInput | SortOrder
    sentence11?: SortOrderInput | SortOrder
    sentence12?: SortOrderInput | SortOrder
    sentence13?: SortOrderInput | SortOrder
    sentence14?: SortOrderInput | SortOrder
    sentence15?: SortOrderInput | SortOrder
    passageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PassageSentenceCountOrderByAggregateInput
    _avg?: PassageSentenceAvgOrderByAggregateInput
    _max?: PassageSentenceMaxOrderByAggregateInput
    _min?: PassageSentenceMinOrderByAggregateInput
    _sum?: PassageSentenceSumOrderByAggregateInput
  }

  export type PassageSentenceScalarWhereWithAggregatesInput = {
    AND?: PassageSentenceScalarWhereWithAggregatesInput | PassageSentenceScalarWhereWithAggregatesInput[]
    OR?: PassageSentenceScalarWhereWithAggregatesInput[]
    NOT?: PassageSentenceScalarWhereWithAggregatesInput | PassageSentenceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PassageSentence"> | number
    sentence1?: JsonNullableWithAggregatesFilter<"PassageSentence">
    sentence2?: JsonNullableWithAggregatesFilter<"PassageSentence">
    sentence3?: JsonNullableWithAggregatesFilter<"PassageSentence">
    sentence4?: JsonNullableWithAggregatesFilter<"PassageSentence">
    sentence5?: JsonNullableWithAggregatesFilter<"PassageSentence">
    sentence6?: JsonNullableWithAggregatesFilter<"PassageSentence">
    sentence7?: JsonNullableWithAggregatesFilter<"PassageSentence">
    sentence8?: JsonNullableWithAggregatesFilter<"PassageSentence">
    sentence9?: JsonNullableWithAggregatesFilter<"PassageSentence">
    sentence10?: JsonNullableWithAggregatesFilter<"PassageSentence">
    sentence11?: JsonNullableWithAggregatesFilter<"PassageSentence">
    sentence12?: JsonNullableWithAggregatesFilter<"PassageSentence">
    sentence13?: JsonNullableWithAggregatesFilter<"PassageSentence">
    sentence14?: JsonNullableWithAggregatesFilter<"PassageSentence">
    sentence15?: JsonNullableWithAggregatesFilter<"PassageSentence">
    passageId?: IntWithAggregatesFilter<"PassageSentence"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PassageSentence"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PassageSentence"> | Date | string
  }

  export type AdminUserCreateInput = {
    id?: string
    role: $Enums.AdminRole
    adminName: string
    adminEmail: string
    password: string
    OneTimePassword?: OneTimePasswordCreateNestedManyWithoutAdminUserInput
  }

  export type AdminUserUncheckedCreateInput = {
    id?: string
    role: $Enums.AdminRole
    adminName: string
    adminEmail: string
    password: string
    OneTimePassword?: OneTimePasswordUncheckedCreateNestedManyWithoutAdminUserInput
  }

  export type AdminUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    OneTimePassword?: OneTimePasswordUpdateManyWithoutAdminUserNestedInput
  }

  export type AdminUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    OneTimePassword?: OneTimePasswordUncheckedUpdateManyWithoutAdminUserNestedInput
  }

  export type AdminUserCreateManyInput = {
    id?: string
    role: $Enums.AdminRole
    adminName: string
    adminEmail: string
    password: string
  }

  export type AdminUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type BlogCreateInput = {
    published?: boolean
    name: string
    title: string
    keywordList: string
    description: string
    Category: BlogCategoryCreateNestedOneWithoutBlogInput
    BlogUniversityDepartment?: BlogUniversityDepartmentCreateNestedManyWithoutBlogInput
  }

  export type BlogUncheckedCreateInput = {
    id?: number
    categoryId: number
    published?: boolean
    name: string
    title: string
    keywordList: string
    description: string
    BlogUniversityDepartment?: BlogUniversityDepartmentUncheckedCreateNestedManyWithoutBlogInput
  }

  export type BlogUpdateInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keywordList?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    Category?: BlogCategoryUpdateOneRequiredWithoutBlogNestedInput
    BlogUniversityDepartment?: BlogUniversityDepartmentUpdateManyWithoutBlogNestedInput
  }

  export type BlogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keywordList?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    BlogUniversityDepartment?: BlogUniversityDepartmentUncheckedUpdateManyWithoutBlogNestedInput
  }

  export type BlogCreateManyInput = {
    id?: number
    categoryId: number
    published?: boolean
    name: string
    title: string
    keywordList: string
    description: string
  }

  export type BlogUpdateManyMutationInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keywordList?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type BlogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keywordList?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type BlogCategoryCreateInput = {
    category: string
    Blog?: BlogCreateNestedManyWithoutCategoryInput
  }

  export type BlogCategoryUncheckedCreateInput = {
    id?: number
    category: string
    Blog?: BlogUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type BlogCategoryUpdateInput = {
    category?: StringFieldUpdateOperationsInput | string
    Blog?: BlogUpdateManyWithoutCategoryNestedInput
  }

  export type BlogCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    Blog?: BlogUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type BlogCategoryCreateManyInput = {
    id?: number
    category: string
  }

  export type BlogCategoryUpdateManyMutationInput = {
    category?: StringFieldUpdateOperationsInput | string
  }

  export type BlogCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
  }

  export type BlogUniversityCreateInput = {
    schoolName: string
    publicSchool?: boolean
    region: number
    eikenUsable?: boolean
    schoolUrl?: string | null
    BlogUniversityDepartment?: BlogUniversityDepartmentCreateNestedManyWithoutUniversityInput
  }

  export type BlogUniversityUncheckedCreateInput = {
    id?: number
    schoolName: string
    publicSchool?: boolean
    region: number
    eikenUsable?: boolean
    schoolUrl?: string | null
    BlogUniversityDepartment?: BlogUniversityDepartmentUncheckedCreateNestedManyWithoutUniversityInput
  }

  export type BlogUniversityUpdateInput = {
    schoolName?: StringFieldUpdateOperationsInput | string
    publicSchool?: BoolFieldUpdateOperationsInput | boolean
    region?: IntFieldUpdateOperationsInput | number
    eikenUsable?: BoolFieldUpdateOperationsInput | boolean
    schoolUrl?: NullableStringFieldUpdateOperationsInput | string | null
    BlogUniversityDepartment?: BlogUniversityDepartmentUpdateManyWithoutUniversityNestedInput
  }

  export type BlogUniversityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    schoolName?: StringFieldUpdateOperationsInput | string
    publicSchool?: BoolFieldUpdateOperationsInput | boolean
    region?: IntFieldUpdateOperationsInput | number
    eikenUsable?: BoolFieldUpdateOperationsInput | boolean
    schoolUrl?: NullableStringFieldUpdateOperationsInput | string | null
    BlogUniversityDepartment?: BlogUniversityDepartmentUncheckedUpdateManyWithoutUniversityNestedInput
  }

  export type BlogUniversityCreateManyInput = {
    id?: number
    schoolName: string
    publicSchool?: boolean
    region: number
    eikenUsable?: boolean
    schoolUrl?: string | null
  }

  export type BlogUniversityUpdateManyMutationInput = {
    schoolName?: StringFieldUpdateOperationsInput | string
    publicSchool?: BoolFieldUpdateOperationsInput | boolean
    region?: IntFieldUpdateOperationsInput | number
    eikenUsable?: BoolFieldUpdateOperationsInput | boolean
    schoolUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlogUniversityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    schoolName?: StringFieldUpdateOperationsInput | string
    publicSchool?: BoolFieldUpdateOperationsInput | boolean
    region?: IntFieldUpdateOperationsInput | number
    eikenUsable?: BoolFieldUpdateOperationsInput | boolean
    schoolUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlogUniversityDepartmentCreateInput = {
    name: string
    rikei?: boolean
    examType?: number | null
    articleYear?: string | null
    Blog?: BlogCreateNestedOneWithoutBlogUniversityDepartmentInput
    University: BlogUniversityCreateNestedOneWithoutBlogUniversityDepartmentInput
  }

  export type BlogUniversityDepartmentUncheckedCreateInput = {
    id?: number
    blogId?: number | null
    universityId: number
    name: string
    rikei?: boolean
    examType?: number | null
    articleYear?: string | null
  }

  export type BlogUniversityDepartmentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    rikei?: BoolFieldUpdateOperationsInput | boolean
    examType?: NullableIntFieldUpdateOperationsInput | number | null
    articleYear?: NullableStringFieldUpdateOperationsInput | string | null
    Blog?: BlogUpdateOneWithoutBlogUniversityDepartmentNestedInput
    University?: BlogUniversityUpdateOneRequiredWithoutBlogUniversityDepartmentNestedInput
  }

  export type BlogUniversityDepartmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    blogId?: NullableIntFieldUpdateOperationsInput | number | null
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    rikei?: BoolFieldUpdateOperationsInput | boolean
    examType?: NullableIntFieldUpdateOperationsInput | number | null
    articleYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlogUniversityDepartmentCreateManyInput = {
    id?: number
    blogId?: number | null
    universityId: number
    name: string
    rikei?: boolean
    examType?: number | null
    articleYear?: string | null
  }

  export type BlogUniversityDepartmentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    rikei?: BoolFieldUpdateOperationsInput | boolean
    examType?: NullableIntFieldUpdateOperationsInput | number | null
    articleYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlogUniversityDepartmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    blogId?: NullableIntFieldUpdateOperationsInput | number | null
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    rikei?: BoolFieldUpdateOperationsInput | boolean
    examType?: NullableIntFieldUpdateOperationsInput | number | null
    articleYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GradeCreateInput = {
    grade: string
    gradeJp: string
    Grammar?: GrammarCreateNestedManyWithoutGradeInput
  }

  export type GradeUncheckedCreateInput = {
    id?: number
    grade: string
    gradeJp: string
    Grammar?: GrammarUncheckedCreateNestedManyWithoutGradeInput
  }

  export type GradeUpdateInput = {
    grade?: StringFieldUpdateOperationsInput | string
    gradeJp?: StringFieldUpdateOperationsInput | string
    Grammar?: GrammarUpdateManyWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    grade?: StringFieldUpdateOperationsInput | string
    gradeJp?: StringFieldUpdateOperationsInput | string
    Grammar?: GrammarUncheckedUpdateManyWithoutGradeNestedInput
  }

  export type GradeCreateManyInput = {
    id?: number
    grade: string
    gradeJp: string
  }

  export type GradeUpdateManyMutationInput = {
    grade?: StringFieldUpdateOperationsInput | string
    gradeJp?: StringFieldUpdateOperationsInput | string
  }

  export type GradeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    grade?: StringFieldUpdateOperationsInput | string
    gradeJp?: StringFieldUpdateOperationsInput | string
  }

  export type GrammarCreateInput = {
    unit: string
    tangen: string
    localId: number
    Grade: GradeCreateNestedOneWithoutGrammarInput
    GrammarQuestion?: GrammarQuestionCreateNestedManyWithoutGrammarInput
  }

  export type GrammarUncheckedCreateInput = {
    id?: number
    unit: string
    tangen: string
    localId: number
    gradeId: number
    GrammarQuestion?: GrammarQuestionUncheckedCreateNestedManyWithoutGrammarInput
  }

  export type GrammarUpdateInput = {
    unit?: StringFieldUpdateOperationsInput | string
    tangen?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
    Grade?: GradeUpdateOneRequiredWithoutGrammarNestedInput
    GrammarQuestion?: GrammarQuestionUpdateManyWithoutGrammarNestedInput
  }

  export type GrammarUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    tangen?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    GrammarQuestion?: GrammarQuestionUncheckedUpdateManyWithoutGrammarNestedInput
  }

  export type GrammarCreateManyInput = {
    id?: number
    unit: string
    tangen: string
    localId: number
    gradeId: number
  }

  export type GrammarUpdateManyMutationInput = {
    unit?: StringFieldUpdateOperationsInput | string
    tangen?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
  }

  export type GrammarUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    tangen?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
  }

  export type GrammarQuestionCreateInput = {
    title: string
    sentence: string
    question: JsonNullValueInput | InputJsonValue
    answer: string
    explanation: string
    localId: number
    Grammar: GrammarCreateNestedOneWithoutGrammarQuestionInput
    LikeGrammarQuestion?: LikeGrammarQuestionCreateNestedManyWithoutGrammarQuestionInput
  }

  export type GrammarQuestionUncheckedCreateInput = {
    id?: number
    title: string
    sentence: string
    question: JsonNullValueInput | InputJsonValue
    answer: string
    explanation: string
    localId: number
    grammarId: number
    LikeGrammarQuestion?: LikeGrammarQuestionUncheckedCreateNestedManyWithoutGrammarQuestionInput
  }

  export type GrammarQuestionUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    sentence?: StringFieldUpdateOperationsInput | string
    question?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
    Grammar?: GrammarUpdateOneRequiredWithoutGrammarQuestionNestedInput
    LikeGrammarQuestion?: LikeGrammarQuestionUpdateManyWithoutGrammarQuestionNestedInput
  }

  export type GrammarQuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    sentence?: StringFieldUpdateOperationsInput | string
    question?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
    grammarId?: IntFieldUpdateOperationsInput | number
    LikeGrammarQuestion?: LikeGrammarQuestionUncheckedUpdateManyWithoutGrammarQuestionNestedInput
  }

  export type GrammarQuestionCreateManyInput = {
    id?: number
    title: string
    sentence: string
    question: JsonNullValueInput | InputJsonValue
    answer: string
    explanation: string
    localId: number
    grammarId: number
  }

  export type GrammarQuestionUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    sentence?: StringFieldUpdateOperationsInput | string
    question?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
  }

  export type GrammarQuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    sentence?: StringFieldUpdateOperationsInput | string
    question?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
    grammarId?: IntFieldUpdateOperationsInput | number
  }

  export type LikeGrammarQuestionCreateInput = {
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutLikeGrammarQuestionInput
    GrammarQuestion: GrammarQuestionCreateNestedOneWithoutLikeGrammarQuestionInput
  }

  export type LikeGrammarQuestionUncheckedCreateInput = {
    id?: number
    userId: string
    grammarQuestionId: number
    createdAt?: Date | string
  }

  export type LikeGrammarQuestionUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutLikeGrammarQuestionNestedInput
    GrammarQuestion?: GrammarQuestionUpdateOneRequiredWithoutLikeGrammarQuestionNestedInput
  }

  export type LikeGrammarQuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    grammarQuestionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeGrammarQuestionCreateManyInput = {
    id?: number
    userId: string
    grammarQuestionId: number
    createdAt?: Date | string
  }

  export type LikeGrammarQuestionUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeGrammarQuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    grammarQuestionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeListeningCreateInput = {
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutLikeListeningInput
    Listening: ListeningCreateNestedOneWithoutLikeListeningInput
  }

  export type LikeListeningUncheckedCreateInput = {
    id?: number
    userId: string
    listeningId: number
    createdAt?: Date | string
  }

  export type LikeListeningUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutLikeListeningNestedInput
    Listening?: ListeningUpdateOneRequiredWithoutLikeListeningNestedInput
  }

  export type LikeListeningUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    listeningId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeListeningCreateManyInput = {
    id?: number
    userId: string
    listeningId: number
    createdAt?: Date | string
  }

  export type LikeListeningUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeListeningUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    listeningId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListeningCreateInput = {
    title: string
    url: string
    lap: number
    localId: number
    LikeListening?: LikeListeningCreateNestedManyWithoutListeningInput
  }

  export type ListeningUncheckedCreateInput = {
    id?: number
    title: string
    url: string
    lap: number
    localId: number
    LikeListening?: LikeListeningUncheckedCreateNestedManyWithoutListeningInput
  }

  export type ListeningUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    lap?: IntFieldUpdateOperationsInput | number
    localId?: IntFieldUpdateOperationsInput | number
    LikeListening?: LikeListeningUpdateManyWithoutListeningNestedInput
  }

  export type ListeningUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    lap?: IntFieldUpdateOperationsInput | number
    localId?: IntFieldUpdateOperationsInput | number
    LikeListening?: LikeListeningUncheckedUpdateManyWithoutListeningNestedInput
  }

  export type ListeningCreateManyInput = {
    id?: number
    title: string
    url: string
    lap: number
    localId: number
  }

  export type ListeningUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    lap?: IntFieldUpdateOperationsInput | number
    localId?: IntFieldUpdateOperationsInput | number
  }

  export type ListeningUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    lap?: IntFieldUpdateOperationsInput | number
    localId?: IntFieldUpdateOperationsInput | number
  }

  export type LogCreateInput = {
    about: $Enums.LogAbout
    level: $Enums.LogLevel
    message: string
    meta?: NullableJsonNullValueInput | InputJsonValue
  }

  export type LogUncheckedCreateInput = {
    id?: number
    about: $Enums.LogAbout
    level: $Enums.LogLevel
    message: string
    meta?: NullableJsonNullValueInput | InputJsonValue
  }

  export type LogUpdateInput = {
    about?: EnumLogAboutFieldUpdateOperationsInput | $Enums.LogAbout
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
  }

  export type LogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    about?: EnumLogAboutFieldUpdateOperationsInput | $Enums.LogAbout
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
  }

  export type LogCreateManyInput = {
    id?: number
    about: $Enums.LogAbout
    level: $Enums.LogLevel
    message: string
    meta?: NullableJsonNullValueInput | InputJsonValue
  }

  export type LogUpdateManyMutationInput = {
    about?: EnumLogAboutFieldUpdateOperationsInput | $Enums.LogAbout
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
  }

  export type LogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    about?: EnumLogAboutFieldUpdateOperationsInput | $Enums.LogAbout
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProductCreateInput = {
    name: string
    price: number
    checkoutType: $Enums.checkoutType
    image?: NullableJsonNullValueInput | InputJsonValue
    priceId: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ProductReview?: ProductReviewCreateNestedManyWithoutProductInput
    StripeCheckout?: StripeCheckoutCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    name: string
    price: number
    checkoutType: $Enums.checkoutType
    image?: NullableJsonNullValueInput | InputJsonValue
    priceId: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ProductReview?: ProductReviewUncheckedCreateNestedManyWithoutProductInput
    StripeCheckout?: StripeCheckoutUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    checkoutType?: EnumcheckoutTypeFieldUpdateOperationsInput | $Enums.checkoutType
    image?: NullableJsonNullValueInput | InputJsonValue
    priceId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ProductReview?: ProductReviewUpdateManyWithoutProductNestedInput
    StripeCheckout?: StripeCheckoutUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    checkoutType?: EnumcheckoutTypeFieldUpdateOperationsInput | $Enums.checkoutType
    image?: NullableJsonNullValueInput | InputJsonValue
    priceId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ProductReview?: ProductReviewUncheckedUpdateManyWithoutProductNestedInput
    StripeCheckout?: StripeCheckoutUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: number
    name: string
    price: number
    checkoutType: $Enums.checkoutType
    image?: NullableJsonNullValueInput | InputJsonValue
    priceId: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    checkoutType?: EnumcheckoutTypeFieldUpdateOperationsInput | $Enums.checkoutType
    image?: NullableJsonNullValueInput | InputJsonValue
    priceId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    checkoutType?: EnumcheckoutTypeFieldUpdateOperationsInput | $Enums.checkoutType
    image?: NullableJsonNullValueInput | InputJsonValue
    priceId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductReviewCreateInput = {
    text: string
    reviewer: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Product: ProductCreateNestedOneWithoutProductReviewInput
    StripeCheckout?: StripeCheckoutCreateNestedOneWithoutProductReviewInput
  }

  export type ProductReviewUncheckedCreateInput = {
    id?: number
    text: string
    reviewer: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
    productId: number
    checkoutId?: number | null
  }

  export type ProductReviewUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
    reviewer?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: ProductUpdateOneRequiredWithoutProductReviewNestedInput
    StripeCheckout?: StripeCheckoutUpdateOneWithoutProductReviewNestedInput
  }

  export type ProductReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    reviewer?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: IntFieldUpdateOperationsInput | number
    checkoutId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProductReviewCreateManyInput = {
    id?: number
    text: string
    reviewer: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
    productId: number
    checkoutId?: number | null
  }

  export type ProductReviewUpdateManyMutationInput = {
    text?: StringFieldUpdateOperationsInput | string
    reviewer?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    reviewer?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: IntFieldUpdateOperationsInput | number
    checkoutId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OneTimePasswordCreateInput = {
    usage: $Enums.OneTimeNumberUsage
    oneTimePassword: string
    validated?: boolean
    updatedAt?: Date | string
    User?: UserCreateNestedOneWithoutOneTimePasswordInput
    AdminUser?: AdminUserCreateNestedOneWithoutOneTimePasswordInput
  }

  export type OneTimePasswordUncheckedCreateInput = {
    id?: number
    usage: $Enums.OneTimeNumberUsage
    oneTimePassword: string
    validated?: boolean
    updatedAt?: Date | string
    userId?: string | null
    adminUserId?: string | null
  }

  export type OneTimePasswordUpdateInput = {
    usage?: EnumOneTimeNumberUsageFieldUpdateOperationsInput | $Enums.OneTimeNumberUsage
    oneTimePassword?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneWithoutOneTimePasswordNestedInput
    AdminUser?: AdminUserUpdateOneWithoutOneTimePasswordNestedInput
  }

  export type OneTimePasswordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usage?: EnumOneTimeNumberUsageFieldUpdateOperationsInput | $Enums.OneTimeNumberUsage
    oneTimePassword?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    adminUserId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OneTimePasswordCreateManyInput = {
    id?: number
    usage: $Enums.OneTimeNumberUsage
    oneTimePassword: string
    validated?: boolean
    updatedAt?: Date | string
    userId?: string | null
    adminUserId?: string | null
  }

  export type OneTimePasswordUpdateManyMutationInput = {
    usage?: EnumOneTimeNumberUsageFieldUpdateOperationsInput | $Enums.OneTimeNumberUsage
    oneTimePassword?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OneTimePasswordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usage?: EnumOneTimeNumberUsageFieldUpdateOperationsInput | $Enums.OneTimeNumberUsage
    oneTimePassword?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    adminUserId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StripeCheckoutCreateInput = {
    paymentId: string
    name: string
    email: string
    postCode: string
    address: string
    serialNumber: string
    status: $Enums.checkoutStatus
    manager?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    StripeCustomer?: StripeCustomerCreateNestedOneWithoutStripeCheckoutInput
    Product: ProductCreateNestedOneWithoutStripeCheckoutInput
    ProductReview?: ProductReviewCreateNestedManyWithoutStripeCheckoutInput
  }

  export type StripeCheckoutUncheckedCreateInput = {
    id?: number
    customerId?: string | null
    productId: number
    paymentId: string
    name: string
    email: string
    postCode: string
    address: string
    serialNumber: string
    status: $Enums.checkoutStatus
    manager?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ProductReview?: ProductReviewUncheckedCreateNestedManyWithoutStripeCheckoutInput
  }

  export type StripeCheckoutUpdateInput = {
    paymentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumcheckoutStatusFieldUpdateOperationsInput | $Enums.checkoutStatus
    manager?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    StripeCustomer?: StripeCustomerUpdateOneWithoutStripeCheckoutNestedInput
    Product?: ProductUpdateOneRequiredWithoutStripeCheckoutNestedInput
    ProductReview?: ProductReviewUpdateManyWithoutStripeCheckoutNestedInput
  }

  export type StripeCheckoutUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: IntFieldUpdateOperationsInput | number
    paymentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumcheckoutStatusFieldUpdateOperationsInput | $Enums.checkoutStatus
    manager?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ProductReview?: ProductReviewUncheckedUpdateManyWithoutStripeCheckoutNestedInput
  }

  export type StripeCheckoutCreateManyInput = {
    id?: number
    customerId?: string | null
    productId: number
    paymentId: string
    name: string
    email: string
    postCode: string
    address: string
    serialNumber: string
    status: $Enums.checkoutStatus
    manager?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StripeCheckoutUpdateManyMutationInput = {
    paymentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumcheckoutStatusFieldUpdateOperationsInput | $Enums.checkoutStatus
    manager?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StripeCheckoutUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: IntFieldUpdateOperationsInput | number
    paymentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumcheckoutStatusFieldUpdateOperationsInput | $Enums.checkoutStatus
    manager?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StripeCustomerCreateInput = {
    customerId: string
    User: UserCreateNestedOneWithoutStripeCustomerInput
    StripeCheckout?: StripeCheckoutCreateNestedManyWithoutStripeCustomerInput
    StripeSubscription?: StripeSubscriptionCreateNestedManyWithoutStripeCustomerInput
  }

  export type StripeCustomerUncheckedCreateInput = {
    id?: number
    customerId: string
    userId: string
    StripeCheckout?: StripeCheckoutUncheckedCreateNestedManyWithoutStripeCustomerInput
    StripeSubscription?: StripeSubscriptionUncheckedCreateNestedManyWithoutStripeCustomerInput
  }

  export type StripeCustomerUpdateInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutStripeCustomerNestedInput
    StripeCheckout?: StripeCheckoutUpdateManyWithoutStripeCustomerNestedInput
    StripeSubscription?: StripeSubscriptionUpdateManyWithoutStripeCustomerNestedInput
  }

  export type StripeCustomerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    StripeCheckout?: StripeCheckoutUncheckedUpdateManyWithoutStripeCustomerNestedInput
    StripeSubscription?: StripeSubscriptionUncheckedUpdateManyWithoutStripeCustomerNestedInput
  }

  export type StripeCustomerCreateManyInput = {
    id?: number
    customerId: string
    userId: string
  }

  export type StripeCustomerUpdateManyMutationInput = {
    customerId?: StringFieldUpdateOperationsInput | string
  }

  export type StripeCustomerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StripeSubscriptionCreateInput = {
    subscriptionId: string
    plan: string
    status: $Enums.subscriptionStatus
    periodStart: string
    periodEnd: string
    cancelAt?: string | null
    cancelAtPeriodEnd?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    StripeCustomer: StripeCustomerCreateNestedOneWithoutStripeSubscriptionInput
  }

  export type StripeSubscriptionUncheckedCreateInput = {
    id?: number
    subscriptionId: string
    plan: string
    status: $Enums.subscriptionStatus
    periodStart: string
    periodEnd: string
    cancelAt?: string | null
    cancelAtPeriodEnd?: boolean
    stripeCustomerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StripeSubscriptionUpdateInput = {
    subscriptionId?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    status?: EnumsubscriptionStatusFieldUpdateOperationsInput | $Enums.subscriptionStatus
    periodStart?: StringFieldUpdateOperationsInput | string
    periodEnd?: StringFieldUpdateOperationsInput | string
    cancelAt?: NullableStringFieldUpdateOperationsInput | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    StripeCustomer?: StripeCustomerUpdateOneRequiredWithoutStripeSubscriptionNestedInput
  }

  export type StripeSubscriptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    subscriptionId?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    status?: EnumsubscriptionStatusFieldUpdateOperationsInput | $Enums.subscriptionStatus
    periodStart?: StringFieldUpdateOperationsInput | string
    periodEnd?: StringFieldUpdateOperationsInput | string
    cancelAt?: NullableStringFieldUpdateOperationsInput | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    stripeCustomerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StripeSubscriptionCreateManyInput = {
    id?: number
    subscriptionId: string
    plan: string
    status: $Enums.subscriptionStatus
    periodStart: string
    periodEnd: string
    cancelAt?: string | null
    cancelAtPeriodEnd?: boolean
    stripeCustomerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StripeSubscriptionUpdateManyMutationInput = {
    subscriptionId?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    status?: EnumsubscriptionStatusFieldUpdateOperationsInput | $Enums.subscriptionStatus
    periodStart?: StringFieldUpdateOperationsInput | string
    periodEnd?: StringFieldUpdateOperationsInput | string
    cancelAt?: NullableStringFieldUpdateOperationsInput | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StripeSubscriptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    subscriptionId?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    status?: EnumsubscriptionStatusFieldUpdateOperationsInput | $Enums.subscriptionStatus
    periodStart?: StringFieldUpdateOperationsInput | string
    periodEnd?: StringFieldUpdateOperationsInput | string
    cancelAt?: NullableStringFieldUpdateOperationsInput | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    stripeCustomerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    userName: string
    gender: $Enums.Gender
    country: string
    city: string
    email: string
    birthYear: string
    activated?: boolean
    invited?: boolean
    invitedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    StripeCustomer?: StripeCustomerCreateNestedManyWithoutUserInput
    OneTimePassword?: OneTimePasswordCreateNestedManyWithoutUserInput
    LikeGrammarQuestion?: LikeGrammarQuestionCreateNestedManyWithoutUserInput
    LikeListening?: LikeListeningCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    userName: string
    gender: $Enums.Gender
    country: string
    city: string
    email: string
    birthYear: string
    activated?: boolean
    invited?: boolean
    invitedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    StripeCustomer?: StripeCustomerUncheckedCreateNestedManyWithoutUserInput
    OneTimePassword?: OneTimePasswordUncheckedCreateNestedManyWithoutUserInput
    LikeGrammarQuestion?: LikeGrammarQuestionUncheckedCreateNestedManyWithoutUserInput
    LikeListening?: LikeListeningUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birthYear?: StringFieldUpdateOperationsInput | string
    activated?: BoolFieldUpdateOperationsInput | boolean
    invited?: BoolFieldUpdateOperationsInput | boolean
    invitedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    StripeCustomer?: StripeCustomerUpdateManyWithoutUserNestedInput
    OneTimePassword?: OneTimePasswordUpdateManyWithoutUserNestedInput
    LikeGrammarQuestion?: LikeGrammarQuestionUpdateManyWithoutUserNestedInput
    LikeListening?: LikeListeningUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birthYear?: StringFieldUpdateOperationsInput | string
    activated?: BoolFieldUpdateOperationsInput | boolean
    invited?: BoolFieldUpdateOperationsInput | boolean
    invitedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    StripeCustomer?: StripeCustomerUncheckedUpdateManyWithoutUserNestedInput
    OneTimePassword?: OneTimePasswordUncheckedUpdateManyWithoutUserNestedInput
    LikeGrammarQuestion?: LikeGrammarQuestionUncheckedUpdateManyWithoutUserNestedInput
    LikeListening?: LikeListeningUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    userName: string
    gender: $Enums.Gender
    country: string
    city: string
    email: string
    birthYear: string
    activated?: boolean
    invited?: boolean
    invitedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birthYear?: StringFieldUpdateOperationsInput | string
    activated?: BoolFieldUpdateOperationsInput | boolean
    invited?: BoolFieldUpdateOperationsInput | boolean
    invitedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birthYear?: StringFieldUpdateOperationsInput | string
    activated?: BoolFieldUpdateOperationsInput | boolean
    invited?: BoolFieldUpdateOperationsInput | boolean
    invitedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassageCreateInput = {
    level: $Enums.PassageLevel
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    PassageQuestion?: PassageQuestionCreateNestedManyWithoutPassageInput
    PassageSentence?: PassageSentenceCreateNestedManyWithoutPassageInput
  }

  export type PassageUncheckedCreateInput = {
    id?: number
    level: $Enums.PassageLevel
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    PassageQuestion?: PassageQuestionUncheckedCreateNestedManyWithoutPassageInput
    PassageSentence?: PassageSentenceUncheckedCreateNestedManyWithoutPassageInput
  }

  export type PassageUpdateInput = {
    level?: EnumPassageLevelFieldUpdateOperationsInput | $Enums.PassageLevel
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PassageQuestion?: PassageQuestionUpdateManyWithoutPassageNestedInput
    PassageSentence?: PassageSentenceUpdateManyWithoutPassageNestedInput
  }

  export type PassageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: EnumPassageLevelFieldUpdateOperationsInput | $Enums.PassageLevel
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PassageQuestion?: PassageQuestionUncheckedUpdateManyWithoutPassageNestedInput
    PassageSentence?: PassageSentenceUncheckedUpdateManyWithoutPassageNestedInput
  }

  export type PassageCreateManyInput = {
    id?: number
    level: $Enums.PassageLevel
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassageUpdateManyMutationInput = {
    level?: EnumPassageLevelFieldUpdateOperationsInput | $Enums.PassageLevel
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: EnumPassageLevelFieldUpdateOperationsInput | $Enums.PassageLevel
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassageQuestionCreateInput = {
    question1?: NullableJsonNullValueInput | InputJsonValue
    question2?: NullableJsonNullValueInput | InputJsonValue
    question3?: NullableJsonNullValueInput | InputJsonValue
    question4?: NullableJsonNullValueInput | InputJsonValue
    question5?: NullableJsonNullValueInput | InputJsonValue
    question6?: NullableJsonNullValueInput | InputJsonValue
    question7?: NullableJsonNullValueInput | InputJsonValue
    question8?: NullableJsonNullValueInput | InputJsonValue
    question9?: NullableJsonNullValueInput | InputJsonValue
    question10?: NullableJsonNullValueInput | InputJsonValue
    question11?: NullableJsonNullValueInput | InputJsonValue
    question12?: NullableJsonNullValueInput | InputJsonValue
    question13?: NullableJsonNullValueInput | InputJsonValue
    question14?: NullableJsonNullValueInput | InputJsonValue
    question15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    Passage: PassageCreateNestedOneWithoutPassageQuestionInput
  }

  export type PassageQuestionUncheckedCreateInput = {
    id?: number
    question1?: NullableJsonNullValueInput | InputJsonValue
    question2?: NullableJsonNullValueInput | InputJsonValue
    question3?: NullableJsonNullValueInput | InputJsonValue
    question4?: NullableJsonNullValueInput | InputJsonValue
    question5?: NullableJsonNullValueInput | InputJsonValue
    question6?: NullableJsonNullValueInput | InputJsonValue
    question7?: NullableJsonNullValueInput | InputJsonValue
    question8?: NullableJsonNullValueInput | InputJsonValue
    question9?: NullableJsonNullValueInput | InputJsonValue
    question10?: NullableJsonNullValueInput | InputJsonValue
    question11?: NullableJsonNullValueInput | InputJsonValue
    question12?: NullableJsonNullValueInput | InputJsonValue
    question13?: NullableJsonNullValueInput | InputJsonValue
    question14?: NullableJsonNullValueInput | InputJsonValue
    question15?: NullableJsonNullValueInput | InputJsonValue
    passageId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassageQuestionUpdateInput = {
    question1?: NullableJsonNullValueInput | InputJsonValue
    question2?: NullableJsonNullValueInput | InputJsonValue
    question3?: NullableJsonNullValueInput | InputJsonValue
    question4?: NullableJsonNullValueInput | InputJsonValue
    question5?: NullableJsonNullValueInput | InputJsonValue
    question6?: NullableJsonNullValueInput | InputJsonValue
    question7?: NullableJsonNullValueInput | InputJsonValue
    question8?: NullableJsonNullValueInput | InputJsonValue
    question9?: NullableJsonNullValueInput | InputJsonValue
    question10?: NullableJsonNullValueInput | InputJsonValue
    question11?: NullableJsonNullValueInput | InputJsonValue
    question12?: NullableJsonNullValueInput | InputJsonValue
    question13?: NullableJsonNullValueInput | InputJsonValue
    question14?: NullableJsonNullValueInput | InputJsonValue
    question15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Passage?: PassageUpdateOneRequiredWithoutPassageQuestionNestedInput
  }

  export type PassageQuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    question1?: NullableJsonNullValueInput | InputJsonValue
    question2?: NullableJsonNullValueInput | InputJsonValue
    question3?: NullableJsonNullValueInput | InputJsonValue
    question4?: NullableJsonNullValueInput | InputJsonValue
    question5?: NullableJsonNullValueInput | InputJsonValue
    question6?: NullableJsonNullValueInput | InputJsonValue
    question7?: NullableJsonNullValueInput | InputJsonValue
    question8?: NullableJsonNullValueInput | InputJsonValue
    question9?: NullableJsonNullValueInput | InputJsonValue
    question10?: NullableJsonNullValueInput | InputJsonValue
    question11?: NullableJsonNullValueInput | InputJsonValue
    question12?: NullableJsonNullValueInput | InputJsonValue
    question13?: NullableJsonNullValueInput | InputJsonValue
    question14?: NullableJsonNullValueInput | InputJsonValue
    question15?: NullableJsonNullValueInput | InputJsonValue
    passageId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassageQuestionCreateManyInput = {
    id?: number
    question1?: NullableJsonNullValueInput | InputJsonValue
    question2?: NullableJsonNullValueInput | InputJsonValue
    question3?: NullableJsonNullValueInput | InputJsonValue
    question4?: NullableJsonNullValueInput | InputJsonValue
    question5?: NullableJsonNullValueInput | InputJsonValue
    question6?: NullableJsonNullValueInput | InputJsonValue
    question7?: NullableJsonNullValueInput | InputJsonValue
    question8?: NullableJsonNullValueInput | InputJsonValue
    question9?: NullableJsonNullValueInput | InputJsonValue
    question10?: NullableJsonNullValueInput | InputJsonValue
    question11?: NullableJsonNullValueInput | InputJsonValue
    question12?: NullableJsonNullValueInput | InputJsonValue
    question13?: NullableJsonNullValueInput | InputJsonValue
    question14?: NullableJsonNullValueInput | InputJsonValue
    question15?: NullableJsonNullValueInput | InputJsonValue
    passageId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassageQuestionUpdateManyMutationInput = {
    question1?: NullableJsonNullValueInput | InputJsonValue
    question2?: NullableJsonNullValueInput | InputJsonValue
    question3?: NullableJsonNullValueInput | InputJsonValue
    question4?: NullableJsonNullValueInput | InputJsonValue
    question5?: NullableJsonNullValueInput | InputJsonValue
    question6?: NullableJsonNullValueInput | InputJsonValue
    question7?: NullableJsonNullValueInput | InputJsonValue
    question8?: NullableJsonNullValueInput | InputJsonValue
    question9?: NullableJsonNullValueInput | InputJsonValue
    question10?: NullableJsonNullValueInput | InputJsonValue
    question11?: NullableJsonNullValueInput | InputJsonValue
    question12?: NullableJsonNullValueInput | InputJsonValue
    question13?: NullableJsonNullValueInput | InputJsonValue
    question14?: NullableJsonNullValueInput | InputJsonValue
    question15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassageQuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    question1?: NullableJsonNullValueInput | InputJsonValue
    question2?: NullableJsonNullValueInput | InputJsonValue
    question3?: NullableJsonNullValueInput | InputJsonValue
    question4?: NullableJsonNullValueInput | InputJsonValue
    question5?: NullableJsonNullValueInput | InputJsonValue
    question6?: NullableJsonNullValueInput | InputJsonValue
    question7?: NullableJsonNullValueInput | InputJsonValue
    question8?: NullableJsonNullValueInput | InputJsonValue
    question9?: NullableJsonNullValueInput | InputJsonValue
    question10?: NullableJsonNullValueInput | InputJsonValue
    question11?: NullableJsonNullValueInput | InputJsonValue
    question12?: NullableJsonNullValueInput | InputJsonValue
    question13?: NullableJsonNullValueInput | InputJsonValue
    question14?: NullableJsonNullValueInput | InputJsonValue
    question15?: NullableJsonNullValueInput | InputJsonValue
    passageId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassageSentenceCreateInput = {
    sentence1?: NullableJsonNullValueInput | InputJsonValue
    sentence2?: NullableJsonNullValueInput | InputJsonValue
    sentence3?: NullableJsonNullValueInput | InputJsonValue
    sentence4?: NullableJsonNullValueInput | InputJsonValue
    sentence5?: NullableJsonNullValueInput | InputJsonValue
    sentence6?: NullableJsonNullValueInput | InputJsonValue
    sentence7?: NullableJsonNullValueInput | InputJsonValue
    sentence8?: NullableJsonNullValueInput | InputJsonValue
    sentence9?: NullableJsonNullValueInput | InputJsonValue
    sentence10?: NullableJsonNullValueInput | InputJsonValue
    sentence11?: NullableJsonNullValueInput | InputJsonValue
    sentence12?: NullableJsonNullValueInput | InputJsonValue
    sentence13?: NullableJsonNullValueInput | InputJsonValue
    sentence14?: NullableJsonNullValueInput | InputJsonValue
    sentence15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    Passage: PassageCreateNestedOneWithoutPassageSentenceInput
  }

  export type PassageSentenceUncheckedCreateInput = {
    id?: number
    sentence1?: NullableJsonNullValueInput | InputJsonValue
    sentence2?: NullableJsonNullValueInput | InputJsonValue
    sentence3?: NullableJsonNullValueInput | InputJsonValue
    sentence4?: NullableJsonNullValueInput | InputJsonValue
    sentence5?: NullableJsonNullValueInput | InputJsonValue
    sentence6?: NullableJsonNullValueInput | InputJsonValue
    sentence7?: NullableJsonNullValueInput | InputJsonValue
    sentence8?: NullableJsonNullValueInput | InputJsonValue
    sentence9?: NullableJsonNullValueInput | InputJsonValue
    sentence10?: NullableJsonNullValueInput | InputJsonValue
    sentence11?: NullableJsonNullValueInput | InputJsonValue
    sentence12?: NullableJsonNullValueInput | InputJsonValue
    sentence13?: NullableJsonNullValueInput | InputJsonValue
    sentence14?: NullableJsonNullValueInput | InputJsonValue
    sentence15?: NullableJsonNullValueInput | InputJsonValue
    passageId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassageSentenceUpdateInput = {
    sentence1?: NullableJsonNullValueInput | InputJsonValue
    sentence2?: NullableJsonNullValueInput | InputJsonValue
    sentence3?: NullableJsonNullValueInput | InputJsonValue
    sentence4?: NullableJsonNullValueInput | InputJsonValue
    sentence5?: NullableJsonNullValueInput | InputJsonValue
    sentence6?: NullableJsonNullValueInput | InputJsonValue
    sentence7?: NullableJsonNullValueInput | InputJsonValue
    sentence8?: NullableJsonNullValueInput | InputJsonValue
    sentence9?: NullableJsonNullValueInput | InputJsonValue
    sentence10?: NullableJsonNullValueInput | InputJsonValue
    sentence11?: NullableJsonNullValueInput | InputJsonValue
    sentence12?: NullableJsonNullValueInput | InputJsonValue
    sentence13?: NullableJsonNullValueInput | InputJsonValue
    sentence14?: NullableJsonNullValueInput | InputJsonValue
    sentence15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Passage?: PassageUpdateOneRequiredWithoutPassageSentenceNestedInput
  }

  export type PassageSentenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sentence1?: NullableJsonNullValueInput | InputJsonValue
    sentence2?: NullableJsonNullValueInput | InputJsonValue
    sentence3?: NullableJsonNullValueInput | InputJsonValue
    sentence4?: NullableJsonNullValueInput | InputJsonValue
    sentence5?: NullableJsonNullValueInput | InputJsonValue
    sentence6?: NullableJsonNullValueInput | InputJsonValue
    sentence7?: NullableJsonNullValueInput | InputJsonValue
    sentence8?: NullableJsonNullValueInput | InputJsonValue
    sentence9?: NullableJsonNullValueInput | InputJsonValue
    sentence10?: NullableJsonNullValueInput | InputJsonValue
    sentence11?: NullableJsonNullValueInput | InputJsonValue
    sentence12?: NullableJsonNullValueInput | InputJsonValue
    sentence13?: NullableJsonNullValueInput | InputJsonValue
    sentence14?: NullableJsonNullValueInput | InputJsonValue
    sentence15?: NullableJsonNullValueInput | InputJsonValue
    passageId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassageSentenceCreateManyInput = {
    id?: number
    sentence1?: NullableJsonNullValueInput | InputJsonValue
    sentence2?: NullableJsonNullValueInput | InputJsonValue
    sentence3?: NullableJsonNullValueInput | InputJsonValue
    sentence4?: NullableJsonNullValueInput | InputJsonValue
    sentence5?: NullableJsonNullValueInput | InputJsonValue
    sentence6?: NullableJsonNullValueInput | InputJsonValue
    sentence7?: NullableJsonNullValueInput | InputJsonValue
    sentence8?: NullableJsonNullValueInput | InputJsonValue
    sentence9?: NullableJsonNullValueInput | InputJsonValue
    sentence10?: NullableJsonNullValueInput | InputJsonValue
    sentence11?: NullableJsonNullValueInput | InputJsonValue
    sentence12?: NullableJsonNullValueInput | InputJsonValue
    sentence13?: NullableJsonNullValueInput | InputJsonValue
    sentence14?: NullableJsonNullValueInput | InputJsonValue
    sentence15?: NullableJsonNullValueInput | InputJsonValue
    passageId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassageSentenceUpdateManyMutationInput = {
    sentence1?: NullableJsonNullValueInput | InputJsonValue
    sentence2?: NullableJsonNullValueInput | InputJsonValue
    sentence3?: NullableJsonNullValueInput | InputJsonValue
    sentence4?: NullableJsonNullValueInput | InputJsonValue
    sentence5?: NullableJsonNullValueInput | InputJsonValue
    sentence6?: NullableJsonNullValueInput | InputJsonValue
    sentence7?: NullableJsonNullValueInput | InputJsonValue
    sentence8?: NullableJsonNullValueInput | InputJsonValue
    sentence9?: NullableJsonNullValueInput | InputJsonValue
    sentence10?: NullableJsonNullValueInput | InputJsonValue
    sentence11?: NullableJsonNullValueInput | InputJsonValue
    sentence12?: NullableJsonNullValueInput | InputJsonValue
    sentence13?: NullableJsonNullValueInput | InputJsonValue
    sentence14?: NullableJsonNullValueInput | InputJsonValue
    sentence15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassageSentenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sentence1?: NullableJsonNullValueInput | InputJsonValue
    sentence2?: NullableJsonNullValueInput | InputJsonValue
    sentence3?: NullableJsonNullValueInput | InputJsonValue
    sentence4?: NullableJsonNullValueInput | InputJsonValue
    sentence5?: NullableJsonNullValueInput | InputJsonValue
    sentence6?: NullableJsonNullValueInput | InputJsonValue
    sentence7?: NullableJsonNullValueInput | InputJsonValue
    sentence8?: NullableJsonNullValueInput | InputJsonValue
    sentence9?: NullableJsonNullValueInput | InputJsonValue
    sentence10?: NullableJsonNullValueInput | InputJsonValue
    sentence11?: NullableJsonNullValueInput | InputJsonValue
    sentence12?: NullableJsonNullValueInput | InputJsonValue
    sentence13?: NullableJsonNullValueInput | InputJsonValue
    sentence14?: NullableJsonNullValueInput | InputJsonValue
    sentence15?: NullableJsonNullValueInput | InputJsonValue
    passageId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumAdminRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRole[]
    notIn?: $Enums.AdminRole[]
    not?: NestedEnumAdminRoleFilter<$PrismaModel> | $Enums.AdminRole
  }

  export type OneTimePasswordListRelationFilter = {
    every?: OneTimePasswordWhereInput
    some?: OneTimePasswordWhereInput
    none?: OneTimePasswordWhereInput
  }

  export type OneTimePasswordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminUserCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    adminName?: SortOrder
    adminEmail?: SortOrder
    password?: SortOrder
  }

  export type AdminUserMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    adminName?: SortOrder
    adminEmail?: SortOrder
    password?: SortOrder
  }

  export type AdminUserMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    adminName?: SortOrder
    adminEmail?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumAdminRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRole[]
    notIn?: $Enums.AdminRole[]
    not?: NestedEnumAdminRoleWithAggregatesFilter<$PrismaModel> | $Enums.AdminRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdminRoleFilter<$PrismaModel>
    _max?: NestedEnumAdminRoleFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BlogCategoryRelationFilter = {
    is?: BlogCategoryWhereInput
    isNot?: BlogCategoryWhereInput
  }

  export type BlogUniversityDepartmentListRelationFilter = {
    every?: BlogUniversityDepartmentWhereInput
    some?: BlogUniversityDepartmentWhereInput
    none?: BlogUniversityDepartmentWhereInput
  }

  export type BlogUniversityDepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BlogCountOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    published?: SortOrder
    name?: SortOrder
    title?: SortOrder
    keywordList?: SortOrder
    description?: SortOrder
  }

  export type BlogAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type BlogMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    published?: SortOrder
    name?: SortOrder
    title?: SortOrder
    keywordList?: SortOrder
    description?: SortOrder
  }

  export type BlogMinOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    published?: SortOrder
    name?: SortOrder
    title?: SortOrder
    keywordList?: SortOrder
    description?: SortOrder
  }

  export type BlogSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BlogListRelationFilter = {
    every?: BlogWhereInput
    some?: BlogWhereInput
    none?: BlogWhereInput
  }

  export type BlogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BlogCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
  }

  export type BlogCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BlogCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
  }

  export type BlogCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
  }

  export type BlogCategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BlogUniversityCountOrderByAggregateInput = {
    id?: SortOrder
    schoolName?: SortOrder
    publicSchool?: SortOrder
    region?: SortOrder
    eikenUsable?: SortOrder
    schoolUrl?: SortOrder
  }

  export type BlogUniversityAvgOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
  }

  export type BlogUniversityMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolName?: SortOrder
    publicSchool?: SortOrder
    region?: SortOrder
    eikenUsable?: SortOrder
    schoolUrl?: SortOrder
  }

  export type BlogUniversityMinOrderByAggregateInput = {
    id?: SortOrder
    schoolName?: SortOrder
    publicSchool?: SortOrder
    region?: SortOrder
    eikenUsable?: SortOrder
    schoolUrl?: SortOrder
  }

  export type BlogUniversitySumOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BlogNullableRelationFilter = {
    is?: BlogWhereInput | null
    isNot?: BlogWhereInput | null
  }

  export type BlogUniversityRelationFilter = {
    is?: BlogUniversityWhereInput
    isNot?: BlogUniversityWhereInput
  }

  export type BlogUniversityDepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    blogId?: SortOrder
    universityId?: SortOrder
    name?: SortOrder
    rikei?: SortOrder
    examType?: SortOrder
    articleYear?: SortOrder
  }

  export type BlogUniversityDepartmentAvgOrderByAggregateInput = {
    id?: SortOrder
    blogId?: SortOrder
    universityId?: SortOrder
    examType?: SortOrder
  }

  export type BlogUniversityDepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    blogId?: SortOrder
    universityId?: SortOrder
    name?: SortOrder
    rikei?: SortOrder
    examType?: SortOrder
    articleYear?: SortOrder
  }

  export type BlogUniversityDepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    blogId?: SortOrder
    universityId?: SortOrder
    name?: SortOrder
    rikei?: SortOrder
    examType?: SortOrder
    articleYear?: SortOrder
  }

  export type BlogUniversityDepartmentSumOrderByAggregateInput = {
    id?: SortOrder
    blogId?: SortOrder
    universityId?: SortOrder
    examType?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type GrammarListRelationFilter = {
    every?: GrammarWhereInput
    some?: GrammarWhereInput
    none?: GrammarWhereInput
  }

  export type GrammarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GradeCountOrderByAggregateInput = {
    id?: SortOrder
    grade?: SortOrder
    gradeJp?: SortOrder
  }

  export type GradeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GradeMaxOrderByAggregateInput = {
    id?: SortOrder
    grade?: SortOrder
    gradeJp?: SortOrder
  }

  export type GradeMinOrderByAggregateInput = {
    id?: SortOrder
    grade?: SortOrder
    gradeJp?: SortOrder
  }

  export type GradeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GradeRelationFilter = {
    is?: GradeWhereInput
    isNot?: GradeWhereInput
  }

  export type GrammarQuestionListRelationFilter = {
    every?: GrammarQuestionWhereInput
    some?: GrammarQuestionWhereInput
    none?: GrammarQuestionWhereInput
  }

  export type GrammarQuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GrammarCountOrderByAggregateInput = {
    id?: SortOrder
    unit?: SortOrder
    tangen?: SortOrder
    localId?: SortOrder
    gradeId?: SortOrder
  }

  export type GrammarAvgOrderByAggregateInput = {
    id?: SortOrder
    localId?: SortOrder
    gradeId?: SortOrder
  }

  export type GrammarMaxOrderByAggregateInput = {
    id?: SortOrder
    unit?: SortOrder
    tangen?: SortOrder
    localId?: SortOrder
    gradeId?: SortOrder
  }

  export type GrammarMinOrderByAggregateInput = {
    id?: SortOrder
    unit?: SortOrder
    tangen?: SortOrder
    localId?: SortOrder
    gradeId?: SortOrder
  }

  export type GrammarSumOrderByAggregateInput = {
    id?: SortOrder
    localId?: SortOrder
    gradeId?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type GrammarRelationFilter = {
    is?: GrammarWhereInput
    isNot?: GrammarWhereInput
  }

  export type LikeGrammarQuestionListRelationFilter = {
    every?: LikeGrammarQuestionWhereInput
    some?: LikeGrammarQuestionWhereInput
    none?: LikeGrammarQuestionWhereInput
  }

  export type LikeGrammarQuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GrammarQuestionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    sentence?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    explanation?: SortOrder
    localId?: SortOrder
    grammarId?: SortOrder
  }

  export type GrammarQuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    localId?: SortOrder
    grammarId?: SortOrder
  }

  export type GrammarQuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    sentence?: SortOrder
    answer?: SortOrder
    explanation?: SortOrder
    localId?: SortOrder
    grammarId?: SortOrder
  }

  export type GrammarQuestionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    sentence?: SortOrder
    answer?: SortOrder
    explanation?: SortOrder
    localId?: SortOrder
    grammarId?: SortOrder
  }

  export type GrammarQuestionSumOrderByAggregateInput = {
    id?: SortOrder
    localId?: SortOrder
    grammarId?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type GrammarQuestionRelationFilter = {
    is?: GrammarQuestionWhereInput
    isNot?: GrammarQuestionWhereInput
  }

  export type LikeGrammarQuestionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    grammarQuestionId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeGrammarQuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    grammarQuestionId?: SortOrder
  }

  export type LikeGrammarQuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    grammarQuestionId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeGrammarQuestionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    grammarQuestionId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeGrammarQuestionSumOrderByAggregateInput = {
    id?: SortOrder
    grammarQuestionId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ListeningRelationFilter = {
    is?: ListeningWhereInput
    isNot?: ListeningWhereInput
  }

  export type LikeListeningCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    listeningId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeListeningAvgOrderByAggregateInput = {
    id?: SortOrder
    listeningId?: SortOrder
  }

  export type LikeListeningMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    listeningId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeListeningMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    listeningId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeListeningSumOrderByAggregateInput = {
    id?: SortOrder
    listeningId?: SortOrder
  }

  export type LikeListeningListRelationFilter = {
    every?: LikeListeningWhereInput
    some?: LikeListeningWhereInput
    none?: LikeListeningWhereInput
  }

  export type LikeListeningOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ListeningCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    url?: SortOrder
    lap?: SortOrder
    localId?: SortOrder
  }

  export type ListeningAvgOrderByAggregateInput = {
    id?: SortOrder
    lap?: SortOrder
    localId?: SortOrder
  }

  export type ListeningMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    url?: SortOrder
    lap?: SortOrder
    localId?: SortOrder
  }

  export type ListeningMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    url?: SortOrder
    lap?: SortOrder
    localId?: SortOrder
  }

  export type ListeningSumOrderByAggregateInput = {
    id?: SortOrder
    lap?: SortOrder
    localId?: SortOrder
  }

  export type EnumLogAboutFilter<$PrismaModel = never> = {
    equals?: $Enums.LogAbout | EnumLogAboutFieldRefInput<$PrismaModel>
    in?: $Enums.LogAbout[]
    notIn?: $Enums.LogAbout[]
    not?: NestedEnumLogAboutFilter<$PrismaModel> | $Enums.LogAbout
  }

  export type EnumLogLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.LogLevel | EnumLogLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LogLevel[]
    notIn?: $Enums.LogLevel[]
    not?: NestedEnumLogLevelFilter<$PrismaModel> | $Enums.LogLevel
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type LogCountOrderByAggregateInput = {
    id?: SortOrder
    about?: SortOrder
    level?: SortOrder
    message?: SortOrder
    meta?: SortOrder
  }

  export type LogAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LogMaxOrderByAggregateInput = {
    id?: SortOrder
    about?: SortOrder
    level?: SortOrder
    message?: SortOrder
  }

  export type LogMinOrderByAggregateInput = {
    id?: SortOrder
    about?: SortOrder
    level?: SortOrder
    message?: SortOrder
  }

  export type LogSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumLogAboutWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogAbout | EnumLogAboutFieldRefInput<$PrismaModel>
    in?: $Enums.LogAbout[]
    notIn?: $Enums.LogAbout[]
    not?: NestedEnumLogAboutWithAggregatesFilter<$PrismaModel> | $Enums.LogAbout
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogAboutFilter<$PrismaModel>
    _max?: NestedEnumLogAboutFilter<$PrismaModel>
  }

  export type EnumLogLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogLevel | EnumLogLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LogLevel[]
    notIn?: $Enums.LogLevel[]
    not?: NestedEnumLogLevelWithAggregatesFilter<$PrismaModel> | $Enums.LogLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogLevelFilter<$PrismaModel>
    _max?: NestedEnumLogLevelFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumcheckoutTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.checkoutType | EnumcheckoutTypeFieldRefInput<$PrismaModel>
    in?: $Enums.checkoutType[]
    notIn?: $Enums.checkoutType[]
    not?: NestedEnumcheckoutTypeFilter<$PrismaModel> | $Enums.checkoutType
  }

  export type ProductReviewListRelationFilter = {
    every?: ProductReviewWhereInput
    some?: ProductReviewWhereInput
    none?: ProductReviewWhereInput
  }

  export type StripeCheckoutListRelationFilter = {
    every?: StripeCheckoutWhereInput
    some?: StripeCheckoutWhereInput
    none?: StripeCheckoutWhereInput
  }

  export type ProductReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StripeCheckoutOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    checkoutType?: SortOrder
    image?: SortOrder
    priceId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    checkoutType?: SortOrder
    priceId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    checkoutType?: SortOrder
    priceId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type EnumcheckoutTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.checkoutType | EnumcheckoutTypeFieldRefInput<$PrismaModel>
    in?: $Enums.checkoutType[]
    notIn?: $Enums.checkoutType[]
    not?: NestedEnumcheckoutTypeWithAggregatesFilter<$PrismaModel> | $Enums.checkoutType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcheckoutTypeFilter<$PrismaModel>
    _max?: NestedEnumcheckoutTypeFilter<$PrismaModel>
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type StripeCheckoutNullableRelationFilter = {
    is?: StripeCheckoutWhereInput | null
    isNot?: StripeCheckoutWhereInput | null
  }

  export type ProductReviewCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    reviewer?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productId?: SortOrder
    checkoutId?: SortOrder
  }

  export type ProductReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    productId?: SortOrder
    checkoutId?: SortOrder
  }

  export type ProductReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    reviewer?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productId?: SortOrder
    checkoutId?: SortOrder
  }

  export type ProductReviewMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    reviewer?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productId?: SortOrder
    checkoutId?: SortOrder
  }

  export type ProductReviewSumOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    productId?: SortOrder
    checkoutId?: SortOrder
  }

  export type EnumOneTimeNumberUsageFilter<$PrismaModel = never> = {
    equals?: $Enums.OneTimeNumberUsage | EnumOneTimeNumberUsageFieldRefInput<$PrismaModel>
    in?: $Enums.OneTimeNumberUsage[]
    notIn?: $Enums.OneTimeNumberUsage[]
    not?: NestedEnumOneTimeNumberUsageFilter<$PrismaModel> | $Enums.OneTimeNumberUsage
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AdminUserNullableRelationFilter = {
    is?: AdminUserWhereInput | null
    isNot?: AdminUserWhereInput | null
  }

  export type OneTimePasswordCountOrderByAggregateInput = {
    id?: SortOrder
    usage?: SortOrder
    oneTimePassword?: SortOrder
    validated?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    adminUserId?: SortOrder
  }

  export type OneTimePasswordAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OneTimePasswordMaxOrderByAggregateInput = {
    id?: SortOrder
    usage?: SortOrder
    oneTimePassword?: SortOrder
    validated?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    adminUserId?: SortOrder
  }

  export type OneTimePasswordMinOrderByAggregateInput = {
    id?: SortOrder
    usage?: SortOrder
    oneTimePassword?: SortOrder
    validated?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    adminUserId?: SortOrder
  }

  export type OneTimePasswordSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumOneTimeNumberUsageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OneTimeNumberUsage | EnumOneTimeNumberUsageFieldRefInput<$PrismaModel>
    in?: $Enums.OneTimeNumberUsage[]
    notIn?: $Enums.OneTimeNumberUsage[]
    not?: NestedEnumOneTimeNumberUsageWithAggregatesFilter<$PrismaModel> | $Enums.OneTimeNumberUsage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOneTimeNumberUsageFilter<$PrismaModel>
    _max?: NestedEnumOneTimeNumberUsageFilter<$PrismaModel>
  }

  export type EnumcheckoutStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.checkoutStatus | EnumcheckoutStatusFieldRefInput<$PrismaModel>
    in?: $Enums.checkoutStatus[]
    notIn?: $Enums.checkoutStatus[]
    not?: NestedEnumcheckoutStatusFilter<$PrismaModel> | $Enums.checkoutStatus
  }

  export type StripeCustomerNullableRelationFilter = {
    is?: StripeCustomerWhereInput | null
    isNot?: StripeCustomerWhereInput | null
  }

  export type StripeCheckoutCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    productId?: SortOrder
    paymentId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    postCode?: SortOrder
    address?: SortOrder
    serialNumber?: SortOrder
    status?: SortOrder
    manager?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StripeCheckoutAvgOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
  }

  export type StripeCheckoutMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    productId?: SortOrder
    paymentId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    postCode?: SortOrder
    address?: SortOrder
    serialNumber?: SortOrder
    status?: SortOrder
    manager?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StripeCheckoutMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    productId?: SortOrder
    paymentId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    postCode?: SortOrder
    address?: SortOrder
    serialNumber?: SortOrder
    status?: SortOrder
    manager?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StripeCheckoutSumOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
  }

  export type EnumcheckoutStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.checkoutStatus | EnumcheckoutStatusFieldRefInput<$PrismaModel>
    in?: $Enums.checkoutStatus[]
    notIn?: $Enums.checkoutStatus[]
    not?: NestedEnumcheckoutStatusWithAggregatesFilter<$PrismaModel> | $Enums.checkoutStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcheckoutStatusFilter<$PrismaModel>
    _max?: NestedEnumcheckoutStatusFilter<$PrismaModel>
  }

  export type StripeSubscriptionListRelationFilter = {
    every?: StripeSubscriptionWhereInput
    some?: StripeSubscriptionWhereInput
    none?: StripeSubscriptionWhereInput
  }

  export type StripeSubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StripeCustomerCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
  }

  export type StripeCustomerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StripeCustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
  }

  export type StripeCustomerMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
  }

  export type StripeCustomerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumsubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.subscriptionStatus | EnumsubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.subscriptionStatus[]
    notIn?: $Enums.subscriptionStatus[]
    not?: NestedEnumsubscriptionStatusFilter<$PrismaModel> | $Enums.subscriptionStatus
  }

  export type StripeCustomerRelationFilter = {
    is?: StripeCustomerWhereInput
    isNot?: StripeCustomerWhereInput
  }

  export type StripeSubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    plan?: SortOrder
    status?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    cancelAt?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    stripeCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StripeSubscriptionAvgOrderByAggregateInput = {
    id?: SortOrder
    stripeCustomerId?: SortOrder
  }

  export type StripeSubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    plan?: SortOrder
    status?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    cancelAt?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    stripeCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StripeSubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    plan?: SortOrder
    status?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    cancelAt?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    stripeCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StripeSubscriptionSumOrderByAggregateInput = {
    id?: SortOrder
    stripeCustomerId?: SortOrder
  }

  export type EnumsubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.subscriptionStatus | EnumsubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.subscriptionStatus[]
    notIn?: $Enums.subscriptionStatus[]
    not?: NestedEnumsubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.subscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumsubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumsubscriptionStatusFilter<$PrismaModel>
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StripeCustomerListRelationFilter = {
    every?: StripeCustomerWhereInput
    some?: StripeCustomerWhereInput
    none?: StripeCustomerWhereInput
  }

  export type StripeCustomerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    gender?: SortOrder
    country?: SortOrder
    city?: SortOrder
    email?: SortOrder
    birthYear?: SortOrder
    activated?: SortOrder
    invited?: SortOrder
    invitedUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    gender?: SortOrder
    country?: SortOrder
    city?: SortOrder
    email?: SortOrder
    birthYear?: SortOrder
    activated?: SortOrder
    invited?: SortOrder
    invitedUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    gender?: SortOrder
    country?: SortOrder
    city?: SortOrder
    email?: SortOrder
    birthYear?: SortOrder
    activated?: SortOrder
    invited?: SortOrder
    invitedUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumPassageLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.PassageLevel | EnumPassageLevelFieldRefInput<$PrismaModel>
    in?: $Enums.PassageLevel[]
    notIn?: $Enums.PassageLevel[]
    not?: NestedEnumPassageLevelFilter<$PrismaModel> | $Enums.PassageLevel
  }

  export type PassageQuestionListRelationFilter = {
    every?: PassageQuestionWhereInput
    some?: PassageQuestionWhereInput
    none?: PassageQuestionWhereInput
  }

  export type PassageSentenceListRelationFilter = {
    every?: PassageSentenceWhereInput
    some?: PassageSentenceWhereInput
    none?: PassageSentenceWhereInput
  }

  export type PassageQuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PassageSentenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PassageCountOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PassageAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PassageMaxOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PassageMinOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PassageSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumPassageLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PassageLevel | EnumPassageLevelFieldRefInput<$PrismaModel>
    in?: $Enums.PassageLevel[]
    notIn?: $Enums.PassageLevel[]
    not?: NestedEnumPassageLevelWithAggregatesFilter<$PrismaModel> | $Enums.PassageLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPassageLevelFilter<$PrismaModel>
    _max?: NestedEnumPassageLevelFilter<$PrismaModel>
  }

  export type PassageRelationFilter = {
    is?: PassageWhereInput
    isNot?: PassageWhereInput
  }

  export type PassageQuestionCountOrderByAggregateInput = {
    id?: SortOrder
    question1?: SortOrder
    question2?: SortOrder
    question3?: SortOrder
    question4?: SortOrder
    question5?: SortOrder
    question6?: SortOrder
    question7?: SortOrder
    question8?: SortOrder
    question9?: SortOrder
    question10?: SortOrder
    question11?: SortOrder
    question12?: SortOrder
    question13?: SortOrder
    question14?: SortOrder
    question15?: SortOrder
    passageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PassageQuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    passageId?: SortOrder
  }

  export type PassageQuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    passageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PassageQuestionMinOrderByAggregateInput = {
    id?: SortOrder
    passageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PassageQuestionSumOrderByAggregateInput = {
    id?: SortOrder
    passageId?: SortOrder
  }

  export type PassageSentenceCountOrderByAggregateInput = {
    id?: SortOrder
    sentence1?: SortOrder
    sentence2?: SortOrder
    sentence3?: SortOrder
    sentence4?: SortOrder
    sentence5?: SortOrder
    sentence6?: SortOrder
    sentence7?: SortOrder
    sentence8?: SortOrder
    sentence9?: SortOrder
    sentence10?: SortOrder
    sentence11?: SortOrder
    sentence12?: SortOrder
    sentence13?: SortOrder
    sentence14?: SortOrder
    sentence15?: SortOrder
    passageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PassageSentenceAvgOrderByAggregateInput = {
    id?: SortOrder
    passageId?: SortOrder
  }

  export type PassageSentenceMaxOrderByAggregateInput = {
    id?: SortOrder
    passageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PassageSentenceMinOrderByAggregateInput = {
    id?: SortOrder
    passageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PassageSentenceSumOrderByAggregateInput = {
    id?: SortOrder
    passageId?: SortOrder
  }

  export type OneTimePasswordCreateNestedManyWithoutAdminUserInput = {
    create?: XOR<OneTimePasswordCreateWithoutAdminUserInput, OneTimePasswordUncheckedCreateWithoutAdminUserInput> | OneTimePasswordCreateWithoutAdminUserInput[] | OneTimePasswordUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: OneTimePasswordCreateOrConnectWithoutAdminUserInput | OneTimePasswordCreateOrConnectWithoutAdminUserInput[]
    createMany?: OneTimePasswordCreateManyAdminUserInputEnvelope
    connect?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
  }

  export type OneTimePasswordUncheckedCreateNestedManyWithoutAdminUserInput = {
    create?: XOR<OneTimePasswordCreateWithoutAdminUserInput, OneTimePasswordUncheckedCreateWithoutAdminUserInput> | OneTimePasswordCreateWithoutAdminUserInput[] | OneTimePasswordUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: OneTimePasswordCreateOrConnectWithoutAdminUserInput | OneTimePasswordCreateOrConnectWithoutAdminUserInput[]
    createMany?: OneTimePasswordCreateManyAdminUserInputEnvelope
    connect?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumAdminRoleFieldUpdateOperationsInput = {
    set?: $Enums.AdminRole
  }

  export type OneTimePasswordUpdateManyWithoutAdminUserNestedInput = {
    create?: XOR<OneTimePasswordCreateWithoutAdminUserInput, OneTimePasswordUncheckedCreateWithoutAdminUserInput> | OneTimePasswordCreateWithoutAdminUserInput[] | OneTimePasswordUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: OneTimePasswordCreateOrConnectWithoutAdminUserInput | OneTimePasswordCreateOrConnectWithoutAdminUserInput[]
    upsert?: OneTimePasswordUpsertWithWhereUniqueWithoutAdminUserInput | OneTimePasswordUpsertWithWhereUniqueWithoutAdminUserInput[]
    createMany?: OneTimePasswordCreateManyAdminUserInputEnvelope
    set?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
    disconnect?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
    delete?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
    connect?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
    update?: OneTimePasswordUpdateWithWhereUniqueWithoutAdminUserInput | OneTimePasswordUpdateWithWhereUniqueWithoutAdminUserInput[]
    updateMany?: OneTimePasswordUpdateManyWithWhereWithoutAdminUserInput | OneTimePasswordUpdateManyWithWhereWithoutAdminUserInput[]
    deleteMany?: OneTimePasswordScalarWhereInput | OneTimePasswordScalarWhereInput[]
  }

  export type OneTimePasswordUncheckedUpdateManyWithoutAdminUserNestedInput = {
    create?: XOR<OneTimePasswordCreateWithoutAdminUserInput, OneTimePasswordUncheckedCreateWithoutAdminUserInput> | OneTimePasswordCreateWithoutAdminUserInput[] | OneTimePasswordUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: OneTimePasswordCreateOrConnectWithoutAdminUserInput | OneTimePasswordCreateOrConnectWithoutAdminUserInput[]
    upsert?: OneTimePasswordUpsertWithWhereUniqueWithoutAdminUserInput | OneTimePasswordUpsertWithWhereUniqueWithoutAdminUserInput[]
    createMany?: OneTimePasswordCreateManyAdminUserInputEnvelope
    set?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
    disconnect?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
    delete?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
    connect?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
    update?: OneTimePasswordUpdateWithWhereUniqueWithoutAdminUserInput | OneTimePasswordUpdateWithWhereUniqueWithoutAdminUserInput[]
    updateMany?: OneTimePasswordUpdateManyWithWhereWithoutAdminUserInput | OneTimePasswordUpdateManyWithWhereWithoutAdminUserInput[]
    deleteMany?: OneTimePasswordScalarWhereInput | OneTimePasswordScalarWhereInput[]
  }

  export type BlogCategoryCreateNestedOneWithoutBlogInput = {
    create?: XOR<BlogCategoryCreateWithoutBlogInput, BlogCategoryUncheckedCreateWithoutBlogInput>
    connectOrCreate?: BlogCategoryCreateOrConnectWithoutBlogInput
    connect?: BlogCategoryWhereUniqueInput
  }

  export type BlogUniversityDepartmentCreateNestedManyWithoutBlogInput = {
    create?: XOR<BlogUniversityDepartmentCreateWithoutBlogInput, BlogUniversityDepartmentUncheckedCreateWithoutBlogInput> | BlogUniversityDepartmentCreateWithoutBlogInput[] | BlogUniversityDepartmentUncheckedCreateWithoutBlogInput[]
    connectOrCreate?: BlogUniversityDepartmentCreateOrConnectWithoutBlogInput | BlogUniversityDepartmentCreateOrConnectWithoutBlogInput[]
    createMany?: BlogUniversityDepartmentCreateManyBlogInputEnvelope
    connect?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
  }

  export type BlogUniversityDepartmentUncheckedCreateNestedManyWithoutBlogInput = {
    create?: XOR<BlogUniversityDepartmentCreateWithoutBlogInput, BlogUniversityDepartmentUncheckedCreateWithoutBlogInput> | BlogUniversityDepartmentCreateWithoutBlogInput[] | BlogUniversityDepartmentUncheckedCreateWithoutBlogInput[]
    connectOrCreate?: BlogUniversityDepartmentCreateOrConnectWithoutBlogInput | BlogUniversityDepartmentCreateOrConnectWithoutBlogInput[]
    createMany?: BlogUniversityDepartmentCreateManyBlogInputEnvelope
    connect?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BlogCategoryUpdateOneRequiredWithoutBlogNestedInput = {
    create?: XOR<BlogCategoryCreateWithoutBlogInput, BlogCategoryUncheckedCreateWithoutBlogInput>
    connectOrCreate?: BlogCategoryCreateOrConnectWithoutBlogInput
    upsert?: BlogCategoryUpsertWithoutBlogInput
    connect?: BlogCategoryWhereUniqueInput
    update?: XOR<XOR<BlogCategoryUpdateToOneWithWhereWithoutBlogInput, BlogCategoryUpdateWithoutBlogInput>, BlogCategoryUncheckedUpdateWithoutBlogInput>
  }

  export type BlogUniversityDepartmentUpdateManyWithoutBlogNestedInput = {
    create?: XOR<BlogUniversityDepartmentCreateWithoutBlogInput, BlogUniversityDepartmentUncheckedCreateWithoutBlogInput> | BlogUniversityDepartmentCreateWithoutBlogInput[] | BlogUniversityDepartmentUncheckedCreateWithoutBlogInput[]
    connectOrCreate?: BlogUniversityDepartmentCreateOrConnectWithoutBlogInput | BlogUniversityDepartmentCreateOrConnectWithoutBlogInput[]
    upsert?: BlogUniversityDepartmentUpsertWithWhereUniqueWithoutBlogInput | BlogUniversityDepartmentUpsertWithWhereUniqueWithoutBlogInput[]
    createMany?: BlogUniversityDepartmentCreateManyBlogInputEnvelope
    set?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
    disconnect?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
    delete?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
    connect?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
    update?: BlogUniversityDepartmentUpdateWithWhereUniqueWithoutBlogInput | BlogUniversityDepartmentUpdateWithWhereUniqueWithoutBlogInput[]
    updateMany?: BlogUniversityDepartmentUpdateManyWithWhereWithoutBlogInput | BlogUniversityDepartmentUpdateManyWithWhereWithoutBlogInput[]
    deleteMany?: BlogUniversityDepartmentScalarWhereInput | BlogUniversityDepartmentScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BlogUniversityDepartmentUncheckedUpdateManyWithoutBlogNestedInput = {
    create?: XOR<BlogUniversityDepartmentCreateWithoutBlogInput, BlogUniversityDepartmentUncheckedCreateWithoutBlogInput> | BlogUniversityDepartmentCreateWithoutBlogInput[] | BlogUniversityDepartmentUncheckedCreateWithoutBlogInput[]
    connectOrCreate?: BlogUniversityDepartmentCreateOrConnectWithoutBlogInput | BlogUniversityDepartmentCreateOrConnectWithoutBlogInput[]
    upsert?: BlogUniversityDepartmentUpsertWithWhereUniqueWithoutBlogInput | BlogUniversityDepartmentUpsertWithWhereUniqueWithoutBlogInput[]
    createMany?: BlogUniversityDepartmentCreateManyBlogInputEnvelope
    set?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
    disconnect?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
    delete?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
    connect?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
    update?: BlogUniversityDepartmentUpdateWithWhereUniqueWithoutBlogInput | BlogUniversityDepartmentUpdateWithWhereUniqueWithoutBlogInput[]
    updateMany?: BlogUniversityDepartmentUpdateManyWithWhereWithoutBlogInput | BlogUniversityDepartmentUpdateManyWithWhereWithoutBlogInput[]
    deleteMany?: BlogUniversityDepartmentScalarWhereInput | BlogUniversityDepartmentScalarWhereInput[]
  }

  export type BlogCreateNestedManyWithoutCategoryInput = {
    create?: XOR<BlogCreateWithoutCategoryInput, BlogUncheckedCreateWithoutCategoryInput> | BlogCreateWithoutCategoryInput[] | BlogUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: BlogCreateOrConnectWithoutCategoryInput | BlogCreateOrConnectWithoutCategoryInput[]
    createMany?: BlogCreateManyCategoryInputEnvelope
    connect?: BlogWhereUniqueInput | BlogWhereUniqueInput[]
  }

  export type BlogUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<BlogCreateWithoutCategoryInput, BlogUncheckedCreateWithoutCategoryInput> | BlogCreateWithoutCategoryInput[] | BlogUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: BlogCreateOrConnectWithoutCategoryInput | BlogCreateOrConnectWithoutCategoryInput[]
    createMany?: BlogCreateManyCategoryInputEnvelope
    connect?: BlogWhereUniqueInput | BlogWhereUniqueInput[]
  }

  export type BlogUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<BlogCreateWithoutCategoryInput, BlogUncheckedCreateWithoutCategoryInput> | BlogCreateWithoutCategoryInput[] | BlogUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: BlogCreateOrConnectWithoutCategoryInput | BlogCreateOrConnectWithoutCategoryInput[]
    upsert?: BlogUpsertWithWhereUniqueWithoutCategoryInput | BlogUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: BlogCreateManyCategoryInputEnvelope
    set?: BlogWhereUniqueInput | BlogWhereUniqueInput[]
    disconnect?: BlogWhereUniqueInput | BlogWhereUniqueInput[]
    delete?: BlogWhereUniqueInput | BlogWhereUniqueInput[]
    connect?: BlogWhereUniqueInput | BlogWhereUniqueInput[]
    update?: BlogUpdateWithWhereUniqueWithoutCategoryInput | BlogUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: BlogUpdateManyWithWhereWithoutCategoryInput | BlogUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: BlogScalarWhereInput | BlogScalarWhereInput[]
  }

  export type BlogUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<BlogCreateWithoutCategoryInput, BlogUncheckedCreateWithoutCategoryInput> | BlogCreateWithoutCategoryInput[] | BlogUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: BlogCreateOrConnectWithoutCategoryInput | BlogCreateOrConnectWithoutCategoryInput[]
    upsert?: BlogUpsertWithWhereUniqueWithoutCategoryInput | BlogUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: BlogCreateManyCategoryInputEnvelope
    set?: BlogWhereUniqueInput | BlogWhereUniqueInput[]
    disconnect?: BlogWhereUniqueInput | BlogWhereUniqueInput[]
    delete?: BlogWhereUniqueInput | BlogWhereUniqueInput[]
    connect?: BlogWhereUniqueInput | BlogWhereUniqueInput[]
    update?: BlogUpdateWithWhereUniqueWithoutCategoryInput | BlogUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: BlogUpdateManyWithWhereWithoutCategoryInput | BlogUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: BlogScalarWhereInput | BlogScalarWhereInput[]
  }

  export type BlogUniversityDepartmentCreateNestedManyWithoutUniversityInput = {
    create?: XOR<BlogUniversityDepartmentCreateWithoutUniversityInput, BlogUniversityDepartmentUncheckedCreateWithoutUniversityInput> | BlogUniversityDepartmentCreateWithoutUniversityInput[] | BlogUniversityDepartmentUncheckedCreateWithoutUniversityInput[]
    connectOrCreate?: BlogUniversityDepartmentCreateOrConnectWithoutUniversityInput | BlogUniversityDepartmentCreateOrConnectWithoutUniversityInput[]
    createMany?: BlogUniversityDepartmentCreateManyUniversityInputEnvelope
    connect?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
  }

  export type BlogUniversityDepartmentUncheckedCreateNestedManyWithoutUniversityInput = {
    create?: XOR<BlogUniversityDepartmentCreateWithoutUniversityInput, BlogUniversityDepartmentUncheckedCreateWithoutUniversityInput> | BlogUniversityDepartmentCreateWithoutUniversityInput[] | BlogUniversityDepartmentUncheckedCreateWithoutUniversityInput[]
    connectOrCreate?: BlogUniversityDepartmentCreateOrConnectWithoutUniversityInput | BlogUniversityDepartmentCreateOrConnectWithoutUniversityInput[]
    createMany?: BlogUniversityDepartmentCreateManyUniversityInputEnvelope
    connect?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BlogUniversityDepartmentUpdateManyWithoutUniversityNestedInput = {
    create?: XOR<BlogUniversityDepartmentCreateWithoutUniversityInput, BlogUniversityDepartmentUncheckedCreateWithoutUniversityInput> | BlogUniversityDepartmentCreateWithoutUniversityInput[] | BlogUniversityDepartmentUncheckedCreateWithoutUniversityInput[]
    connectOrCreate?: BlogUniversityDepartmentCreateOrConnectWithoutUniversityInput | BlogUniversityDepartmentCreateOrConnectWithoutUniversityInput[]
    upsert?: BlogUniversityDepartmentUpsertWithWhereUniqueWithoutUniversityInput | BlogUniversityDepartmentUpsertWithWhereUniqueWithoutUniversityInput[]
    createMany?: BlogUniversityDepartmentCreateManyUniversityInputEnvelope
    set?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
    disconnect?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
    delete?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
    connect?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
    update?: BlogUniversityDepartmentUpdateWithWhereUniqueWithoutUniversityInput | BlogUniversityDepartmentUpdateWithWhereUniqueWithoutUniversityInput[]
    updateMany?: BlogUniversityDepartmentUpdateManyWithWhereWithoutUniversityInput | BlogUniversityDepartmentUpdateManyWithWhereWithoutUniversityInput[]
    deleteMany?: BlogUniversityDepartmentScalarWhereInput | BlogUniversityDepartmentScalarWhereInput[]
  }

  export type BlogUniversityDepartmentUncheckedUpdateManyWithoutUniversityNestedInput = {
    create?: XOR<BlogUniversityDepartmentCreateWithoutUniversityInput, BlogUniversityDepartmentUncheckedCreateWithoutUniversityInput> | BlogUniversityDepartmentCreateWithoutUniversityInput[] | BlogUniversityDepartmentUncheckedCreateWithoutUniversityInput[]
    connectOrCreate?: BlogUniversityDepartmentCreateOrConnectWithoutUniversityInput | BlogUniversityDepartmentCreateOrConnectWithoutUniversityInput[]
    upsert?: BlogUniversityDepartmentUpsertWithWhereUniqueWithoutUniversityInput | BlogUniversityDepartmentUpsertWithWhereUniqueWithoutUniversityInput[]
    createMany?: BlogUniversityDepartmentCreateManyUniversityInputEnvelope
    set?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
    disconnect?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
    delete?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
    connect?: BlogUniversityDepartmentWhereUniqueInput | BlogUniversityDepartmentWhereUniqueInput[]
    update?: BlogUniversityDepartmentUpdateWithWhereUniqueWithoutUniversityInput | BlogUniversityDepartmentUpdateWithWhereUniqueWithoutUniversityInput[]
    updateMany?: BlogUniversityDepartmentUpdateManyWithWhereWithoutUniversityInput | BlogUniversityDepartmentUpdateManyWithWhereWithoutUniversityInput[]
    deleteMany?: BlogUniversityDepartmentScalarWhereInput | BlogUniversityDepartmentScalarWhereInput[]
  }

  export type BlogCreateNestedOneWithoutBlogUniversityDepartmentInput = {
    create?: XOR<BlogCreateWithoutBlogUniversityDepartmentInput, BlogUncheckedCreateWithoutBlogUniversityDepartmentInput>
    connectOrCreate?: BlogCreateOrConnectWithoutBlogUniversityDepartmentInput
    connect?: BlogWhereUniqueInput
  }

  export type BlogUniversityCreateNestedOneWithoutBlogUniversityDepartmentInput = {
    create?: XOR<BlogUniversityCreateWithoutBlogUniversityDepartmentInput, BlogUniversityUncheckedCreateWithoutBlogUniversityDepartmentInput>
    connectOrCreate?: BlogUniversityCreateOrConnectWithoutBlogUniversityDepartmentInput
    connect?: BlogUniversityWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BlogUpdateOneWithoutBlogUniversityDepartmentNestedInput = {
    create?: XOR<BlogCreateWithoutBlogUniversityDepartmentInput, BlogUncheckedCreateWithoutBlogUniversityDepartmentInput>
    connectOrCreate?: BlogCreateOrConnectWithoutBlogUniversityDepartmentInput
    upsert?: BlogUpsertWithoutBlogUniversityDepartmentInput
    disconnect?: BlogWhereInput | boolean
    delete?: BlogWhereInput | boolean
    connect?: BlogWhereUniqueInput
    update?: XOR<XOR<BlogUpdateToOneWithWhereWithoutBlogUniversityDepartmentInput, BlogUpdateWithoutBlogUniversityDepartmentInput>, BlogUncheckedUpdateWithoutBlogUniversityDepartmentInput>
  }

  export type BlogUniversityUpdateOneRequiredWithoutBlogUniversityDepartmentNestedInput = {
    create?: XOR<BlogUniversityCreateWithoutBlogUniversityDepartmentInput, BlogUniversityUncheckedCreateWithoutBlogUniversityDepartmentInput>
    connectOrCreate?: BlogUniversityCreateOrConnectWithoutBlogUniversityDepartmentInput
    upsert?: BlogUniversityUpsertWithoutBlogUniversityDepartmentInput
    connect?: BlogUniversityWhereUniqueInput
    update?: XOR<XOR<BlogUniversityUpdateToOneWithWhereWithoutBlogUniversityDepartmentInput, BlogUniversityUpdateWithoutBlogUniversityDepartmentInput>, BlogUniversityUncheckedUpdateWithoutBlogUniversityDepartmentInput>
  }

  export type GrammarCreateNestedManyWithoutGradeInput = {
    create?: XOR<GrammarCreateWithoutGradeInput, GrammarUncheckedCreateWithoutGradeInput> | GrammarCreateWithoutGradeInput[] | GrammarUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: GrammarCreateOrConnectWithoutGradeInput | GrammarCreateOrConnectWithoutGradeInput[]
    createMany?: GrammarCreateManyGradeInputEnvelope
    connect?: GrammarWhereUniqueInput | GrammarWhereUniqueInput[]
  }

  export type GrammarUncheckedCreateNestedManyWithoutGradeInput = {
    create?: XOR<GrammarCreateWithoutGradeInput, GrammarUncheckedCreateWithoutGradeInput> | GrammarCreateWithoutGradeInput[] | GrammarUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: GrammarCreateOrConnectWithoutGradeInput | GrammarCreateOrConnectWithoutGradeInput[]
    createMany?: GrammarCreateManyGradeInputEnvelope
    connect?: GrammarWhereUniqueInput | GrammarWhereUniqueInput[]
  }

  export type GrammarUpdateManyWithoutGradeNestedInput = {
    create?: XOR<GrammarCreateWithoutGradeInput, GrammarUncheckedCreateWithoutGradeInput> | GrammarCreateWithoutGradeInput[] | GrammarUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: GrammarCreateOrConnectWithoutGradeInput | GrammarCreateOrConnectWithoutGradeInput[]
    upsert?: GrammarUpsertWithWhereUniqueWithoutGradeInput | GrammarUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: GrammarCreateManyGradeInputEnvelope
    set?: GrammarWhereUniqueInput | GrammarWhereUniqueInput[]
    disconnect?: GrammarWhereUniqueInput | GrammarWhereUniqueInput[]
    delete?: GrammarWhereUniqueInput | GrammarWhereUniqueInput[]
    connect?: GrammarWhereUniqueInput | GrammarWhereUniqueInput[]
    update?: GrammarUpdateWithWhereUniqueWithoutGradeInput | GrammarUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: GrammarUpdateManyWithWhereWithoutGradeInput | GrammarUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: GrammarScalarWhereInput | GrammarScalarWhereInput[]
  }

  export type GrammarUncheckedUpdateManyWithoutGradeNestedInput = {
    create?: XOR<GrammarCreateWithoutGradeInput, GrammarUncheckedCreateWithoutGradeInput> | GrammarCreateWithoutGradeInput[] | GrammarUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: GrammarCreateOrConnectWithoutGradeInput | GrammarCreateOrConnectWithoutGradeInput[]
    upsert?: GrammarUpsertWithWhereUniqueWithoutGradeInput | GrammarUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: GrammarCreateManyGradeInputEnvelope
    set?: GrammarWhereUniqueInput | GrammarWhereUniqueInput[]
    disconnect?: GrammarWhereUniqueInput | GrammarWhereUniqueInput[]
    delete?: GrammarWhereUniqueInput | GrammarWhereUniqueInput[]
    connect?: GrammarWhereUniqueInput | GrammarWhereUniqueInput[]
    update?: GrammarUpdateWithWhereUniqueWithoutGradeInput | GrammarUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: GrammarUpdateManyWithWhereWithoutGradeInput | GrammarUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: GrammarScalarWhereInput | GrammarScalarWhereInput[]
  }

  export type GradeCreateNestedOneWithoutGrammarInput = {
    create?: XOR<GradeCreateWithoutGrammarInput, GradeUncheckedCreateWithoutGrammarInput>
    connectOrCreate?: GradeCreateOrConnectWithoutGrammarInput
    connect?: GradeWhereUniqueInput
  }

  export type GrammarQuestionCreateNestedManyWithoutGrammarInput = {
    create?: XOR<GrammarQuestionCreateWithoutGrammarInput, GrammarQuestionUncheckedCreateWithoutGrammarInput> | GrammarQuestionCreateWithoutGrammarInput[] | GrammarQuestionUncheckedCreateWithoutGrammarInput[]
    connectOrCreate?: GrammarQuestionCreateOrConnectWithoutGrammarInput | GrammarQuestionCreateOrConnectWithoutGrammarInput[]
    createMany?: GrammarQuestionCreateManyGrammarInputEnvelope
    connect?: GrammarQuestionWhereUniqueInput | GrammarQuestionWhereUniqueInput[]
  }

  export type GrammarQuestionUncheckedCreateNestedManyWithoutGrammarInput = {
    create?: XOR<GrammarQuestionCreateWithoutGrammarInput, GrammarQuestionUncheckedCreateWithoutGrammarInput> | GrammarQuestionCreateWithoutGrammarInput[] | GrammarQuestionUncheckedCreateWithoutGrammarInput[]
    connectOrCreate?: GrammarQuestionCreateOrConnectWithoutGrammarInput | GrammarQuestionCreateOrConnectWithoutGrammarInput[]
    createMany?: GrammarQuestionCreateManyGrammarInputEnvelope
    connect?: GrammarQuestionWhereUniqueInput | GrammarQuestionWhereUniqueInput[]
  }

  export type GradeUpdateOneRequiredWithoutGrammarNestedInput = {
    create?: XOR<GradeCreateWithoutGrammarInput, GradeUncheckedCreateWithoutGrammarInput>
    connectOrCreate?: GradeCreateOrConnectWithoutGrammarInput
    upsert?: GradeUpsertWithoutGrammarInput
    connect?: GradeWhereUniqueInput
    update?: XOR<XOR<GradeUpdateToOneWithWhereWithoutGrammarInput, GradeUpdateWithoutGrammarInput>, GradeUncheckedUpdateWithoutGrammarInput>
  }

  export type GrammarQuestionUpdateManyWithoutGrammarNestedInput = {
    create?: XOR<GrammarQuestionCreateWithoutGrammarInput, GrammarQuestionUncheckedCreateWithoutGrammarInput> | GrammarQuestionCreateWithoutGrammarInput[] | GrammarQuestionUncheckedCreateWithoutGrammarInput[]
    connectOrCreate?: GrammarQuestionCreateOrConnectWithoutGrammarInput | GrammarQuestionCreateOrConnectWithoutGrammarInput[]
    upsert?: GrammarQuestionUpsertWithWhereUniqueWithoutGrammarInput | GrammarQuestionUpsertWithWhereUniqueWithoutGrammarInput[]
    createMany?: GrammarQuestionCreateManyGrammarInputEnvelope
    set?: GrammarQuestionWhereUniqueInput | GrammarQuestionWhereUniqueInput[]
    disconnect?: GrammarQuestionWhereUniqueInput | GrammarQuestionWhereUniqueInput[]
    delete?: GrammarQuestionWhereUniqueInput | GrammarQuestionWhereUniqueInput[]
    connect?: GrammarQuestionWhereUniqueInput | GrammarQuestionWhereUniqueInput[]
    update?: GrammarQuestionUpdateWithWhereUniqueWithoutGrammarInput | GrammarQuestionUpdateWithWhereUniqueWithoutGrammarInput[]
    updateMany?: GrammarQuestionUpdateManyWithWhereWithoutGrammarInput | GrammarQuestionUpdateManyWithWhereWithoutGrammarInput[]
    deleteMany?: GrammarQuestionScalarWhereInput | GrammarQuestionScalarWhereInput[]
  }

  export type GrammarQuestionUncheckedUpdateManyWithoutGrammarNestedInput = {
    create?: XOR<GrammarQuestionCreateWithoutGrammarInput, GrammarQuestionUncheckedCreateWithoutGrammarInput> | GrammarQuestionCreateWithoutGrammarInput[] | GrammarQuestionUncheckedCreateWithoutGrammarInput[]
    connectOrCreate?: GrammarQuestionCreateOrConnectWithoutGrammarInput | GrammarQuestionCreateOrConnectWithoutGrammarInput[]
    upsert?: GrammarQuestionUpsertWithWhereUniqueWithoutGrammarInput | GrammarQuestionUpsertWithWhereUniqueWithoutGrammarInput[]
    createMany?: GrammarQuestionCreateManyGrammarInputEnvelope
    set?: GrammarQuestionWhereUniqueInput | GrammarQuestionWhereUniqueInput[]
    disconnect?: GrammarQuestionWhereUniqueInput | GrammarQuestionWhereUniqueInput[]
    delete?: GrammarQuestionWhereUniqueInput | GrammarQuestionWhereUniqueInput[]
    connect?: GrammarQuestionWhereUniqueInput | GrammarQuestionWhereUniqueInput[]
    update?: GrammarQuestionUpdateWithWhereUniqueWithoutGrammarInput | GrammarQuestionUpdateWithWhereUniqueWithoutGrammarInput[]
    updateMany?: GrammarQuestionUpdateManyWithWhereWithoutGrammarInput | GrammarQuestionUpdateManyWithWhereWithoutGrammarInput[]
    deleteMany?: GrammarQuestionScalarWhereInput | GrammarQuestionScalarWhereInput[]
  }

  export type GrammarCreateNestedOneWithoutGrammarQuestionInput = {
    create?: XOR<GrammarCreateWithoutGrammarQuestionInput, GrammarUncheckedCreateWithoutGrammarQuestionInput>
    connectOrCreate?: GrammarCreateOrConnectWithoutGrammarQuestionInput
    connect?: GrammarWhereUniqueInput
  }

  export type LikeGrammarQuestionCreateNestedManyWithoutGrammarQuestionInput = {
    create?: XOR<LikeGrammarQuestionCreateWithoutGrammarQuestionInput, LikeGrammarQuestionUncheckedCreateWithoutGrammarQuestionInput> | LikeGrammarQuestionCreateWithoutGrammarQuestionInput[] | LikeGrammarQuestionUncheckedCreateWithoutGrammarQuestionInput[]
    connectOrCreate?: LikeGrammarQuestionCreateOrConnectWithoutGrammarQuestionInput | LikeGrammarQuestionCreateOrConnectWithoutGrammarQuestionInput[]
    createMany?: LikeGrammarQuestionCreateManyGrammarQuestionInputEnvelope
    connect?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
  }

  export type LikeGrammarQuestionUncheckedCreateNestedManyWithoutGrammarQuestionInput = {
    create?: XOR<LikeGrammarQuestionCreateWithoutGrammarQuestionInput, LikeGrammarQuestionUncheckedCreateWithoutGrammarQuestionInput> | LikeGrammarQuestionCreateWithoutGrammarQuestionInput[] | LikeGrammarQuestionUncheckedCreateWithoutGrammarQuestionInput[]
    connectOrCreate?: LikeGrammarQuestionCreateOrConnectWithoutGrammarQuestionInput | LikeGrammarQuestionCreateOrConnectWithoutGrammarQuestionInput[]
    createMany?: LikeGrammarQuestionCreateManyGrammarQuestionInputEnvelope
    connect?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
  }

  export type GrammarUpdateOneRequiredWithoutGrammarQuestionNestedInput = {
    create?: XOR<GrammarCreateWithoutGrammarQuestionInput, GrammarUncheckedCreateWithoutGrammarQuestionInput>
    connectOrCreate?: GrammarCreateOrConnectWithoutGrammarQuestionInput
    upsert?: GrammarUpsertWithoutGrammarQuestionInput
    connect?: GrammarWhereUniqueInput
    update?: XOR<XOR<GrammarUpdateToOneWithWhereWithoutGrammarQuestionInput, GrammarUpdateWithoutGrammarQuestionInput>, GrammarUncheckedUpdateWithoutGrammarQuestionInput>
  }

  export type LikeGrammarQuestionUpdateManyWithoutGrammarQuestionNestedInput = {
    create?: XOR<LikeGrammarQuestionCreateWithoutGrammarQuestionInput, LikeGrammarQuestionUncheckedCreateWithoutGrammarQuestionInput> | LikeGrammarQuestionCreateWithoutGrammarQuestionInput[] | LikeGrammarQuestionUncheckedCreateWithoutGrammarQuestionInput[]
    connectOrCreate?: LikeGrammarQuestionCreateOrConnectWithoutGrammarQuestionInput | LikeGrammarQuestionCreateOrConnectWithoutGrammarQuestionInput[]
    upsert?: LikeGrammarQuestionUpsertWithWhereUniqueWithoutGrammarQuestionInput | LikeGrammarQuestionUpsertWithWhereUniqueWithoutGrammarQuestionInput[]
    createMany?: LikeGrammarQuestionCreateManyGrammarQuestionInputEnvelope
    set?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
    disconnect?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
    delete?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
    connect?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
    update?: LikeGrammarQuestionUpdateWithWhereUniqueWithoutGrammarQuestionInput | LikeGrammarQuestionUpdateWithWhereUniqueWithoutGrammarQuestionInput[]
    updateMany?: LikeGrammarQuestionUpdateManyWithWhereWithoutGrammarQuestionInput | LikeGrammarQuestionUpdateManyWithWhereWithoutGrammarQuestionInput[]
    deleteMany?: LikeGrammarQuestionScalarWhereInput | LikeGrammarQuestionScalarWhereInput[]
  }

  export type LikeGrammarQuestionUncheckedUpdateManyWithoutGrammarQuestionNestedInput = {
    create?: XOR<LikeGrammarQuestionCreateWithoutGrammarQuestionInput, LikeGrammarQuestionUncheckedCreateWithoutGrammarQuestionInput> | LikeGrammarQuestionCreateWithoutGrammarQuestionInput[] | LikeGrammarQuestionUncheckedCreateWithoutGrammarQuestionInput[]
    connectOrCreate?: LikeGrammarQuestionCreateOrConnectWithoutGrammarQuestionInput | LikeGrammarQuestionCreateOrConnectWithoutGrammarQuestionInput[]
    upsert?: LikeGrammarQuestionUpsertWithWhereUniqueWithoutGrammarQuestionInput | LikeGrammarQuestionUpsertWithWhereUniqueWithoutGrammarQuestionInput[]
    createMany?: LikeGrammarQuestionCreateManyGrammarQuestionInputEnvelope
    set?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
    disconnect?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
    delete?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
    connect?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
    update?: LikeGrammarQuestionUpdateWithWhereUniqueWithoutGrammarQuestionInput | LikeGrammarQuestionUpdateWithWhereUniqueWithoutGrammarQuestionInput[]
    updateMany?: LikeGrammarQuestionUpdateManyWithWhereWithoutGrammarQuestionInput | LikeGrammarQuestionUpdateManyWithWhereWithoutGrammarQuestionInput[]
    deleteMany?: LikeGrammarQuestionScalarWhereInput | LikeGrammarQuestionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLikeGrammarQuestionInput = {
    create?: XOR<UserCreateWithoutLikeGrammarQuestionInput, UserUncheckedCreateWithoutLikeGrammarQuestionInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikeGrammarQuestionInput
    connect?: UserWhereUniqueInput
  }

  export type GrammarQuestionCreateNestedOneWithoutLikeGrammarQuestionInput = {
    create?: XOR<GrammarQuestionCreateWithoutLikeGrammarQuestionInput, GrammarQuestionUncheckedCreateWithoutLikeGrammarQuestionInput>
    connectOrCreate?: GrammarQuestionCreateOrConnectWithoutLikeGrammarQuestionInput
    connect?: GrammarQuestionWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutLikeGrammarQuestionNestedInput = {
    create?: XOR<UserCreateWithoutLikeGrammarQuestionInput, UserUncheckedCreateWithoutLikeGrammarQuestionInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikeGrammarQuestionInput
    upsert?: UserUpsertWithoutLikeGrammarQuestionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLikeGrammarQuestionInput, UserUpdateWithoutLikeGrammarQuestionInput>, UserUncheckedUpdateWithoutLikeGrammarQuestionInput>
  }

  export type GrammarQuestionUpdateOneRequiredWithoutLikeGrammarQuestionNestedInput = {
    create?: XOR<GrammarQuestionCreateWithoutLikeGrammarQuestionInput, GrammarQuestionUncheckedCreateWithoutLikeGrammarQuestionInput>
    connectOrCreate?: GrammarQuestionCreateOrConnectWithoutLikeGrammarQuestionInput
    upsert?: GrammarQuestionUpsertWithoutLikeGrammarQuestionInput
    connect?: GrammarQuestionWhereUniqueInput
    update?: XOR<XOR<GrammarQuestionUpdateToOneWithWhereWithoutLikeGrammarQuestionInput, GrammarQuestionUpdateWithoutLikeGrammarQuestionInput>, GrammarQuestionUncheckedUpdateWithoutLikeGrammarQuestionInput>
  }

  export type UserCreateNestedOneWithoutLikeListeningInput = {
    create?: XOR<UserCreateWithoutLikeListeningInput, UserUncheckedCreateWithoutLikeListeningInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikeListeningInput
    connect?: UserWhereUniqueInput
  }

  export type ListeningCreateNestedOneWithoutLikeListeningInput = {
    create?: XOR<ListeningCreateWithoutLikeListeningInput, ListeningUncheckedCreateWithoutLikeListeningInput>
    connectOrCreate?: ListeningCreateOrConnectWithoutLikeListeningInput
    connect?: ListeningWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLikeListeningNestedInput = {
    create?: XOR<UserCreateWithoutLikeListeningInput, UserUncheckedCreateWithoutLikeListeningInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikeListeningInput
    upsert?: UserUpsertWithoutLikeListeningInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLikeListeningInput, UserUpdateWithoutLikeListeningInput>, UserUncheckedUpdateWithoutLikeListeningInput>
  }

  export type ListeningUpdateOneRequiredWithoutLikeListeningNestedInput = {
    create?: XOR<ListeningCreateWithoutLikeListeningInput, ListeningUncheckedCreateWithoutLikeListeningInput>
    connectOrCreate?: ListeningCreateOrConnectWithoutLikeListeningInput
    upsert?: ListeningUpsertWithoutLikeListeningInput
    connect?: ListeningWhereUniqueInput
    update?: XOR<XOR<ListeningUpdateToOneWithWhereWithoutLikeListeningInput, ListeningUpdateWithoutLikeListeningInput>, ListeningUncheckedUpdateWithoutLikeListeningInput>
  }

  export type LikeListeningCreateNestedManyWithoutListeningInput = {
    create?: XOR<LikeListeningCreateWithoutListeningInput, LikeListeningUncheckedCreateWithoutListeningInput> | LikeListeningCreateWithoutListeningInput[] | LikeListeningUncheckedCreateWithoutListeningInput[]
    connectOrCreate?: LikeListeningCreateOrConnectWithoutListeningInput | LikeListeningCreateOrConnectWithoutListeningInput[]
    createMany?: LikeListeningCreateManyListeningInputEnvelope
    connect?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
  }

  export type LikeListeningUncheckedCreateNestedManyWithoutListeningInput = {
    create?: XOR<LikeListeningCreateWithoutListeningInput, LikeListeningUncheckedCreateWithoutListeningInput> | LikeListeningCreateWithoutListeningInput[] | LikeListeningUncheckedCreateWithoutListeningInput[]
    connectOrCreate?: LikeListeningCreateOrConnectWithoutListeningInput | LikeListeningCreateOrConnectWithoutListeningInput[]
    createMany?: LikeListeningCreateManyListeningInputEnvelope
    connect?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
  }

  export type LikeListeningUpdateManyWithoutListeningNestedInput = {
    create?: XOR<LikeListeningCreateWithoutListeningInput, LikeListeningUncheckedCreateWithoutListeningInput> | LikeListeningCreateWithoutListeningInput[] | LikeListeningUncheckedCreateWithoutListeningInput[]
    connectOrCreate?: LikeListeningCreateOrConnectWithoutListeningInput | LikeListeningCreateOrConnectWithoutListeningInput[]
    upsert?: LikeListeningUpsertWithWhereUniqueWithoutListeningInput | LikeListeningUpsertWithWhereUniqueWithoutListeningInput[]
    createMany?: LikeListeningCreateManyListeningInputEnvelope
    set?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
    disconnect?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
    delete?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
    connect?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
    update?: LikeListeningUpdateWithWhereUniqueWithoutListeningInput | LikeListeningUpdateWithWhereUniqueWithoutListeningInput[]
    updateMany?: LikeListeningUpdateManyWithWhereWithoutListeningInput | LikeListeningUpdateManyWithWhereWithoutListeningInput[]
    deleteMany?: LikeListeningScalarWhereInput | LikeListeningScalarWhereInput[]
  }

  export type LikeListeningUncheckedUpdateManyWithoutListeningNestedInput = {
    create?: XOR<LikeListeningCreateWithoutListeningInput, LikeListeningUncheckedCreateWithoutListeningInput> | LikeListeningCreateWithoutListeningInput[] | LikeListeningUncheckedCreateWithoutListeningInput[]
    connectOrCreate?: LikeListeningCreateOrConnectWithoutListeningInput | LikeListeningCreateOrConnectWithoutListeningInput[]
    upsert?: LikeListeningUpsertWithWhereUniqueWithoutListeningInput | LikeListeningUpsertWithWhereUniqueWithoutListeningInput[]
    createMany?: LikeListeningCreateManyListeningInputEnvelope
    set?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
    disconnect?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
    delete?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
    connect?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
    update?: LikeListeningUpdateWithWhereUniqueWithoutListeningInput | LikeListeningUpdateWithWhereUniqueWithoutListeningInput[]
    updateMany?: LikeListeningUpdateManyWithWhereWithoutListeningInput | LikeListeningUpdateManyWithWhereWithoutListeningInput[]
    deleteMany?: LikeListeningScalarWhereInput | LikeListeningScalarWhereInput[]
  }

  export type EnumLogAboutFieldUpdateOperationsInput = {
    set?: $Enums.LogAbout
  }

  export type EnumLogLevelFieldUpdateOperationsInput = {
    set?: $Enums.LogLevel
  }

  export type ProductReviewCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductReviewCreateWithoutProductInput, ProductReviewUncheckedCreateWithoutProductInput> | ProductReviewCreateWithoutProductInput[] | ProductReviewUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductReviewCreateOrConnectWithoutProductInput | ProductReviewCreateOrConnectWithoutProductInput[]
    createMany?: ProductReviewCreateManyProductInputEnvelope
    connect?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
  }

  export type StripeCheckoutCreateNestedManyWithoutProductInput = {
    create?: XOR<StripeCheckoutCreateWithoutProductInput, StripeCheckoutUncheckedCreateWithoutProductInput> | StripeCheckoutCreateWithoutProductInput[] | StripeCheckoutUncheckedCreateWithoutProductInput[]
    connectOrCreate?: StripeCheckoutCreateOrConnectWithoutProductInput | StripeCheckoutCreateOrConnectWithoutProductInput[]
    createMany?: StripeCheckoutCreateManyProductInputEnvelope
    connect?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
  }

  export type ProductReviewUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductReviewCreateWithoutProductInput, ProductReviewUncheckedCreateWithoutProductInput> | ProductReviewCreateWithoutProductInput[] | ProductReviewUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductReviewCreateOrConnectWithoutProductInput | ProductReviewCreateOrConnectWithoutProductInput[]
    createMany?: ProductReviewCreateManyProductInputEnvelope
    connect?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
  }

  export type StripeCheckoutUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<StripeCheckoutCreateWithoutProductInput, StripeCheckoutUncheckedCreateWithoutProductInput> | StripeCheckoutCreateWithoutProductInput[] | StripeCheckoutUncheckedCreateWithoutProductInput[]
    connectOrCreate?: StripeCheckoutCreateOrConnectWithoutProductInput | StripeCheckoutCreateOrConnectWithoutProductInput[]
    createMany?: StripeCheckoutCreateManyProductInputEnvelope
    connect?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
  }

  export type EnumcheckoutTypeFieldUpdateOperationsInput = {
    set?: $Enums.checkoutType
  }

  export type ProductReviewUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductReviewCreateWithoutProductInput, ProductReviewUncheckedCreateWithoutProductInput> | ProductReviewCreateWithoutProductInput[] | ProductReviewUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductReviewCreateOrConnectWithoutProductInput | ProductReviewCreateOrConnectWithoutProductInput[]
    upsert?: ProductReviewUpsertWithWhereUniqueWithoutProductInput | ProductReviewUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductReviewCreateManyProductInputEnvelope
    set?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
    disconnect?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
    delete?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
    connect?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
    update?: ProductReviewUpdateWithWhereUniqueWithoutProductInput | ProductReviewUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductReviewUpdateManyWithWhereWithoutProductInput | ProductReviewUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductReviewScalarWhereInput | ProductReviewScalarWhereInput[]
  }

  export type StripeCheckoutUpdateManyWithoutProductNestedInput = {
    create?: XOR<StripeCheckoutCreateWithoutProductInput, StripeCheckoutUncheckedCreateWithoutProductInput> | StripeCheckoutCreateWithoutProductInput[] | StripeCheckoutUncheckedCreateWithoutProductInput[]
    connectOrCreate?: StripeCheckoutCreateOrConnectWithoutProductInput | StripeCheckoutCreateOrConnectWithoutProductInput[]
    upsert?: StripeCheckoutUpsertWithWhereUniqueWithoutProductInput | StripeCheckoutUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: StripeCheckoutCreateManyProductInputEnvelope
    set?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
    disconnect?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
    delete?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
    connect?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
    update?: StripeCheckoutUpdateWithWhereUniqueWithoutProductInput | StripeCheckoutUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: StripeCheckoutUpdateManyWithWhereWithoutProductInput | StripeCheckoutUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: StripeCheckoutScalarWhereInput | StripeCheckoutScalarWhereInput[]
  }

  export type ProductReviewUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductReviewCreateWithoutProductInput, ProductReviewUncheckedCreateWithoutProductInput> | ProductReviewCreateWithoutProductInput[] | ProductReviewUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductReviewCreateOrConnectWithoutProductInput | ProductReviewCreateOrConnectWithoutProductInput[]
    upsert?: ProductReviewUpsertWithWhereUniqueWithoutProductInput | ProductReviewUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductReviewCreateManyProductInputEnvelope
    set?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
    disconnect?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
    delete?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
    connect?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
    update?: ProductReviewUpdateWithWhereUniqueWithoutProductInput | ProductReviewUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductReviewUpdateManyWithWhereWithoutProductInput | ProductReviewUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductReviewScalarWhereInput | ProductReviewScalarWhereInput[]
  }

  export type StripeCheckoutUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<StripeCheckoutCreateWithoutProductInput, StripeCheckoutUncheckedCreateWithoutProductInput> | StripeCheckoutCreateWithoutProductInput[] | StripeCheckoutUncheckedCreateWithoutProductInput[]
    connectOrCreate?: StripeCheckoutCreateOrConnectWithoutProductInput | StripeCheckoutCreateOrConnectWithoutProductInput[]
    upsert?: StripeCheckoutUpsertWithWhereUniqueWithoutProductInput | StripeCheckoutUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: StripeCheckoutCreateManyProductInputEnvelope
    set?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
    disconnect?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
    delete?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
    connect?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
    update?: StripeCheckoutUpdateWithWhereUniqueWithoutProductInput | StripeCheckoutUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: StripeCheckoutUpdateManyWithWhereWithoutProductInput | StripeCheckoutUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: StripeCheckoutScalarWhereInput | StripeCheckoutScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutProductReviewInput = {
    create?: XOR<ProductCreateWithoutProductReviewInput, ProductUncheckedCreateWithoutProductReviewInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductReviewInput
    connect?: ProductWhereUniqueInput
  }

  export type StripeCheckoutCreateNestedOneWithoutProductReviewInput = {
    create?: XOR<StripeCheckoutCreateWithoutProductReviewInput, StripeCheckoutUncheckedCreateWithoutProductReviewInput>
    connectOrCreate?: StripeCheckoutCreateOrConnectWithoutProductReviewInput
    connect?: StripeCheckoutWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutProductReviewNestedInput = {
    create?: XOR<ProductCreateWithoutProductReviewInput, ProductUncheckedCreateWithoutProductReviewInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductReviewInput
    upsert?: ProductUpsertWithoutProductReviewInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutProductReviewInput, ProductUpdateWithoutProductReviewInput>, ProductUncheckedUpdateWithoutProductReviewInput>
  }

  export type StripeCheckoutUpdateOneWithoutProductReviewNestedInput = {
    create?: XOR<StripeCheckoutCreateWithoutProductReviewInput, StripeCheckoutUncheckedCreateWithoutProductReviewInput>
    connectOrCreate?: StripeCheckoutCreateOrConnectWithoutProductReviewInput
    upsert?: StripeCheckoutUpsertWithoutProductReviewInput
    disconnect?: StripeCheckoutWhereInput | boolean
    delete?: StripeCheckoutWhereInput | boolean
    connect?: StripeCheckoutWhereUniqueInput
    update?: XOR<XOR<StripeCheckoutUpdateToOneWithWhereWithoutProductReviewInput, StripeCheckoutUpdateWithoutProductReviewInput>, StripeCheckoutUncheckedUpdateWithoutProductReviewInput>
  }

  export type UserCreateNestedOneWithoutOneTimePasswordInput = {
    create?: XOR<UserCreateWithoutOneTimePasswordInput, UserUncheckedCreateWithoutOneTimePasswordInput>
    connectOrCreate?: UserCreateOrConnectWithoutOneTimePasswordInput
    connect?: UserWhereUniqueInput
  }

  export type AdminUserCreateNestedOneWithoutOneTimePasswordInput = {
    create?: XOR<AdminUserCreateWithoutOneTimePasswordInput, AdminUserUncheckedCreateWithoutOneTimePasswordInput>
    connectOrCreate?: AdminUserCreateOrConnectWithoutOneTimePasswordInput
    connect?: AdminUserWhereUniqueInput
  }

  export type EnumOneTimeNumberUsageFieldUpdateOperationsInput = {
    set?: $Enums.OneTimeNumberUsage
  }

  export type UserUpdateOneWithoutOneTimePasswordNestedInput = {
    create?: XOR<UserCreateWithoutOneTimePasswordInput, UserUncheckedCreateWithoutOneTimePasswordInput>
    connectOrCreate?: UserCreateOrConnectWithoutOneTimePasswordInput
    upsert?: UserUpsertWithoutOneTimePasswordInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOneTimePasswordInput, UserUpdateWithoutOneTimePasswordInput>, UserUncheckedUpdateWithoutOneTimePasswordInput>
  }

  export type AdminUserUpdateOneWithoutOneTimePasswordNestedInput = {
    create?: XOR<AdminUserCreateWithoutOneTimePasswordInput, AdminUserUncheckedCreateWithoutOneTimePasswordInput>
    connectOrCreate?: AdminUserCreateOrConnectWithoutOneTimePasswordInput
    upsert?: AdminUserUpsertWithoutOneTimePasswordInput
    disconnect?: AdminUserWhereInput | boolean
    delete?: AdminUserWhereInput | boolean
    connect?: AdminUserWhereUniqueInput
    update?: XOR<XOR<AdminUserUpdateToOneWithWhereWithoutOneTimePasswordInput, AdminUserUpdateWithoutOneTimePasswordInput>, AdminUserUncheckedUpdateWithoutOneTimePasswordInput>
  }

  export type StripeCustomerCreateNestedOneWithoutStripeCheckoutInput = {
    create?: XOR<StripeCustomerCreateWithoutStripeCheckoutInput, StripeCustomerUncheckedCreateWithoutStripeCheckoutInput>
    connectOrCreate?: StripeCustomerCreateOrConnectWithoutStripeCheckoutInput
    connect?: StripeCustomerWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutStripeCheckoutInput = {
    create?: XOR<ProductCreateWithoutStripeCheckoutInput, ProductUncheckedCreateWithoutStripeCheckoutInput>
    connectOrCreate?: ProductCreateOrConnectWithoutStripeCheckoutInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductReviewCreateNestedManyWithoutStripeCheckoutInput = {
    create?: XOR<ProductReviewCreateWithoutStripeCheckoutInput, ProductReviewUncheckedCreateWithoutStripeCheckoutInput> | ProductReviewCreateWithoutStripeCheckoutInput[] | ProductReviewUncheckedCreateWithoutStripeCheckoutInput[]
    connectOrCreate?: ProductReviewCreateOrConnectWithoutStripeCheckoutInput | ProductReviewCreateOrConnectWithoutStripeCheckoutInput[]
    createMany?: ProductReviewCreateManyStripeCheckoutInputEnvelope
    connect?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
  }

  export type ProductReviewUncheckedCreateNestedManyWithoutStripeCheckoutInput = {
    create?: XOR<ProductReviewCreateWithoutStripeCheckoutInput, ProductReviewUncheckedCreateWithoutStripeCheckoutInput> | ProductReviewCreateWithoutStripeCheckoutInput[] | ProductReviewUncheckedCreateWithoutStripeCheckoutInput[]
    connectOrCreate?: ProductReviewCreateOrConnectWithoutStripeCheckoutInput | ProductReviewCreateOrConnectWithoutStripeCheckoutInput[]
    createMany?: ProductReviewCreateManyStripeCheckoutInputEnvelope
    connect?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
  }

  export type EnumcheckoutStatusFieldUpdateOperationsInput = {
    set?: $Enums.checkoutStatus
  }

  export type StripeCustomerUpdateOneWithoutStripeCheckoutNestedInput = {
    create?: XOR<StripeCustomerCreateWithoutStripeCheckoutInput, StripeCustomerUncheckedCreateWithoutStripeCheckoutInput>
    connectOrCreate?: StripeCustomerCreateOrConnectWithoutStripeCheckoutInput
    upsert?: StripeCustomerUpsertWithoutStripeCheckoutInput
    disconnect?: StripeCustomerWhereInput | boolean
    delete?: StripeCustomerWhereInput | boolean
    connect?: StripeCustomerWhereUniqueInput
    update?: XOR<XOR<StripeCustomerUpdateToOneWithWhereWithoutStripeCheckoutInput, StripeCustomerUpdateWithoutStripeCheckoutInput>, StripeCustomerUncheckedUpdateWithoutStripeCheckoutInput>
  }

  export type ProductUpdateOneRequiredWithoutStripeCheckoutNestedInput = {
    create?: XOR<ProductCreateWithoutStripeCheckoutInput, ProductUncheckedCreateWithoutStripeCheckoutInput>
    connectOrCreate?: ProductCreateOrConnectWithoutStripeCheckoutInput
    upsert?: ProductUpsertWithoutStripeCheckoutInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutStripeCheckoutInput, ProductUpdateWithoutStripeCheckoutInput>, ProductUncheckedUpdateWithoutStripeCheckoutInput>
  }

  export type ProductReviewUpdateManyWithoutStripeCheckoutNestedInput = {
    create?: XOR<ProductReviewCreateWithoutStripeCheckoutInput, ProductReviewUncheckedCreateWithoutStripeCheckoutInput> | ProductReviewCreateWithoutStripeCheckoutInput[] | ProductReviewUncheckedCreateWithoutStripeCheckoutInput[]
    connectOrCreate?: ProductReviewCreateOrConnectWithoutStripeCheckoutInput | ProductReviewCreateOrConnectWithoutStripeCheckoutInput[]
    upsert?: ProductReviewUpsertWithWhereUniqueWithoutStripeCheckoutInput | ProductReviewUpsertWithWhereUniqueWithoutStripeCheckoutInput[]
    createMany?: ProductReviewCreateManyStripeCheckoutInputEnvelope
    set?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
    disconnect?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
    delete?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
    connect?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
    update?: ProductReviewUpdateWithWhereUniqueWithoutStripeCheckoutInput | ProductReviewUpdateWithWhereUniqueWithoutStripeCheckoutInput[]
    updateMany?: ProductReviewUpdateManyWithWhereWithoutStripeCheckoutInput | ProductReviewUpdateManyWithWhereWithoutStripeCheckoutInput[]
    deleteMany?: ProductReviewScalarWhereInput | ProductReviewScalarWhereInput[]
  }

  export type ProductReviewUncheckedUpdateManyWithoutStripeCheckoutNestedInput = {
    create?: XOR<ProductReviewCreateWithoutStripeCheckoutInput, ProductReviewUncheckedCreateWithoutStripeCheckoutInput> | ProductReviewCreateWithoutStripeCheckoutInput[] | ProductReviewUncheckedCreateWithoutStripeCheckoutInput[]
    connectOrCreate?: ProductReviewCreateOrConnectWithoutStripeCheckoutInput | ProductReviewCreateOrConnectWithoutStripeCheckoutInput[]
    upsert?: ProductReviewUpsertWithWhereUniqueWithoutStripeCheckoutInput | ProductReviewUpsertWithWhereUniqueWithoutStripeCheckoutInput[]
    createMany?: ProductReviewCreateManyStripeCheckoutInputEnvelope
    set?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
    disconnect?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
    delete?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
    connect?: ProductReviewWhereUniqueInput | ProductReviewWhereUniqueInput[]
    update?: ProductReviewUpdateWithWhereUniqueWithoutStripeCheckoutInput | ProductReviewUpdateWithWhereUniqueWithoutStripeCheckoutInput[]
    updateMany?: ProductReviewUpdateManyWithWhereWithoutStripeCheckoutInput | ProductReviewUpdateManyWithWhereWithoutStripeCheckoutInput[]
    deleteMany?: ProductReviewScalarWhereInput | ProductReviewScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutStripeCustomerInput = {
    create?: XOR<UserCreateWithoutStripeCustomerInput, UserUncheckedCreateWithoutStripeCustomerInput>
    connectOrCreate?: UserCreateOrConnectWithoutStripeCustomerInput
    connect?: UserWhereUniqueInput
  }

  export type StripeCheckoutCreateNestedManyWithoutStripeCustomerInput = {
    create?: XOR<StripeCheckoutCreateWithoutStripeCustomerInput, StripeCheckoutUncheckedCreateWithoutStripeCustomerInput> | StripeCheckoutCreateWithoutStripeCustomerInput[] | StripeCheckoutUncheckedCreateWithoutStripeCustomerInput[]
    connectOrCreate?: StripeCheckoutCreateOrConnectWithoutStripeCustomerInput | StripeCheckoutCreateOrConnectWithoutStripeCustomerInput[]
    createMany?: StripeCheckoutCreateManyStripeCustomerInputEnvelope
    connect?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
  }

  export type StripeSubscriptionCreateNestedManyWithoutStripeCustomerInput = {
    create?: XOR<StripeSubscriptionCreateWithoutStripeCustomerInput, StripeSubscriptionUncheckedCreateWithoutStripeCustomerInput> | StripeSubscriptionCreateWithoutStripeCustomerInput[] | StripeSubscriptionUncheckedCreateWithoutStripeCustomerInput[]
    connectOrCreate?: StripeSubscriptionCreateOrConnectWithoutStripeCustomerInput | StripeSubscriptionCreateOrConnectWithoutStripeCustomerInput[]
    createMany?: StripeSubscriptionCreateManyStripeCustomerInputEnvelope
    connect?: StripeSubscriptionWhereUniqueInput | StripeSubscriptionWhereUniqueInput[]
  }

  export type StripeCheckoutUncheckedCreateNestedManyWithoutStripeCustomerInput = {
    create?: XOR<StripeCheckoutCreateWithoutStripeCustomerInput, StripeCheckoutUncheckedCreateWithoutStripeCustomerInput> | StripeCheckoutCreateWithoutStripeCustomerInput[] | StripeCheckoutUncheckedCreateWithoutStripeCustomerInput[]
    connectOrCreate?: StripeCheckoutCreateOrConnectWithoutStripeCustomerInput | StripeCheckoutCreateOrConnectWithoutStripeCustomerInput[]
    createMany?: StripeCheckoutCreateManyStripeCustomerInputEnvelope
    connect?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
  }

  export type StripeSubscriptionUncheckedCreateNestedManyWithoutStripeCustomerInput = {
    create?: XOR<StripeSubscriptionCreateWithoutStripeCustomerInput, StripeSubscriptionUncheckedCreateWithoutStripeCustomerInput> | StripeSubscriptionCreateWithoutStripeCustomerInput[] | StripeSubscriptionUncheckedCreateWithoutStripeCustomerInput[]
    connectOrCreate?: StripeSubscriptionCreateOrConnectWithoutStripeCustomerInput | StripeSubscriptionCreateOrConnectWithoutStripeCustomerInput[]
    createMany?: StripeSubscriptionCreateManyStripeCustomerInputEnvelope
    connect?: StripeSubscriptionWhereUniqueInput | StripeSubscriptionWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutStripeCustomerNestedInput = {
    create?: XOR<UserCreateWithoutStripeCustomerInput, UserUncheckedCreateWithoutStripeCustomerInput>
    connectOrCreate?: UserCreateOrConnectWithoutStripeCustomerInput
    upsert?: UserUpsertWithoutStripeCustomerInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStripeCustomerInput, UserUpdateWithoutStripeCustomerInput>, UserUncheckedUpdateWithoutStripeCustomerInput>
  }

  export type StripeCheckoutUpdateManyWithoutStripeCustomerNestedInput = {
    create?: XOR<StripeCheckoutCreateWithoutStripeCustomerInput, StripeCheckoutUncheckedCreateWithoutStripeCustomerInput> | StripeCheckoutCreateWithoutStripeCustomerInput[] | StripeCheckoutUncheckedCreateWithoutStripeCustomerInput[]
    connectOrCreate?: StripeCheckoutCreateOrConnectWithoutStripeCustomerInput | StripeCheckoutCreateOrConnectWithoutStripeCustomerInput[]
    upsert?: StripeCheckoutUpsertWithWhereUniqueWithoutStripeCustomerInput | StripeCheckoutUpsertWithWhereUniqueWithoutStripeCustomerInput[]
    createMany?: StripeCheckoutCreateManyStripeCustomerInputEnvelope
    set?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
    disconnect?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
    delete?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
    connect?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
    update?: StripeCheckoutUpdateWithWhereUniqueWithoutStripeCustomerInput | StripeCheckoutUpdateWithWhereUniqueWithoutStripeCustomerInput[]
    updateMany?: StripeCheckoutUpdateManyWithWhereWithoutStripeCustomerInput | StripeCheckoutUpdateManyWithWhereWithoutStripeCustomerInput[]
    deleteMany?: StripeCheckoutScalarWhereInput | StripeCheckoutScalarWhereInput[]
  }

  export type StripeSubscriptionUpdateManyWithoutStripeCustomerNestedInput = {
    create?: XOR<StripeSubscriptionCreateWithoutStripeCustomerInput, StripeSubscriptionUncheckedCreateWithoutStripeCustomerInput> | StripeSubscriptionCreateWithoutStripeCustomerInput[] | StripeSubscriptionUncheckedCreateWithoutStripeCustomerInput[]
    connectOrCreate?: StripeSubscriptionCreateOrConnectWithoutStripeCustomerInput | StripeSubscriptionCreateOrConnectWithoutStripeCustomerInput[]
    upsert?: StripeSubscriptionUpsertWithWhereUniqueWithoutStripeCustomerInput | StripeSubscriptionUpsertWithWhereUniqueWithoutStripeCustomerInput[]
    createMany?: StripeSubscriptionCreateManyStripeCustomerInputEnvelope
    set?: StripeSubscriptionWhereUniqueInput | StripeSubscriptionWhereUniqueInput[]
    disconnect?: StripeSubscriptionWhereUniqueInput | StripeSubscriptionWhereUniqueInput[]
    delete?: StripeSubscriptionWhereUniqueInput | StripeSubscriptionWhereUniqueInput[]
    connect?: StripeSubscriptionWhereUniqueInput | StripeSubscriptionWhereUniqueInput[]
    update?: StripeSubscriptionUpdateWithWhereUniqueWithoutStripeCustomerInput | StripeSubscriptionUpdateWithWhereUniqueWithoutStripeCustomerInput[]
    updateMany?: StripeSubscriptionUpdateManyWithWhereWithoutStripeCustomerInput | StripeSubscriptionUpdateManyWithWhereWithoutStripeCustomerInput[]
    deleteMany?: StripeSubscriptionScalarWhereInput | StripeSubscriptionScalarWhereInput[]
  }

  export type StripeCheckoutUncheckedUpdateManyWithoutStripeCustomerNestedInput = {
    create?: XOR<StripeCheckoutCreateWithoutStripeCustomerInput, StripeCheckoutUncheckedCreateWithoutStripeCustomerInput> | StripeCheckoutCreateWithoutStripeCustomerInput[] | StripeCheckoutUncheckedCreateWithoutStripeCustomerInput[]
    connectOrCreate?: StripeCheckoutCreateOrConnectWithoutStripeCustomerInput | StripeCheckoutCreateOrConnectWithoutStripeCustomerInput[]
    upsert?: StripeCheckoutUpsertWithWhereUniqueWithoutStripeCustomerInput | StripeCheckoutUpsertWithWhereUniqueWithoutStripeCustomerInput[]
    createMany?: StripeCheckoutCreateManyStripeCustomerInputEnvelope
    set?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
    disconnect?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
    delete?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
    connect?: StripeCheckoutWhereUniqueInput | StripeCheckoutWhereUniqueInput[]
    update?: StripeCheckoutUpdateWithWhereUniqueWithoutStripeCustomerInput | StripeCheckoutUpdateWithWhereUniqueWithoutStripeCustomerInput[]
    updateMany?: StripeCheckoutUpdateManyWithWhereWithoutStripeCustomerInput | StripeCheckoutUpdateManyWithWhereWithoutStripeCustomerInput[]
    deleteMany?: StripeCheckoutScalarWhereInput | StripeCheckoutScalarWhereInput[]
  }

  export type StripeSubscriptionUncheckedUpdateManyWithoutStripeCustomerNestedInput = {
    create?: XOR<StripeSubscriptionCreateWithoutStripeCustomerInput, StripeSubscriptionUncheckedCreateWithoutStripeCustomerInput> | StripeSubscriptionCreateWithoutStripeCustomerInput[] | StripeSubscriptionUncheckedCreateWithoutStripeCustomerInput[]
    connectOrCreate?: StripeSubscriptionCreateOrConnectWithoutStripeCustomerInput | StripeSubscriptionCreateOrConnectWithoutStripeCustomerInput[]
    upsert?: StripeSubscriptionUpsertWithWhereUniqueWithoutStripeCustomerInput | StripeSubscriptionUpsertWithWhereUniqueWithoutStripeCustomerInput[]
    createMany?: StripeSubscriptionCreateManyStripeCustomerInputEnvelope
    set?: StripeSubscriptionWhereUniqueInput | StripeSubscriptionWhereUniqueInput[]
    disconnect?: StripeSubscriptionWhereUniqueInput | StripeSubscriptionWhereUniqueInput[]
    delete?: StripeSubscriptionWhereUniqueInput | StripeSubscriptionWhereUniqueInput[]
    connect?: StripeSubscriptionWhereUniqueInput | StripeSubscriptionWhereUniqueInput[]
    update?: StripeSubscriptionUpdateWithWhereUniqueWithoutStripeCustomerInput | StripeSubscriptionUpdateWithWhereUniqueWithoutStripeCustomerInput[]
    updateMany?: StripeSubscriptionUpdateManyWithWhereWithoutStripeCustomerInput | StripeSubscriptionUpdateManyWithWhereWithoutStripeCustomerInput[]
    deleteMany?: StripeSubscriptionScalarWhereInput | StripeSubscriptionScalarWhereInput[]
  }

  export type StripeCustomerCreateNestedOneWithoutStripeSubscriptionInput = {
    create?: XOR<StripeCustomerCreateWithoutStripeSubscriptionInput, StripeCustomerUncheckedCreateWithoutStripeSubscriptionInput>
    connectOrCreate?: StripeCustomerCreateOrConnectWithoutStripeSubscriptionInput
    connect?: StripeCustomerWhereUniqueInput
  }

  export type EnumsubscriptionStatusFieldUpdateOperationsInput = {
    set?: $Enums.subscriptionStatus
  }

  export type StripeCustomerUpdateOneRequiredWithoutStripeSubscriptionNestedInput = {
    create?: XOR<StripeCustomerCreateWithoutStripeSubscriptionInput, StripeCustomerUncheckedCreateWithoutStripeSubscriptionInput>
    connectOrCreate?: StripeCustomerCreateOrConnectWithoutStripeSubscriptionInput
    upsert?: StripeCustomerUpsertWithoutStripeSubscriptionInput
    connect?: StripeCustomerWhereUniqueInput
    update?: XOR<XOR<StripeCustomerUpdateToOneWithWhereWithoutStripeSubscriptionInput, StripeCustomerUpdateWithoutStripeSubscriptionInput>, StripeCustomerUncheckedUpdateWithoutStripeSubscriptionInput>
  }

  export type StripeCustomerCreateNestedManyWithoutUserInput = {
    create?: XOR<StripeCustomerCreateWithoutUserInput, StripeCustomerUncheckedCreateWithoutUserInput> | StripeCustomerCreateWithoutUserInput[] | StripeCustomerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StripeCustomerCreateOrConnectWithoutUserInput | StripeCustomerCreateOrConnectWithoutUserInput[]
    createMany?: StripeCustomerCreateManyUserInputEnvelope
    connect?: StripeCustomerWhereUniqueInput | StripeCustomerWhereUniqueInput[]
  }

  export type OneTimePasswordCreateNestedManyWithoutUserInput = {
    create?: XOR<OneTimePasswordCreateWithoutUserInput, OneTimePasswordUncheckedCreateWithoutUserInput> | OneTimePasswordCreateWithoutUserInput[] | OneTimePasswordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OneTimePasswordCreateOrConnectWithoutUserInput | OneTimePasswordCreateOrConnectWithoutUserInput[]
    createMany?: OneTimePasswordCreateManyUserInputEnvelope
    connect?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
  }

  export type LikeGrammarQuestionCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeGrammarQuestionCreateWithoutUserInput, LikeGrammarQuestionUncheckedCreateWithoutUserInput> | LikeGrammarQuestionCreateWithoutUserInput[] | LikeGrammarQuestionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeGrammarQuestionCreateOrConnectWithoutUserInput | LikeGrammarQuestionCreateOrConnectWithoutUserInput[]
    createMany?: LikeGrammarQuestionCreateManyUserInputEnvelope
    connect?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
  }

  export type LikeListeningCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeListeningCreateWithoutUserInput, LikeListeningUncheckedCreateWithoutUserInput> | LikeListeningCreateWithoutUserInput[] | LikeListeningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeListeningCreateOrConnectWithoutUserInput | LikeListeningCreateOrConnectWithoutUserInput[]
    createMany?: LikeListeningCreateManyUserInputEnvelope
    connect?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
  }

  export type StripeCustomerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StripeCustomerCreateWithoutUserInput, StripeCustomerUncheckedCreateWithoutUserInput> | StripeCustomerCreateWithoutUserInput[] | StripeCustomerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StripeCustomerCreateOrConnectWithoutUserInput | StripeCustomerCreateOrConnectWithoutUserInput[]
    createMany?: StripeCustomerCreateManyUserInputEnvelope
    connect?: StripeCustomerWhereUniqueInput | StripeCustomerWhereUniqueInput[]
  }

  export type OneTimePasswordUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OneTimePasswordCreateWithoutUserInput, OneTimePasswordUncheckedCreateWithoutUserInput> | OneTimePasswordCreateWithoutUserInput[] | OneTimePasswordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OneTimePasswordCreateOrConnectWithoutUserInput | OneTimePasswordCreateOrConnectWithoutUserInput[]
    createMany?: OneTimePasswordCreateManyUserInputEnvelope
    connect?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
  }

  export type LikeGrammarQuestionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeGrammarQuestionCreateWithoutUserInput, LikeGrammarQuestionUncheckedCreateWithoutUserInput> | LikeGrammarQuestionCreateWithoutUserInput[] | LikeGrammarQuestionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeGrammarQuestionCreateOrConnectWithoutUserInput | LikeGrammarQuestionCreateOrConnectWithoutUserInput[]
    createMany?: LikeGrammarQuestionCreateManyUserInputEnvelope
    connect?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
  }

  export type LikeListeningUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeListeningCreateWithoutUserInput, LikeListeningUncheckedCreateWithoutUserInput> | LikeListeningCreateWithoutUserInput[] | LikeListeningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeListeningCreateOrConnectWithoutUserInput | LikeListeningCreateOrConnectWithoutUserInput[]
    createMany?: LikeListeningCreateManyUserInputEnvelope
    connect?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type StripeCustomerUpdateManyWithoutUserNestedInput = {
    create?: XOR<StripeCustomerCreateWithoutUserInput, StripeCustomerUncheckedCreateWithoutUserInput> | StripeCustomerCreateWithoutUserInput[] | StripeCustomerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StripeCustomerCreateOrConnectWithoutUserInput | StripeCustomerCreateOrConnectWithoutUserInput[]
    upsert?: StripeCustomerUpsertWithWhereUniqueWithoutUserInput | StripeCustomerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StripeCustomerCreateManyUserInputEnvelope
    set?: StripeCustomerWhereUniqueInput | StripeCustomerWhereUniqueInput[]
    disconnect?: StripeCustomerWhereUniqueInput | StripeCustomerWhereUniqueInput[]
    delete?: StripeCustomerWhereUniqueInput | StripeCustomerWhereUniqueInput[]
    connect?: StripeCustomerWhereUniqueInput | StripeCustomerWhereUniqueInput[]
    update?: StripeCustomerUpdateWithWhereUniqueWithoutUserInput | StripeCustomerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StripeCustomerUpdateManyWithWhereWithoutUserInput | StripeCustomerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StripeCustomerScalarWhereInput | StripeCustomerScalarWhereInput[]
  }

  export type OneTimePasswordUpdateManyWithoutUserNestedInput = {
    create?: XOR<OneTimePasswordCreateWithoutUserInput, OneTimePasswordUncheckedCreateWithoutUserInput> | OneTimePasswordCreateWithoutUserInput[] | OneTimePasswordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OneTimePasswordCreateOrConnectWithoutUserInput | OneTimePasswordCreateOrConnectWithoutUserInput[]
    upsert?: OneTimePasswordUpsertWithWhereUniqueWithoutUserInput | OneTimePasswordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OneTimePasswordCreateManyUserInputEnvelope
    set?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
    disconnect?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
    delete?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
    connect?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
    update?: OneTimePasswordUpdateWithWhereUniqueWithoutUserInput | OneTimePasswordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OneTimePasswordUpdateManyWithWhereWithoutUserInput | OneTimePasswordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OneTimePasswordScalarWhereInput | OneTimePasswordScalarWhereInput[]
  }

  export type LikeGrammarQuestionUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeGrammarQuestionCreateWithoutUserInput, LikeGrammarQuestionUncheckedCreateWithoutUserInput> | LikeGrammarQuestionCreateWithoutUserInput[] | LikeGrammarQuestionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeGrammarQuestionCreateOrConnectWithoutUserInput | LikeGrammarQuestionCreateOrConnectWithoutUserInput[]
    upsert?: LikeGrammarQuestionUpsertWithWhereUniqueWithoutUserInput | LikeGrammarQuestionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeGrammarQuestionCreateManyUserInputEnvelope
    set?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
    disconnect?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
    delete?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
    connect?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
    update?: LikeGrammarQuestionUpdateWithWhereUniqueWithoutUserInput | LikeGrammarQuestionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeGrammarQuestionUpdateManyWithWhereWithoutUserInput | LikeGrammarQuestionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeGrammarQuestionScalarWhereInput | LikeGrammarQuestionScalarWhereInput[]
  }

  export type LikeListeningUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeListeningCreateWithoutUserInput, LikeListeningUncheckedCreateWithoutUserInput> | LikeListeningCreateWithoutUserInput[] | LikeListeningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeListeningCreateOrConnectWithoutUserInput | LikeListeningCreateOrConnectWithoutUserInput[]
    upsert?: LikeListeningUpsertWithWhereUniqueWithoutUserInput | LikeListeningUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeListeningCreateManyUserInputEnvelope
    set?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
    disconnect?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
    delete?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
    connect?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
    update?: LikeListeningUpdateWithWhereUniqueWithoutUserInput | LikeListeningUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeListeningUpdateManyWithWhereWithoutUserInput | LikeListeningUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeListeningScalarWhereInput | LikeListeningScalarWhereInput[]
  }

  export type StripeCustomerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StripeCustomerCreateWithoutUserInput, StripeCustomerUncheckedCreateWithoutUserInput> | StripeCustomerCreateWithoutUserInput[] | StripeCustomerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StripeCustomerCreateOrConnectWithoutUserInput | StripeCustomerCreateOrConnectWithoutUserInput[]
    upsert?: StripeCustomerUpsertWithWhereUniqueWithoutUserInput | StripeCustomerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StripeCustomerCreateManyUserInputEnvelope
    set?: StripeCustomerWhereUniqueInput | StripeCustomerWhereUniqueInput[]
    disconnect?: StripeCustomerWhereUniqueInput | StripeCustomerWhereUniqueInput[]
    delete?: StripeCustomerWhereUniqueInput | StripeCustomerWhereUniqueInput[]
    connect?: StripeCustomerWhereUniqueInput | StripeCustomerWhereUniqueInput[]
    update?: StripeCustomerUpdateWithWhereUniqueWithoutUserInput | StripeCustomerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StripeCustomerUpdateManyWithWhereWithoutUserInput | StripeCustomerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StripeCustomerScalarWhereInput | StripeCustomerScalarWhereInput[]
  }

  export type OneTimePasswordUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OneTimePasswordCreateWithoutUserInput, OneTimePasswordUncheckedCreateWithoutUserInput> | OneTimePasswordCreateWithoutUserInput[] | OneTimePasswordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OneTimePasswordCreateOrConnectWithoutUserInput | OneTimePasswordCreateOrConnectWithoutUserInput[]
    upsert?: OneTimePasswordUpsertWithWhereUniqueWithoutUserInput | OneTimePasswordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OneTimePasswordCreateManyUserInputEnvelope
    set?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
    disconnect?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
    delete?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
    connect?: OneTimePasswordWhereUniqueInput | OneTimePasswordWhereUniqueInput[]
    update?: OneTimePasswordUpdateWithWhereUniqueWithoutUserInput | OneTimePasswordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OneTimePasswordUpdateManyWithWhereWithoutUserInput | OneTimePasswordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OneTimePasswordScalarWhereInput | OneTimePasswordScalarWhereInput[]
  }

  export type LikeGrammarQuestionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeGrammarQuestionCreateWithoutUserInput, LikeGrammarQuestionUncheckedCreateWithoutUserInput> | LikeGrammarQuestionCreateWithoutUserInput[] | LikeGrammarQuestionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeGrammarQuestionCreateOrConnectWithoutUserInput | LikeGrammarQuestionCreateOrConnectWithoutUserInput[]
    upsert?: LikeGrammarQuestionUpsertWithWhereUniqueWithoutUserInput | LikeGrammarQuestionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeGrammarQuestionCreateManyUserInputEnvelope
    set?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
    disconnect?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
    delete?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
    connect?: LikeGrammarQuestionWhereUniqueInput | LikeGrammarQuestionWhereUniqueInput[]
    update?: LikeGrammarQuestionUpdateWithWhereUniqueWithoutUserInput | LikeGrammarQuestionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeGrammarQuestionUpdateManyWithWhereWithoutUserInput | LikeGrammarQuestionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeGrammarQuestionScalarWhereInput | LikeGrammarQuestionScalarWhereInput[]
  }

  export type LikeListeningUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeListeningCreateWithoutUserInput, LikeListeningUncheckedCreateWithoutUserInput> | LikeListeningCreateWithoutUserInput[] | LikeListeningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeListeningCreateOrConnectWithoutUserInput | LikeListeningCreateOrConnectWithoutUserInput[]
    upsert?: LikeListeningUpsertWithWhereUniqueWithoutUserInput | LikeListeningUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeListeningCreateManyUserInputEnvelope
    set?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
    disconnect?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
    delete?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
    connect?: LikeListeningWhereUniqueInput | LikeListeningWhereUniqueInput[]
    update?: LikeListeningUpdateWithWhereUniqueWithoutUserInput | LikeListeningUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeListeningUpdateManyWithWhereWithoutUserInput | LikeListeningUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeListeningScalarWhereInput | LikeListeningScalarWhereInput[]
  }

  export type PassageQuestionCreateNestedManyWithoutPassageInput = {
    create?: XOR<PassageQuestionCreateWithoutPassageInput, PassageQuestionUncheckedCreateWithoutPassageInput> | PassageQuestionCreateWithoutPassageInput[] | PassageQuestionUncheckedCreateWithoutPassageInput[]
    connectOrCreate?: PassageQuestionCreateOrConnectWithoutPassageInput | PassageQuestionCreateOrConnectWithoutPassageInput[]
    createMany?: PassageQuestionCreateManyPassageInputEnvelope
    connect?: PassageQuestionWhereUniqueInput | PassageQuestionWhereUniqueInput[]
  }

  export type PassageSentenceCreateNestedManyWithoutPassageInput = {
    create?: XOR<PassageSentenceCreateWithoutPassageInput, PassageSentenceUncheckedCreateWithoutPassageInput> | PassageSentenceCreateWithoutPassageInput[] | PassageSentenceUncheckedCreateWithoutPassageInput[]
    connectOrCreate?: PassageSentenceCreateOrConnectWithoutPassageInput | PassageSentenceCreateOrConnectWithoutPassageInput[]
    createMany?: PassageSentenceCreateManyPassageInputEnvelope
    connect?: PassageSentenceWhereUniqueInput | PassageSentenceWhereUniqueInput[]
  }

  export type PassageQuestionUncheckedCreateNestedManyWithoutPassageInput = {
    create?: XOR<PassageQuestionCreateWithoutPassageInput, PassageQuestionUncheckedCreateWithoutPassageInput> | PassageQuestionCreateWithoutPassageInput[] | PassageQuestionUncheckedCreateWithoutPassageInput[]
    connectOrCreate?: PassageQuestionCreateOrConnectWithoutPassageInput | PassageQuestionCreateOrConnectWithoutPassageInput[]
    createMany?: PassageQuestionCreateManyPassageInputEnvelope
    connect?: PassageQuestionWhereUniqueInput | PassageQuestionWhereUniqueInput[]
  }

  export type PassageSentenceUncheckedCreateNestedManyWithoutPassageInput = {
    create?: XOR<PassageSentenceCreateWithoutPassageInput, PassageSentenceUncheckedCreateWithoutPassageInput> | PassageSentenceCreateWithoutPassageInput[] | PassageSentenceUncheckedCreateWithoutPassageInput[]
    connectOrCreate?: PassageSentenceCreateOrConnectWithoutPassageInput | PassageSentenceCreateOrConnectWithoutPassageInput[]
    createMany?: PassageSentenceCreateManyPassageInputEnvelope
    connect?: PassageSentenceWhereUniqueInput | PassageSentenceWhereUniqueInput[]
  }

  export type EnumPassageLevelFieldUpdateOperationsInput = {
    set?: $Enums.PassageLevel
  }

  export type PassageQuestionUpdateManyWithoutPassageNestedInput = {
    create?: XOR<PassageQuestionCreateWithoutPassageInput, PassageQuestionUncheckedCreateWithoutPassageInput> | PassageQuestionCreateWithoutPassageInput[] | PassageQuestionUncheckedCreateWithoutPassageInput[]
    connectOrCreate?: PassageQuestionCreateOrConnectWithoutPassageInput | PassageQuestionCreateOrConnectWithoutPassageInput[]
    upsert?: PassageQuestionUpsertWithWhereUniqueWithoutPassageInput | PassageQuestionUpsertWithWhereUniqueWithoutPassageInput[]
    createMany?: PassageQuestionCreateManyPassageInputEnvelope
    set?: PassageQuestionWhereUniqueInput | PassageQuestionWhereUniqueInput[]
    disconnect?: PassageQuestionWhereUniqueInput | PassageQuestionWhereUniqueInput[]
    delete?: PassageQuestionWhereUniqueInput | PassageQuestionWhereUniqueInput[]
    connect?: PassageQuestionWhereUniqueInput | PassageQuestionWhereUniqueInput[]
    update?: PassageQuestionUpdateWithWhereUniqueWithoutPassageInput | PassageQuestionUpdateWithWhereUniqueWithoutPassageInput[]
    updateMany?: PassageQuestionUpdateManyWithWhereWithoutPassageInput | PassageQuestionUpdateManyWithWhereWithoutPassageInput[]
    deleteMany?: PassageQuestionScalarWhereInput | PassageQuestionScalarWhereInput[]
  }

  export type PassageSentenceUpdateManyWithoutPassageNestedInput = {
    create?: XOR<PassageSentenceCreateWithoutPassageInput, PassageSentenceUncheckedCreateWithoutPassageInput> | PassageSentenceCreateWithoutPassageInput[] | PassageSentenceUncheckedCreateWithoutPassageInput[]
    connectOrCreate?: PassageSentenceCreateOrConnectWithoutPassageInput | PassageSentenceCreateOrConnectWithoutPassageInput[]
    upsert?: PassageSentenceUpsertWithWhereUniqueWithoutPassageInput | PassageSentenceUpsertWithWhereUniqueWithoutPassageInput[]
    createMany?: PassageSentenceCreateManyPassageInputEnvelope
    set?: PassageSentenceWhereUniqueInput | PassageSentenceWhereUniqueInput[]
    disconnect?: PassageSentenceWhereUniqueInput | PassageSentenceWhereUniqueInput[]
    delete?: PassageSentenceWhereUniqueInput | PassageSentenceWhereUniqueInput[]
    connect?: PassageSentenceWhereUniqueInput | PassageSentenceWhereUniqueInput[]
    update?: PassageSentenceUpdateWithWhereUniqueWithoutPassageInput | PassageSentenceUpdateWithWhereUniqueWithoutPassageInput[]
    updateMany?: PassageSentenceUpdateManyWithWhereWithoutPassageInput | PassageSentenceUpdateManyWithWhereWithoutPassageInput[]
    deleteMany?: PassageSentenceScalarWhereInput | PassageSentenceScalarWhereInput[]
  }

  export type PassageQuestionUncheckedUpdateManyWithoutPassageNestedInput = {
    create?: XOR<PassageQuestionCreateWithoutPassageInput, PassageQuestionUncheckedCreateWithoutPassageInput> | PassageQuestionCreateWithoutPassageInput[] | PassageQuestionUncheckedCreateWithoutPassageInput[]
    connectOrCreate?: PassageQuestionCreateOrConnectWithoutPassageInput | PassageQuestionCreateOrConnectWithoutPassageInput[]
    upsert?: PassageQuestionUpsertWithWhereUniqueWithoutPassageInput | PassageQuestionUpsertWithWhereUniqueWithoutPassageInput[]
    createMany?: PassageQuestionCreateManyPassageInputEnvelope
    set?: PassageQuestionWhereUniqueInput | PassageQuestionWhereUniqueInput[]
    disconnect?: PassageQuestionWhereUniqueInput | PassageQuestionWhereUniqueInput[]
    delete?: PassageQuestionWhereUniqueInput | PassageQuestionWhereUniqueInput[]
    connect?: PassageQuestionWhereUniqueInput | PassageQuestionWhereUniqueInput[]
    update?: PassageQuestionUpdateWithWhereUniqueWithoutPassageInput | PassageQuestionUpdateWithWhereUniqueWithoutPassageInput[]
    updateMany?: PassageQuestionUpdateManyWithWhereWithoutPassageInput | PassageQuestionUpdateManyWithWhereWithoutPassageInput[]
    deleteMany?: PassageQuestionScalarWhereInput | PassageQuestionScalarWhereInput[]
  }

  export type PassageSentenceUncheckedUpdateManyWithoutPassageNestedInput = {
    create?: XOR<PassageSentenceCreateWithoutPassageInput, PassageSentenceUncheckedCreateWithoutPassageInput> | PassageSentenceCreateWithoutPassageInput[] | PassageSentenceUncheckedCreateWithoutPassageInput[]
    connectOrCreate?: PassageSentenceCreateOrConnectWithoutPassageInput | PassageSentenceCreateOrConnectWithoutPassageInput[]
    upsert?: PassageSentenceUpsertWithWhereUniqueWithoutPassageInput | PassageSentenceUpsertWithWhereUniqueWithoutPassageInput[]
    createMany?: PassageSentenceCreateManyPassageInputEnvelope
    set?: PassageSentenceWhereUniqueInput | PassageSentenceWhereUniqueInput[]
    disconnect?: PassageSentenceWhereUniqueInput | PassageSentenceWhereUniqueInput[]
    delete?: PassageSentenceWhereUniqueInput | PassageSentenceWhereUniqueInput[]
    connect?: PassageSentenceWhereUniqueInput | PassageSentenceWhereUniqueInput[]
    update?: PassageSentenceUpdateWithWhereUniqueWithoutPassageInput | PassageSentenceUpdateWithWhereUniqueWithoutPassageInput[]
    updateMany?: PassageSentenceUpdateManyWithWhereWithoutPassageInput | PassageSentenceUpdateManyWithWhereWithoutPassageInput[]
    deleteMany?: PassageSentenceScalarWhereInput | PassageSentenceScalarWhereInput[]
  }

  export type PassageCreateNestedOneWithoutPassageQuestionInput = {
    create?: XOR<PassageCreateWithoutPassageQuestionInput, PassageUncheckedCreateWithoutPassageQuestionInput>
    connectOrCreate?: PassageCreateOrConnectWithoutPassageQuestionInput
    connect?: PassageWhereUniqueInput
  }

  export type PassageUpdateOneRequiredWithoutPassageQuestionNestedInput = {
    create?: XOR<PassageCreateWithoutPassageQuestionInput, PassageUncheckedCreateWithoutPassageQuestionInput>
    connectOrCreate?: PassageCreateOrConnectWithoutPassageQuestionInput
    upsert?: PassageUpsertWithoutPassageQuestionInput
    connect?: PassageWhereUniqueInput
    update?: XOR<XOR<PassageUpdateToOneWithWhereWithoutPassageQuestionInput, PassageUpdateWithoutPassageQuestionInput>, PassageUncheckedUpdateWithoutPassageQuestionInput>
  }

  export type PassageCreateNestedOneWithoutPassageSentenceInput = {
    create?: XOR<PassageCreateWithoutPassageSentenceInput, PassageUncheckedCreateWithoutPassageSentenceInput>
    connectOrCreate?: PassageCreateOrConnectWithoutPassageSentenceInput
    connect?: PassageWhereUniqueInput
  }

  export type PassageUpdateOneRequiredWithoutPassageSentenceNestedInput = {
    create?: XOR<PassageCreateWithoutPassageSentenceInput, PassageUncheckedCreateWithoutPassageSentenceInput>
    connectOrCreate?: PassageCreateOrConnectWithoutPassageSentenceInput
    upsert?: PassageUpsertWithoutPassageSentenceInput
    connect?: PassageWhereUniqueInput
    update?: XOR<XOR<PassageUpdateToOneWithWhereWithoutPassageSentenceInput, PassageUpdateWithoutPassageSentenceInput>, PassageUncheckedUpdateWithoutPassageSentenceInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumAdminRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRole[]
    notIn?: $Enums.AdminRole[]
    not?: NestedEnumAdminRoleFilter<$PrismaModel> | $Enums.AdminRole
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumAdminRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRole[]
    notIn?: $Enums.AdminRole[]
    not?: NestedEnumAdminRoleWithAggregatesFilter<$PrismaModel> | $Enums.AdminRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdminRoleFilter<$PrismaModel>
    _max?: NestedEnumAdminRoleFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumLogAboutFilter<$PrismaModel = never> = {
    equals?: $Enums.LogAbout | EnumLogAboutFieldRefInput<$PrismaModel>
    in?: $Enums.LogAbout[]
    notIn?: $Enums.LogAbout[]
    not?: NestedEnumLogAboutFilter<$PrismaModel> | $Enums.LogAbout
  }

  export type NestedEnumLogLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.LogLevel | EnumLogLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LogLevel[]
    notIn?: $Enums.LogLevel[]
    not?: NestedEnumLogLevelFilter<$PrismaModel> | $Enums.LogLevel
  }

  export type NestedEnumLogAboutWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogAbout | EnumLogAboutFieldRefInput<$PrismaModel>
    in?: $Enums.LogAbout[]
    notIn?: $Enums.LogAbout[]
    not?: NestedEnumLogAboutWithAggregatesFilter<$PrismaModel> | $Enums.LogAbout
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogAboutFilter<$PrismaModel>
    _max?: NestedEnumLogAboutFilter<$PrismaModel>
  }

  export type NestedEnumLogLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogLevel | EnumLogLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LogLevel[]
    notIn?: $Enums.LogLevel[]
    not?: NestedEnumLogLevelWithAggregatesFilter<$PrismaModel> | $Enums.LogLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogLevelFilter<$PrismaModel>
    _max?: NestedEnumLogLevelFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumcheckoutTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.checkoutType | EnumcheckoutTypeFieldRefInput<$PrismaModel>
    in?: $Enums.checkoutType[]
    notIn?: $Enums.checkoutType[]
    not?: NestedEnumcheckoutTypeFilter<$PrismaModel> | $Enums.checkoutType
  }

  export type NestedEnumcheckoutTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.checkoutType | EnumcheckoutTypeFieldRefInput<$PrismaModel>
    in?: $Enums.checkoutType[]
    notIn?: $Enums.checkoutType[]
    not?: NestedEnumcheckoutTypeWithAggregatesFilter<$PrismaModel> | $Enums.checkoutType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcheckoutTypeFilter<$PrismaModel>
    _max?: NestedEnumcheckoutTypeFilter<$PrismaModel>
  }

  export type NestedEnumOneTimeNumberUsageFilter<$PrismaModel = never> = {
    equals?: $Enums.OneTimeNumberUsage | EnumOneTimeNumberUsageFieldRefInput<$PrismaModel>
    in?: $Enums.OneTimeNumberUsage[]
    notIn?: $Enums.OneTimeNumberUsage[]
    not?: NestedEnumOneTimeNumberUsageFilter<$PrismaModel> | $Enums.OneTimeNumberUsage
  }

  export type NestedEnumOneTimeNumberUsageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OneTimeNumberUsage | EnumOneTimeNumberUsageFieldRefInput<$PrismaModel>
    in?: $Enums.OneTimeNumberUsage[]
    notIn?: $Enums.OneTimeNumberUsage[]
    not?: NestedEnumOneTimeNumberUsageWithAggregatesFilter<$PrismaModel> | $Enums.OneTimeNumberUsage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOneTimeNumberUsageFilter<$PrismaModel>
    _max?: NestedEnumOneTimeNumberUsageFilter<$PrismaModel>
  }

  export type NestedEnumcheckoutStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.checkoutStatus | EnumcheckoutStatusFieldRefInput<$PrismaModel>
    in?: $Enums.checkoutStatus[]
    notIn?: $Enums.checkoutStatus[]
    not?: NestedEnumcheckoutStatusFilter<$PrismaModel> | $Enums.checkoutStatus
  }

  export type NestedEnumcheckoutStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.checkoutStatus | EnumcheckoutStatusFieldRefInput<$PrismaModel>
    in?: $Enums.checkoutStatus[]
    notIn?: $Enums.checkoutStatus[]
    not?: NestedEnumcheckoutStatusWithAggregatesFilter<$PrismaModel> | $Enums.checkoutStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcheckoutStatusFilter<$PrismaModel>
    _max?: NestedEnumcheckoutStatusFilter<$PrismaModel>
  }

  export type NestedEnumsubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.subscriptionStatus | EnumsubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.subscriptionStatus[]
    notIn?: $Enums.subscriptionStatus[]
    not?: NestedEnumsubscriptionStatusFilter<$PrismaModel> | $Enums.subscriptionStatus
  }

  export type NestedEnumsubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.subscriptionStatus | EnumsubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.subscriptionStatus[]
    notIn?: $Enums.subscriptionStatus[]
    not?: NestedEnumsubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.subscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumsubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumsubscriptionStatusFilter<$PrismaModel>
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumPassageLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.PassageLevel | EnumPassageLevelFieldRefInput<$PrismaModel>
    in?: $Enums.PassageLevel[]
    notIn?: $Enums.PassageLevel[]
    not?: NestedEnumPassageLevelFilter<$PrismaModel> | $Enums.PassageLevel
  }

  export type NestedEnumPassageLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PassageLevel | EnumPassageLevelFieldRefInput<$PrismaModel>
    in?: $Enums.PassageLevel[]
    notIn?: $Enums.PassageLevel[]
    not?: NestedEnumPassageLevelWithAggregatesFilter<$PrismaModel> | $Enums.PassageLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPassageLevelFilter<$PrismaModel>
    _max?: NestedEnumPassageLevelFilter<$PrismaModel>
  }

  export type OneTimePasswordCreateWithoutAdminUserInput = {
    usage: $Enums.OneTimeNumberUsage
    oneTimePassword: string
    validated?: boolean
    updatedAt?: Date | string
    User?: UserCreateNestedOneWithoutOneTimePasswordInput
  }

  export type OneTimePasswordUncheckedCreateWithoutAdminUserInput = {
    id?: number
    usage: $Enums.OneTimeNumberUsage
    oneTimePassword: string
    validated?: boolean
    updatedAt?: Date | string
    userId?: string | null
  }

  export type OneTimePasswordCreateOrConnectWithoutAdminUserInput = {
    where: OneTimePasswordWhereUniqueInput
    create: XOR<OneTimePasswordCreateWithoutAdminUserInput, OneTimePasswordUncheckedCreateWithoutAdminUserInput>
  }

  export type OneTimePasswordCreateManyAdminUserInputEnvelope = {
    data: OneTimePasswordCreateManyAdminUserInput | OneTimePasswordCreateManyAdminUserInput[]
    skipDuplicates?: boolean
  }

  export type OneTimePasswordUpsertWithWhereUniqueWithoutAdminUserInput = {
    where: OneTimePasswordWhereUniqueInput
    update: XOR<OneTimePasswordUpdateWithoutAdminUserInput, OneTimePasswordUncheckedUpdateWithoutAdminUserInput>
    create: XOR<OneTimePasswordCreateWithoutAdminUserInput, OneTimePasswordUncheckedCreateWithoutAdminUserInput>
  }

  export type OneTimePasswordUpdateWithWhereUniqueWithoutAdminUserInput = {
    where: OneTimePasswordWhereUniqueInput
    data: XOR<OneTimePasswordUpdateWithoutAdminUserInput, OneTimePasswordUncheckedUpdateWithoutAdminUserInput>
  }

  export type OneTimePasswordUpdateManyWithWhereWithoutAdminUserInput = {
    where: OneTimePasswordScalarWhereInput
    data: XOR<OneTimePasswordUpdateManyMutationInput, OneTimePasswordUncheckedUpdateManyWithoutAdminUserInput>
  }

  export type OneTimePasswordScalarWhereInput = {
    AND?: OneTimePasswordScalarWhereInput | OneTimePasswordScalarWhereInput[]
    OR?: OneTimePasswordScalarWhereInput[]
    NOT?: OneTimePasswordScalarWhereInput | OneTimePasswordScalarWhereInput[]
    id?: IntFilter<"OneTimePassword"> | number
    usage?: EnumOneTimeNumberUsageFilter<"OneTimePassword"> | $Enums.OneTimeNumberUsage
    oneTimePassword?: StringFilter<"OneTimePassword"> | string
    validated?: BoolFilter<"OneTimePassword"> | boolean
    updatedAt?: DateTimeFilter<"OneTimePassword"> | Date | string
    userId?: StringNullableFilter<"OneTimePassword"> | string | null
    adminUserId?: StringNullableFilter<"OneTimePassword"> | string | null
  }

  export type BlogCategoryCreateWithoutBlogInput = {
    category: string
  }

  export type BlogCategoryUncheckedCreateWithoutBlogInput = {
    id?: number
    category: string
  }

  export type BlogCategoryCreateOrConnectWithoutBlogInput = {
    where: BlogCategoryWhereUniqueInput
    create: XOR<BlogCategoryCreateWithoutBlogInput, BlogCategoryUncheckedCreateWithoutBlogInput>
  }

  export type BlogUniversityDepartmentCreateWithoutBlogInput = {
    name: string
    rikei?: boolean
    examType?: number | null
    articleYear?: string | null
    University: BlogUniversityCreateNestedOneWithoutBlogUniversityDepartmentInput
  }

  export type BlogUniversityDepartmentUncheckedCreateWithoutBlogInput = {
    id?: number
    universityId: number
    name: string
    rikei?: boolean
    examType?: number | null
    articleYear?: string | null
  }

  export type BlogUniversityDepartmentCreateOrConnectWithoutBlogInput = {
    where: BlogUniversityDepartmentWhereUniqueInput
    create: XOR<BlogUniversityDepartmentCreateWithoutBlogInput, BlogUniversityDepartmentUncheckedCreateWithoutBlogInput>
  }

  export type BlogUniversityDepartmentCreateManyBlogInputEnvelope = {
    data: BlogUniversityDepartmentCreateManyBlogInput | BlogUniversityDepartmentCreateManyBlogInput[]
    skipDuplicates?: boolean
  }

  export type BlogCategoryUpsertWithoutBlogInput = {
    update: XOR<BlogCategoryUpdateWithoutBlogInput, BlogCategoryUncheckedUpdateWithoutBlogInput>
    create: XOR<BlogCategoryCreateWithoutBlogInput, BlogCategoryUncheckedCreateWithoutBlogInput>
    where?: BlogCategoryWhereInput
  }

  export type BlogCategoryUpdateToOneWithWhereWithoutBlogInput = {
    where?: BlogCategoryWhereInput
    data: XOR<BlogCategoryUpdateWithoutBlogInput, BlogCategoryUncheckedUpdateWithoutBlogInput>
  }

  export type BlogCategoryUpdateWithoutBlogInput = {
    category?: StringFieldUpdateOperationsInput | string
  }

  export type BlogCategoryUncheckedUpdateWithoutBlogInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
  }

  export type BlogUniversityDepartmentUpsertWithWhereUniqueWithoutBlogInput = {
    where: BlogUniversityDepartmentWhereUniqueInput
    update: XOR<BlogUniversityDepartmentUpdateWithoutBlogInput, BlogUniversityDepartmentUncheckedUpdateWithoutBlogInput>
    create: XOR<BlogUniversityDepartmentCreateWithoutBlogInput, BlogUniversityDepartmentUncheckedCreateWithoutBlogInput>
  }

  export type BlogUniversityDepartmentUpdateWithWhereUniqueWithoutBlogInput = {
    where: BlogUniversityDepartmentWhereUniqueInput
    data: XOR<BlogUniversityDepartmentUpdateWithoutBlogInput, BlogUniversityDepartmentUncheckedUpdateWithoutBlogInput>
  }

  export type BlogUniversityDepartmentUpdateManyWithWhereWithoutBlogInput = {
    where: BlogUniversityDepartmentScalarWhereInput
    data: XOR<BlogUniversityDepartmentUpdateManyMutationInput, BlogUniversityDepartmentUncheckedUpdateManyWithoutBlogInput>
  }

  export type BlogUniversityDepartmentScalarWhereInput = {
    AND?: BlogUniversityDepartmentScalarWhereInput | BlogUniversityDepartmentScalarWhereInput[]
    OR?: BlogUniversityDepartmentScalarWhereInput[]
    NOT?: BlogUniversityDepartmentScalarWhereInput | BlogUniversityDepartmentScalarWhereInput[]
    id?: IntFilter<"BlogUniversityDepartment"> | number
    blogId?: IntNullableFilter<"BlogUniversityDepartment"> | number | null
    universityId?: IntFilter<"BlogUniversityDepartment"> | number
    name?: StringFilter<"BlogUniversityDepartment"> | string
    rikei?: BoolFilter<"BlogUniversityDepartment"> | boolean
    examType?: IntNullableFilter<"BlogUniversityDepartment"> | number | null
    articleYear?: StringNullableFilter<"BlogUniversityDepartment"> | string | null
  }

  export type BlogCreateWithoutCategoryInput = {
    published?: boolean
    name: string
    title: string
    keywordList: string
    description: string
    BlogUniversityDepartment?: BlogUniversityDepartmentCreateNestedManyWithoutBlogInput
  }

  export type BlogUncheckedCreateWithoutCategoryInput = {
    id?: number
    published?: boolean
    name: string
    title: string
    keywordList: string
    description: string
    BlogUniversityDepartment?: BlogUniversityDepartmentUncheckedCreateNestedManyWithoutBlogInput
  }

  export type BlogCreateOrConnectWithoutCategoryInput = {
    where: BlogWhereUniqueInput
    create: XOR<BlogCreateWithoutCategoryInput, BlogUncheckedCreateWithoutCategoryInput>
  }

  export type BlogCreateManyCategoryInputEnvelope = {
    data: BlogCreateManyCategoryInput | BlogCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type BlogUpsertWithWhereUniqueWithoutCategoryInput = {
    where: BlogWhereUniqueInput
    update: XOR<BlogUpdateWithoutCategoryInput, BlogUncheckedUpdateWithoutCategoryInput>
    create: XOR<BlogCreateWithoutCategoryInput, BlogUncheckedCreateWithoutCategoryInput>
  }

  export type BlogUpdateWithWhereUniqueWithoutCategoryInput = {
    where: BlogWhereUniqueInput
    data: XOR<BlogUpdateWithoutCategoryInput, BlogUncheckedUpdateWithoutCategoryInput>
  }

  export type BlogUpdateManyWithWhereWithoutCategoryInput = {
    where: BlogScalarWhereInput
    data: XOR<BlogUpdateManyMutationInput, BlogUncheckedUpdateManyWithoutCategoryInput>
  }

  export type BlogScalarWhereInput = {
    AND?: BlogScalarWhereInput | BlogScalarWhereInput[]
    OR?: BlogScalarWhereInput[]
    NOT?: BlogScalarWhereInput | BlogScalarWhereInput[]
    id?: IntFilter<"Blog"> | number
    categoryId?: IntFilter<"Blog"> | number
    published?: BoolFilter<"Blog"> | boolean
    name?: StringFilter<"Blog"> | string
    title?: StringFilter<"Blog"> | string
    keywordList?: StringFilter<"Blog"> | string
    description?: StringFilter<"Blog"> | string
  }

  export type BlogUniversityDepartmentCreateWithoutUniversityInput = {
    name: string
    rikei?: boolean
    examType?: number | null
    articleYear?: string | null
    Blog?: BlogCreateNestedOneWithoutBlogUniversityDepartmentInput
  }

  export type BlogUniversityDepartmentUncheckedCreateWithoutUniversityInput = {
    id?: number
    blogId?: number | null
    name: string
    rikei?: boolean
    examType?: number | null
    articleYear?: string | null
  }

  export type BlogUniversityDepartmentCreateOrConnectWithoutUniversityInput = {
    where: BlogUniversityDepartmentWhereUniqueInput
    create: XOR<BlogUniversityDepartmentCreateWithoutUniversityInput, BlogUniversityDepartmentUncheckedCreateWithoutUniversityInput>
  }

  export type BlogUniversityDepartmentCreateManyUniversityInputEnvelope = {
    data: BlogUniversityDepartmentCreateManyUniversityInput | BlogUniversityDepartmentCreateManyUniversityInput[]
    skipDuplicates?: boolean
  }

  export type BlogUniversityDepartmentUpsertWithWhereUniqueWithoutUniversityInput = {
    where: BlogUniversityDepartmentWhereUniqueInput
    update: XOR<BlogUniversityDepartmentUpdateWithoutUniversityInput, BlogUniversityDepartmentUncheckedUpdateWithoutUniversityInput>
    create: XOR<BlogUniversityDepartmentCreateWithoutUniversityInput, BlogUniversityDepartmentUncheckedCreateWithoutUniversityInput>
  }

  export type BlogUniversityDepartmentUpdateWithWhereUniqueWithoutUniversityInput = {
    where: BlogUniversityDepartmentWhereUniqueInput
    data: XOR<BlogUniversityDepartmentUpdateWithoutUniversityInput, BlogUniversityDepartmentUncheckedUpdateWithoutUniversityInput>
  }

  export type BlogUniversityDepartmentUpdateManyWithWhereWithoutUniversityInput = {
    where: BlogUniversityDepartmentScalarWhereInput
    data: XOR<BlogUniversityDepartmentUpdateManyMutationInput, BlogUniversityDepartmentUncheckedUpdateManyWithoutUniversityInput>
  }

  export type BlogCreateWithoutBlogUniversityDepartmentInput = {
    published?: boolean
    name: string
    title: string
    keywordList: string
    description: string
    Category: BlogCategoryCreateNestedOneWithoutBlogInput
  }

  export type BlogUncheckedCreateWithoutBlogUniversityDepartmentInput = {
    id?: number
    categoryId: number
    published?: boolean
    name: string
    title: string
    keywordList: string
    description: string
  }

  export type BlogCreateOrConnectWithoutBlogUniversityDepartmentInput = {
    where: BlogWhereUniqueInput
    create: XOR<BlogCreateWithoutBlogUniversityDepartmentInput, BlogUncheckedCreateWithoutBlogUniversityDepartmentInput>
  }

  export type BlogUniversityCreateWithoutBlogUniversityDepartmentInput = {
    schoolName: string
    publicSchool?: boolean
    region: number
    eikenUsable?: boolean
    schoolUrl?: string | null
  }

  export type BlogUniversityUncheckedCreateWithoutBlogUniversityDepartmentInput = {
    id?: number
    schoolName: string
    publicSchool?: boolean
    region: number
    eikenUsable?: boolean
    schoolUrl?: string | null
  }

  export type BlogUniversityCreateOrConnectWithoutBlogUniversityDepartmentInput = {
    where: BlogUniversityWhereUniqueInput
    create: XOR<BlogUniversityCreateWithoutBlogUniversityDepartmentInput, BlogUniversityUncheckedCreateWithoutBlogUniversityDepartmentInput>
  }

  export type BlogUpsertWithoutBlogUniversityDepartmentInput = {
    update: XOR<BlogUpdateWithoutBlogUniversityDepartmentInput, BlogUncheckedUpdateWithoutBlogUniversityDepartmentInput>
    create: XOR<BlogCreateWithoutBlogUniversityDepartmentInput, BlogUncheckedCreateWithoutBlogUniversityDepartmentInput>
    where?: BlogWhereInput
  }

  export type BlogUpdateToOneWithWhereWithoutBlogUniversityDepartmentInput = {
    where?: BlogWhereInput
    data: XOR<BlogUpdateWithoutBlogUniversityDepartmentInput, BlogUncheckedUpdateWithoutBlogUniversityDepartmentInput>
  }

  export type BlogUpdateWithoutBlogUniversityDepartmentInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keywordList?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    Category?: BlogCategoryUpdateOneRequiredWithoutBlogNestedInput
  }

  export type BlogUncheckedUpdateWithoutBlogUniversityDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keywordList?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type BlogUniversityUpsertWithoutBlogUniversityDepartmentInput = {
    update: XOR<BlogUniversityUpdateWithoutBlogUniversityDepartmentInput, BlogUniversityUncheckedUpdateWithoutBlogUniversityDepartmentInput>
    create: XOR<BlogUniversityCreateWithoutBlogUniversityDepartmentInput, BlogUniversityUncheckedCreateWithoutBlogUniversityDepartmentInput>
    where?: BlogUniversityWhereInput
  }

  export type BlogUniversityUpdateToOneWithWhereWithoutBlogUniversityDepartmentInput = {
    where?: BlogUniversityWhereInput
    data: XOR<BlogUniversityUpdateWithoutBlogUniversityDepartmentInput, BlogUniversityUncheckedUpdateWithoutBlogUniversityDepartmentInput>
  }

  export type BlogUniversityUpdateWithoutBlogUniversityDepartmentInput = {
    schoolName?: StringFieldUpdateOperationsInput | string
    publicSchool?: BoolFieldUpdateOperationsInput | boolean
    region?: IntFieldUpdateOperationsInput | number
    eikenUsable?: BoolFieldUpdateOperationsInput | boolean
    schoolUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlogUniversityUncheckedUpdateWithoutBlogUniversityDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    schoolName?: StringFieldUpdateOperationsInput | string
    publicSchool?: BoolFieldUpdateOperationsInput | boolean
    region?: IntFieldUpdateOperationsInput | number
    eikenUsable?: BoolFieldUpdateOperationsInput | boolean
    schoolUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GrammarCreateWithoutGradeInput = {
    unit: string
    tangen: string
    localId: number
    GrammarQuestion?: GrammarQuestionCreateNestedManyWithoutGrammarInput
  }

  export type GrammarUncheckedCreateWithoutGradeInput = {
    id?: number
    unit: string
    tangen: string
    localId: number
    GrammarQuestion?: GrammarQuestionUncheckedCreateNestedManyWithoutGrammarInput
  }

  export type GrammarCreateOrConnectWithoutGradeInput = {
    where: GrammarWhereUniqueInput
    create: XOR<GrammarCreateWithoutGradeInput, GrammarUncheckedCreateWithoutGradeInput>
  }

  export type GrammarCreateManyGradeInputEnvelope = {
    data: GrammarCreateManyGradeInput | GrammarCreateManyGradeInput[]
    skipDuplicates?: boolean
  }

  export type GrammarUpsertWithWhereUniqueWithoutGradeInput = {
    where: GrammarWhereUniqueInput
    update: XOR<GrammarUpdateWithoutGradeInput, GrammarUncheckedUpdateWithoutGradeInput>
    create: XOR<GrammarCreateWithoutGradeInput, GrammarUncheckedCreateWithoutGradeInput>
  }

  export type GrammarUpdateWithWhereUniqueWithoutGradeInput = {
    where: GrammarWhereUniqueInput
    data: XOR<GrammarUpdateWithoutGradeInput, GrammarUncheckedUpdateWithoutGradeInput>
  }

  export type GrammarUpdateManyWithWhereWithoutGradeInput = {
    where: GrammarScalarWhereInput
    data: XOR<GrammarUpdateManyMutationInput, GrammarUncheckedUpdateManyWithoutGradeInput>
  }

  export type GrammarScalarWhereInput = {
    AND?: GrammarScalarWhereInput | GrammarScalarWhereInput[]
    OR?: GrammarScalarWhereInput[]
    NOT?: GrammarScalarWhereInput | GrammarScalarWhereInput[]
    id?: IntFilter<"Grammar"> | number
    unit?: StringFilter<"Grammar"> | string
    tangen?: StringFilter<"Grammar"> | string
    localId?: IntFilter<"Grammar"> | number
    gradeId?: IntFilter<"Grammar"> | number
  }

  export type GradeCreateWithoutGrammarInput = {
    grade: string
    gradeJp: string
  }

  export type GradeUncheckedCreateWithoutGrammarInput = {
    id?: number
    grade: string
    gradeJp: string
  }

  export type GradeCreateOrConnectWithoutGrammarInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutGrammarInput, GradeUncheckedCreateWithoutGrammarInput>
  }

  export type GrammarQuestionCreateWithoutGrammarInput = {
    title: string
    sentence: string
    question: JsonNullValueInput | InputJsonValue
    answer: string
    explanation: string
    localId: number
    LikeGrammarQuestion?: LikeGrammarQuestionCreateNestedManyWithoutGrammarQuestionInput
  }

  export type GrammarQuestionUncheckedCreateWithoutGrammarInput = {
    id?: number
    title: string
    sentence: string
    question: JsonNullValueInput | InputJsonValue
    answer: string
    explanation: string
    localId: number
    LikeGrammarQuestion?: LikeGrammarQuestionUncheckedCreateNestedManyWithoutGrammarQuestionInput
  }

  export type GrammarQuestionCreateOrConnectWithoutGrammarInput = {
    where: GrammarQuestionWhereUniqueInput
    create: XOR<GrammarQuestionCreateWithoutGrammarInput, GrammarQuestionUncheckedCreateWithoutGrammarInput>
  }

  export type GrammarQuestionCreateManyGrammarInputEnvelope = {
    data: GrammarQuestionCreateManyGrammarInput | GrammarQuestionCreateManyGrammarInput[]
    skipDuplicates?: boolean
  }

  export type GradeUpsertWithoutGrammarInput = {
    update: XOR<GradeUpdateWithoutGrammarInput, GradeUncheckedUpdateWithoutGrammarInput>
    create: XOR<GradeCreateWithoutGrammarInput, GradeUncheckedCreateWithoutGrammarInput>
    where?: GradeWhereInput
  }

  export type GradeUpdateToOneWithWhereWithoutGrammarInput = {
    where?: GradeWhereInput
    data: XOR<GradeUpdateWithoutGrammarInput, GradeUncheckedUpdateWithoutGrammarInput>
  }

  export type GradeUpdateWithoutGrammarInput = {
    grade?: StringFieldUpdateOperationsInput | string
    gradeJp?: StringFieldUpdateOperationsInput | string
  }

  export type GradeUncheckedUpdateWithoutGrammarInput = {
    id?: IntFieldUpdateOperationsInput | number
    grade?: StringFieldUpdateOperationsInput | string
    gradeJp?: StringFieldUpdateOperationsInput | string
  }

  export type GrammarQuestionUpsertWithWhereUniqueWithoutGrammarInput = {
    where: GrammarQuestionWhereUniqueInput
    update: XOR<GrammarQuestionUpdateWithoutGrammarInput, GrammarQuestionUncheckedUpdateWithoutGrammarInput>
    create: XOR<GrammarQuestionCreateWithoutGrammarInput, GrammarQuestionUncheckedCreateWithoutGrammarInput>
  }

  export type GrammarQuestionUpdateWithWhereUniqueWithoutGrammarInput = {
    where: GrammarQuestionWhereUniqueInput
    data: XOR<GrammarQuestionUpdateWithoutGrammarInput, GrammarQuestionUncheckedUpdateWithoutGrammarInput>
  }

  export type GrammarQuestionUpdateManyWithWhereWithoutGrammarInput = {
    where: GrammarQuestionScalarWhereInput
    data: XOR<GrammarQuestionUpdateManyMutationInput, GrammarQuestionUncheckedUpdateManyWithoutGrammarInput>
  }

  export type GrammarQuestionScalarWhereInput = {
    AND?: GrammarQuestionScalarWhereInput | GrammarQuestionScalarWhereInput[]
    OR?: GrammarQuestionScalarWhereInput[]
    NOT?: GrammarQuestionScalarWhereInput | GrammarQuestionScalarWhereInput[]
    id?: IntFilter<"GrammarQuestion"> | number
    title?: StringFilter<"GrammarQuestion"> | string
    sentence?: StringFilter<"GrammarQuestion"> | string
    question?: JsonFilter<"GrammarQuestion">
    answer?: StringFilter<"GrammarQuestion"> | string
    explanation?: StringFilter<"GrammarQuestion"> | string
    localId?: IntFilter<"GrammarQuestion"> | number
    grammarId?: IntFilter<"GrammarQuestion"> | number
  }

  export type GrammarCreateWithoutGrammarQuestionInput = {
    unit: string
    tangen: string
    localId: number
    Grade: GradeCreateNestedOneWithoutGrammarInput
  }

  export type GrammarUncheckedCreateWithoutGrammarQuestionInput = {
    id?: number
    unit: string
    tangen: string
    localId: number
    gradeId: number
  }

  export type GrammarCreateOrConnectWithoutGrammarQuestionInput = {
    where: GrammarWhereUniqueInput
    create: XOR<GrammarCreateWithoutGrammarQuestionInput, GrammarUncheckedCreateWithoutGrammarQuestionInput>
  }

  export type LikeGrammarQuestionCreateWithoutGrammarQuestionInput = {
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutLikeGrammarQuestionInput
  }

  export type LikeGrammarQuestionUncheckedCreateWithoutGrammarQuestionInput = {
    id?: number
    userId: string
    createdAt?: Date | string
  }

  export type LikeGrammarQuestionCreateOrConnectWithoutGrammarQuestionInput = {
    where: LikeGrammarQuestionWhereUniqueInput
    create: XOR<LikeGrammarQuestionCreateWithoutGrammarQuestionInput, LikeGrammarQuestionUncheckedCreateWithoutGrammarQuestionInput>
  }

  export type LikeGrammarQuestionCreateManyGrammarQuestionInputEnvelope = {
    data: LikeGrammarQuestionCreateManyGrammarQuestionInput | LikeGrammarQuestionCreateManyGrammarQuestionInput[]
    skipDuplicates?: boolean
  }

  export type GrammarUpsertWithoutGrammarQuestionInput = {
    update: XOR<GrammarUpdateWithoutGrammarQuestionInput, GrammarUncheckedUpdateWithoutGrammarQuestionInput>
    create: XOR<GrammarCreateWithoutGrammarQuestionInput, GrammarUncheckedCreateWithoutGrammarQuestionInput>
    where?: GrammarWhereInput
  }

  export type GrammarUpdateToOneWithWhereWithoutGrammarQuestionInput = {
    where?: GrammarWhereInput
    data: XOR<GrammarUpdateWithoutGrammarQuestionInput, GrammarUncheckedUpdateWithoutGrammarQuestionInput>
  }

  export type GrammarUpdateWithoutGrammarQuestionInput = {
    unit?: StringFieldUpdateOperationsInput | string
    tangen?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
    Grade?: GradeUpdateOneRequiredWithoutGrammarNestedInput
  }

  export type GrammarUncheckedUpdateWithoutGrammarQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    tangen?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
  }

  export type LikeGrammarQuestionUpsertWithWhereUniqueWithoutGrammarQuestionInput = {
    where: LikeGrammarQuestionWhereUniqueInput
    update: XOR<LikeGrammarQuestionUpdateWithoutGrammarQuestionInput, LikeGrammarQuestionUncheckedUpdateWithoutGrammarQuestionInput>
    create: XOR<LikeGrammarQuestionCreateWithoutGrammarQuestionInput, LikeGrammarQuestionUncheckedCreateWithoutGrammarQuestionInput>
  }

  export type LikeGrammarQuestionUpdateWithWhereUniqueWithoutGrammarQuestionInput = {
    where: LikeGrammarQuestionWhereUniqueInput
    data: XOR<LikeGrammarQuestionUpdateWithoutGrammarQuestionInput, LikeGrammarQuestionUncheckedUpdateWithoutGrammarQuestionInput>
  }

  export type LikeGrammarQuestionUpdateManyWithWhereWithoutGrammarQuestionInput = {
    where: LikeGrammarQuestionScalarWhereInput
    data: XOR<LikeGrammarQuestionUpdateManyMutationInput, LikeGrammarQuestionUncheckedUpdateManyWithoutGrammarQuestionInput>
  }

  export type LikeGrammarQuestionScalarWhereInput = {
    AND?: LikeGrammarQuestionScalarWhereInput | LikeGrammarQuestionScalarWhereInput[]
    OR?: LikeGrammarQuestionScalarWhereInput[]
    NOT?: LikeGrammarQuestionScalarWhereInput | LikeGrammarQuestionScalarWhereInput[]
    id?: IntFilter<"LikeGrammarQuestion"> | number
    userId?: StringFilter<"LikeGrammarQuestion"> | string
    grammarQuestionId?: IntFilter<"LikeGrammarQuestion"> | number
    createdAt?: DateTimeFilter<"LikeGrammarQuestion"> | Date | string
  }

  export type UserCreateWithoutLikeGrammarQuestionInput = {
    id?: string
    userName: string
    gender: $Enums.Gender
    country: string
    city: string
    email: string
    birthYear: string
    activated?: boolean
    invited?: boolean
    invitedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    StripeCustomer?: StripeCustomerCreateNestedManyWithoutUserInput
    OneTimePassword?: OneTimePasswordCreateNestedManyWithoutUserInput
    LikeListening?: LikeListeningCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikeGrammarQuestionInput = {
    id?: string
    userName: string
    gender: $Enums.Gender
    country: string
    city: string
    email: string
    birthYear: string
    activated?: boolean
    invited?: boolean
    invitedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    StripeCustomer?: StripeCustomerUncheckedCreateNestedManyWithoutUserInput
    OneTimePassword?: OneTimePasswordUncheckedCreateNestedManyWithoutUserInput
    LikeListening?: LikeListeningUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikeGrammarQuestionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikeGrammarQuestionInput, UserUncheckedCreateWithoutLikeGrammarQuestionInput>
  }

  export type GrammarQuestionCreateWithoutLikeGrammarQuestionInput = {
    title: string
    sentence: string
    question: JsonNullValueInput | InputJsonValue
    answer: string
    explanation: string
    localId: number
    Grammar: GrammarCreateNestedOneWithoutGrammarQuestionInput
  }

  export type GrammarQuestionUncheckedCreateWithoutLikeGrammarQuestionInput = {
    id?: number
    title: string
    sentence: string
    question: JsonNullValueInput | InputJsonValue
    answer: string
    explanation: string
    localId: number
    grammarId: number
  }

  export type GrammarQuestionCreateOrConnectWithoutLikeGrammarQuestionInput = {
    where: GrammarQuestionWhereUniqueInput
    create: XOR<GrammarQuestionCreateWithoutLikeGrammarQuestionInput, GrammarQuestionUncheckedCreateWithoutLikeGrammarQuestionInput>
  }

  export type UserUpsertWithoutLikeGrammarQuestionInput = {
    update: XOR<UserUpdateWithoutLikeGrammarQuestionInput, UserUncheckedUpdateWithoutLikeGrammarQuestionInput>
    create: XOR<UserCreateWithoutLikeGrammarQuestionInput, UserUncheckedCreateWithoutLikeGrammarQuestionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLikeGrammarQuestionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLikeGrammarQuestionInput, UserUncheckedUpdateWithoutLikeGrammarQuestionInput>
  }

  export type UserUpdateWithoutLikeGrammarQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birthYear?: StringFieldUpdateOperationsInput | string
    activated?: BoolFieldUpdateOperationsInput | boolean
    invited?: BoolFieldUpdateOperationsInput | boolean
    invitedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    StripeCustomer?: StripeCustomerUpdateManyWithoutUserNestedInput
    OneTimePassword?: OneTimePasswordUpdateManyWithoutUserNestedInput
    LikeListening?: LikeListeningUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLikeGrammarQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birthYear?: StringFieldUpdateOperationsInput | string
    activated?: BoolFieldUpdateOperationsInput | boolean
    invited?: BoolFieldUpdateOperationsInput | boolean
    invitedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    StripeCustomer?: StripeCustomerUncheckedUpdateManyWithoutUserNestedInput
    OneTimePassword?: OneTimePasswordUncheckedUpdateManyWithoutUserNestedInput
    LikeListening?: LikeListeningUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GrammarQuestionUpsertWithoutLikeGrammarQuestionInput = {
    update: XOR<GrammarQuestionUpdateWithoutLikeGrammarQuestionInput, GrammarQuestionUncheckedUpdateWithoutLikeGrammarQuestionInput>
    create: XOR<GrammarQuestionCreateWithoutLikeGrammarQuestionInput, GrammarQuestionUncheckedCreateWithoutLikeGrammarQuestionInput>
    where?: GrammarQuestionWhereInput
  }

  export type GrammarQuestionUpdateToOneWithWhereWithoutLikeGrammarQuestionInput = {
    where?: GrammarQuestionWhereInput
    data: XOR<GrammarQuestionUpdateWithoutLikeGrammarQuestionInput, GrammarQuestionUncheckedUpdateWithoutLikeGrammarQuestionInput>
  }

  export type GrammarQuestionUpdateWithoutLikeGrammarQuestionInput = {
    title?: StringFieldUpdateOperationsInput | string
    sentence?: StringFieldUpdateOperationsInput | string
    question?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
    Grammar?: GrammarUpdateOneRequiredWithoutGrammarQuestionNestedInput
  }

  export type GrammarQuestionUncheckedUpdateWithoutLikeGrammarQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    sentence?: StringFieldUpdateOperationsInput | string
    question?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
    grammarId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutLikeListeningInput = {
    id?: string
    userName: string
    gender: $Enums.Gender
    country: string
    city: string
    email: string
    birthYear: string
    activated?: boolean
    invited?: boolean
    invitedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    StripeCustomer?: StripeCustomerCreateNestedManyWithoutUserInput
    OneTimePassword?: OneTimePasswordCreateNestedManyWithoutUserInput
    LikeGrammarQuestion?: LikeGrammarQuestionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikeListeningInput = {
    id?: string
    userName: string
    gender: $Enums.Gender
    country: string
    city: string
    email: string
    birthYear: string
    activated?: boolean
    invited?: boolean
    invitedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    StripeCustomer?: StripeCustomerUncheckedCreateNestedManyWithoutUserInput
    OneTimePassword?: OneTimePasswordUncheckedCreateNestedManyWithoutUserInput
    LikeGrammarQuestion?: LikeGrammarQuestionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikeListeningInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikeListeningInput, UserUncheckedCreateWithoutLikeListeningInput>
  }

  export type ListeningCreateWithoutLikeListeningInput = {
    title: string
    url: string
    lap: number
    localId: number
  }

  export type ListeningUncheckedCreateWithoutLikeListeningInput = {
    id?: number
    title: string
    url: string
    lap: number
    localId: number
  }

  export type ListeningCreateOrConnectWithoutLikeListeningInput = {
    where: ListeningWhereUniqueInput
    create: XOR<ListeningCreateWithoutLikeListeningInput, ListeningUncheckedCreateWithoutLikeListeningInput>
  }

  export type UserUpsertWithoutLikeListeningInput = {
    update: XOR<UserUpdateWithoutLikeListeningInput, UserUncheckedUpdateWithoutLikeListeningInput>
    create: XOR<UserCreateWithoutLikeListeningInput, UserUncheckedCreateWithoutLikeListeningInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLikeListeningInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLikeListeningInput, UserUncheckedUpdateWithoutLikeListeningInput>
  }

  export type UserUpdateWithoutLikeListeningInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birthYear?: StringFieldUpdateOperationsInput | string
    activated?: BoolFieldUpdateOperationsInput | boolean
    invited?: BoolFieldUpdateOperationsInput | boolean
    invitedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    StripeCustomer?: StripeCustomerUpdateManyWithoutUserNestedInput
    OneTimePassword?: OneTimePasswordUpdateManyWithoutUserNestedInput
    LikeGrammarQuestion?: LikeGrammarQuestionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLikeListeningInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birthYear?: StringFieldUpdateOperationsInput | string
    activated?: BoolFieldUpdateOperationsInput | boolean
    invited?: BoolFieldUpdateOperationsInput | boolean
    invitedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    StripeCustomer?: StripeCustomerUncheckedUpdateManyWithoutUserNestedInput
    OneTimePassword?: OneTimePasswordUncheckedUpdateManyWithoutUserNestedInput
    LikeGrammarQuestion?: LikeGrammarQuestionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ListeningUpsertWithoutLikeListeningInput = {
    update: XOR<ListeningUpdateWithoutLikeListeningInput, ListeningUncheckedUpdateWithoutLikeListeningInput>
    create: XOR<ListeningCreateWithoutLikeListeningInput, ListeningUncheckedCreateWithoutLikeListeningInput>
    where?: ListeningWhereInput
  }

  export type ListeningUpdateToOneWithWhereWithoutLikeListeningInput = {
    where?: ListeningWhereInput
    data: XOR<ListeningUpdateWithoutLikeListeningInput, ListeningUncheckedUpdateWithoutLikeListeningInput>
  }

  export type ListeningUpdateWithoutLikeListeningInput = {
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    lap?: IntFieldUpdateOperationsInput | number
    localId?: IntFieldUpdateOperationsInput | number
  }

  export type ListeningUncheckedUpdateWithoutLikeListeningInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    lap?: IntFieldUpdateOperationsInput | number
    localId?: IntFieldUpdateOperationsInput | number
  }

  export type LikeListeningCreateWithoutListeningInput = {
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutLikeListeningInput
  }

  export type LikeListeningUncheckedCreateWithoutListeningInput = {
    id?: number
    userId: string
    createdAt?: Date | string
  }

  export type LikeListeningCreateOrConnectWithoutListeningInput = {
    where: LikeListeningWhereUniqueInput
    create: XOR<LikeListeningCreateWithoutListeningInput, LikeListeningUncheckedCreateWithoutListeningInput>
  }

  export type LikeListeningCreateManyListeningInputEnvelope = {
    data: LikeListeningCreateManyListeningInput | LikeListeningCreateManyListeningInput[]
    skipDuplicates?: boolean
  }

  export type LikeListeningUpsertWithWhereUniqueWithoutListeningInput = {
    where: LikeListeningWhereUniqueInput
    update: XOR<LikeListeningUpdateWithoutListeningInput, LikeListeningUncheckedUpdateWithoutListeningInput>
    create: XOR<LikeListeningCreateWithoutListeningInput, LikeListeningUncheckedCreateWithoutListeningInput>
  }

  export type LikeListeningUpdateWithWhereUniqueWithoutListeningInput = {
    where: LikeListeningWhereUniqueInput
    data: XOR<LikeListeningUpdateWithoutListeningInput, LikeListeningUncheckedUpdateWithoutListeningInput>
  }

  export type LikeListeningUpdateManyWithWhereWithoutListeningInput = {
    where: LikeListeningScalarWhereInput
    data: XOR<LikeListeningUpdateManyMutationInput, LikeListeningUncheckedUpdateManyWithoutListeningInput>
  }

  export type LikeListeningScalarWhereInput = {
    AND?: LikeListeningScalarWhereInput | LikeListeningScalarWhereInput[]
    OR?: LikeListeningScalarWhereInput[]
    NOT?: LikeListeningScalarWhereInput | LikeListeningScalarWhereInput[]
    id?: IntFilter<"LikeListening"> | number
    userId?: StringFilter<"LikeListening"> | string
    listeningId?: IntFilter<"LikeListening"> | number
    createdAt?: DateTimeFilter<"LikeListening"> | Date | string
  }

  export type ProductReviewCreateWithoutProductInput = {
    text: string
    reviewer: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
    StripeCheckout?: StripeCheckoutCreateNestedOneWithoutProductReviewInput
  }

  export type ProductReviewUncheckedCreateWithoutProductInput = {
    id?: number
    text: string
    reviewer: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
    checkoutId?: number | null
  }

  export type ProductReviewCreateOrConnectWithoutProductInput = {
    where: ProductReviewWhereUniqueInput
    create: XOR<ProductReviewCreateWithoutProductInput, ProductReviewUncheckedCreateWithoutProductInput>
  }

  export type ProductReviewCreateManyProductInputEnvelope = {
    data: ProductReviewCreateManyProductInput | ProductReviewCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type StripeCheckoutCreateWithoutProductInput = {
    paymentId: string
    name: string
    email: string
    postCode: string
    address: string
    serialNumber: string
    status: $Enums.checkoutStatus
    manager?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    StripeCustomer?: StripeCustomerCreateNestedOneWithoutStripeCheckoutInput
    ProductReview?: ProductReviewCreateNestedManyWithoutStripeCheckoutInput
  }

  export type StripeCheckoutUncheckedCreateWithoutProductInput = {
    id?: number
    customerId?: string | null
    paymentId: string
    name: string
    email: string
    postCode: string
    address: string
    serialNumber: string
    status: $Enums.checkoutStatus
    manager?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ProductReview?: ProductReviewUncheckedCreateNestedManyWithoutStripeCheckoutInput
  }

  export type StripeCheckoutCreateOrConnectWithoutProductInput = {
    where: StripeCheckoutWhereUniqueInput
    create: XOR<StripeCheckoutCreateWithoutProductInput, StripeCheckoutUncheckedCreateWithoutProductInput>
  }

  export type StripeCheckoutCreateManyProductInputEnvelope = {
    data: StripeCheckoutCreateManyProductInput | StripeCheckoutCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ProductReviewUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductReviewWhereUniqueInput
    update: XOR<ProductReviewUpdateWithoutProductInput, ProductReviewUncheckedUpdateWithoutProductInput>
    create: XOR<ProductReviewCreateWithoutProductInput, ProductReviewUncheckedCreateWithoutProductInput>
  }

  export type ProductReviewUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductReviewWhereUniqueInput
    data: XOR<ProductReviewUpdateWithoutProductInput, ProductReviewUncheckedUpdateWithoutProductInput>
  }

  export type ProductReviewUpdateManyWithWhereWithoutProductInput = {
    where: ProductReviewScalarWhereInput
    data: XOR<ProductReviewUpdateManyMutationInput, ProductReviewUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductReviewScalarWhereInput = {
    AND?: ProductReviewScalarWhereInput | ProductReviewScalarWhereInput[]
    OR?: ProductReviewScalarWhereInput[]
    NOT?: ProductReviewScalarWhereInput | ProductReviewScalarWhereInput[]
    id?: IntFilter<"ProductReview"> | number
    text?: StringFilter<"ProductReview"> | string
    reviewer?: StringFilter<"ProductReview"> | string
    rating?: IntFilter<"ProductReview"> | number
    createdAt?: DateTimeFilter<"ProductReview"> | Date | string
    updatedAt?: DateTimeFilter<"ProductReview"> | Date | string
    productId?: IntFilter<"ProductReview"> | number
    checkoutId?: IntNullableFilter<"ProductReview"> | number | null
  }

  export type StripeCheckoutUpsertWithWhereUniqueWithoutProductInput = {
    where: StripeCheckoutWhereUniqueInput
    update: XOR<StripeCheckoutUpdateWithoutProductInput, StripeCheckoutUncheckedUpdateWithoutProductInput>
    create: XOR<StripeCheckoutCreateWithoutProductInput, StripeCheckoutUncheckedCreateWithoutProductInput>
  }

  export type StripeCheckoutUpdateWithWhereUniqueWithoutProductInput = {
    where: StripeCheckoutWhereUniqueInput
    data: XOR<StripeCheckoutUpdateWithoutProductInput, StripeCheckoutUncheckedUpdateWithoutProductInput>
  }

  export type StripeCheckoutUpdateManyWithWhereWithoutProductInput = {
    where: StripeCheckoutScalarWhereInput
    data: XOR<StripeCheckoutUpdateManyMutationInput, StripeCheckoutUncheckedUpdateManyWithoutProductInput>
  }

  export type StripeCheckoutScalarWhereInput = {
    AND?: StripeCheckoutScalarWhereInput | StripeCheckoutScalarWhereInput[]
    OR?: StripeCheckoutScalarWhereInput[]
    NOT?: StripeCheckoutScalarWhereInput | StripeCheckoutScalarWhereInput[]
    id?: IntFilter<"StripeCheckout"> | number
    customerId?: StringNullableFilter<"StripeCheckout"> | string | null
    productId?: IntFilter<"StripeCheckout"> | number
    paymentId?: StringFilter<"StripeCheckout"> | string
    name?: StringFilter<"StripeCheckout"> | string
    email?: StringFilter<"StripeCheckout"> | string
    postCode?: StringFilter<"StripeCheckout"> | string
    address?: StringFilter<"StripeCheckout"> | string
    serialNumber?: StringFilter<"StripeCheckout"> | string
    status?: EnumcheckoutStatusFilter<"StripeCheckout"> | $Enums.checkoutStatus
    manager?: StringNullableFilter<"StripeCheckout"> | string | null
    createdAt?: DateTimeFilter<"StripeCheckout"> | Date | string
    updatedAt?: DateTimeFilter<"StripeCheckout"> | Date | string
  }

  export type ProductCreateWithoutProductReviewInput = {
    name: string
    price: number
    checkoutType: $Enums.checkoutType
    image?: NullableJsonNullValueInput | InputJsonValue
    priceId: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    StripeCheckout?: StripeCheckoutCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutProductReviewInput = {
    id?: number
    name: string
    price: number
    checkoutType: $Enums.checkoutType
    image?: NullableJsonNullValueInput | InputJsonValue
    priceId: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    StripeCheckout?: StripeCheckoutUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutProductReviewInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProductReviewInput, ProductUncheckedCreateWithoutProductReviewInput>
  }

  export type StripeCheckoutCreateWithoutProductReviewInput = {
    paymentId: string
    name: string
    email: string
    postCode: string
    address: string
    serialNumber: string
    status: $Enums.checkoutStatus
    manager?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    StripeCustomer?: StripeCustomerCreateNestedOneWithoutStripeCheckoutInput
    Product: ProductCreateNestedOneWithoutStripeCheckoutInput
  }

  export type StripeCheckoutUncheckedCreateWithoutProductReviewInput = {
    id?: number
    customerId?: string | null
    productId: number
    paymentId: string
    name: string
    email: string
    postCode: string
    address: string
    serialNumber: string
    status: $Enums.checkoutStatus
    manager?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StripeCheckoutCreateOrConnectWithoutProductReviewInput = {
    where: StripeCheckoutWhereUniqueInput
    create: XOR<StripeCheckoutCreateWithoutProductReviewInput, StripeCheckoutUncheckedCreateWithoutProductReviewInput>
  }

  export type ProductUpsertWithoutProductReviewInput = {
    update: XOR<ProductUpdateWithoutProductReviewInput, ProductUncheckedUpdateWithoutProductReviewInput>
    create: XOR<ProductCreateWithoutProductReviewInput, ProductUncheckedCreateWithoutProductReviewInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutProductReviewInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutProductReviewInput, ProductUncheckedUpdateWithoutProductReviewInput>
  }

  export type ProductUpdateWithoutProductReviewInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    checkoutType?: EnumcheckoutTypeFieldUpdateOperationsInput | $Enums.checkoutType
    image?: NullableJsonNullValueInput | InputJsonValue
    priceId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    StripeCheckout?: StripeCheckoutUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutProductReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    checkoutType?: EnumcheckoutTypeFieldUpdateOperationsInput | $Enums.checkoutType
    image?: NullableJsonNullValueInput | InputJsonValue
    priceId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    StripeCheckout?: StripeCheckoutUncheckedUpdateManyWithoutProductNestedInput
  }

  export type StripeCheckoutUpsertWithoutProductReviewInput = {
    update: XOR<StripeCheckoutUpdateWithoutProductReviewInput, StripeCheckoutUncheckedUpdateWithoutProductReviewInput>
    create: XOR<StripeCheckoutCreateWithoutProductReviewInput, StripeCheckoutUncheckedCreateWithoutProductReviewInput>
    where?: StripeCheckoutWhereInput
  }

  export type StripeCheckoutUpdateToOneWithWhereWithoutProductReviewInput = {
    where?: StripeCheckoutWhereInput
    data: XOR<StripeCheckoutUpdateWithoutProductReviewInput, StripeCheckoutUncheckedUpdateWithoutProductReviewInput>
  }

  export type StripeCheckoutUpdateWithoutProductReviewInput = {
    paymentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumcheckoutStatusFieldUpdateOperationsInput | $Enums.checkoutStatus
    manager?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    StripeCustomer?: StripeCustomerUpdateOneWithoutStripeCheckoutNestedInput
    Product?: ProductUpdateOneRequiredWithoutStripeCheckoutNestedInput
  }

  export type StripeCheckoutUncheckedUpdateWithoutProductReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: IntFieldUpdateOperationsInput | number
    paymentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumcheckoutStatusFieldUpdateOperationsInput | $Enums.checkoutStatus
    manager?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutOneTimePasswordInput = {
    id?: string
    userName: string
    gender: $Enums.Gender
    country: string
    city: string
    email: string
    birthYear: string
    activated?: boolean
    invited?: boolean
    invitedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    StripeCustomer?: StripeCustomerCreateNestedManyWithoutUserInput
    LikeGrammarQuestion?: LikeGrammarQuestionCreateNestedManyWithoutUserInput
    LikeListening?: LikeListeningCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOneTimePasswordInput = {
    id?: string
    userName: string
    gender: $Enums.Gender
    country: string
    city: string
    email: string
    birthYear: string
    activated?: boolean
    invited?: boolean
    invitedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    StripeCustomer?: StripeCustomerUncheckedCreateNestedManyWithoutUserInput
    LikeGrammarQuestion?: LikeGrammarQuestionUncheckedCreateNestedManyWithoutUserInput
    LikeListening?: LikeListeningUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOneTimePasswordInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOneTimePasswordInput, UserUncheckedCreateWithoutOneTimePasswordInput>
  }

  export type AdminUserCreateWithoutOneTimePasswordInput = {
    id?: string
    role: $Enums.AdminRole
    adminName: string
    adminEmail: string
    password: string
  }

  export type AdminUserUncheckedCreateWithoutOneTimePasswordInput = {
    id?: string
    role: $Enums.AdminRole
    adminName: string
    adminEmail: string
    password: string
  }

  export type AdminUserCreateOrConnectWithoutOneTimePasswordInput = {
    where: AdminUserWhereUniqueInput
    create: XOR<AdminUserCreateWithoutOneTimePasswordInput, AdminUserUncheckedCreateWithoutOneTimePasswordInput>
  }

  export type UserUpsertWithoutOneTimePasswordInput = {
    update: XOR<UserUpdateWithoutOneTimePasswordInput, UserUncheckedUpdateWithoutOneTimePasswordInput>
    create: XOR<UserCreateWithoutOneTimePasswordInput, UserUncheckedCreateWithoutOneTimePasswordInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOneTimePasswordInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOneTimePasswordInput, UserUncheckedUpdateWithoutOneTimePasswordInput>
  }

  export type UserUpdateWithoutOneTimePasswordInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birthYear?: StringFieldUpdateOperationsInput | string
    activated?: BoolFieldUpdateOperationsInput | boolean
    invited?: BoolFieldUpdateOperationsInput | boolean
    invitedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    StripeCustomer?: StripeCustomerUpdateManyWithoutUserNestedInput
    LikeGrammarQuestion?: LikeGrammarQuestionUpdateManyWithoutUserNestedInput
    LikeListening?: LikeListeningUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOneTimePasswordInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birthYear?: StringFieldUpdateOperationsInput | string
    activated?: BoolFieldUpdateOperationsInput | boolean
    invited?: BoolFieldUpdateOperationsInput | boolean
    invitedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    StripeCustomer?: StripeCustomerUncheckedUpdateManyWithoutUserNestedInput
    LikeGrammarQuestion?: LikeGrammarQuestionUncheckedUpdateManyWithoutUserNestedInput
    LikeListening?: LikeListeningUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AdminUserUpsertWithoutOneTimePasswordInput = {
    update: XOR<AdminUserUpdateWithoutOneTimePasswordInput, AdminUserUncheckedUpdateWithoutOneTimePasswordInput>
    create: XOR<AdminUserCreateWithoutOneTimePasswordInput, AdminUserUncheckedCreateWithoutOneTimePasswordInput>
    where?: AdminUserWhereInput
  }

  export type AdminUserUpdateToOneWithWhereWithoutOneTimePasswordInput = {
    where?: AdminUserWhereInput
    data: XOR<AdminUserUpdateWithoutOneTimePasswordInput, AdminUserUncheckedUpdateWithoutOneTimePasswordInput>
  }

  export type AdminUserUpdateWithoutOneTimePasswordInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUserUncheckedUpdateWithoutOneTimePasswordInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type StripeCustomerCreateWithoutStripeCheckoutInput = {
    customerId: string
    User: UserCreateNestedOneWithoutStripeCustomerInput
    StripeSubscription?: StripeSubscriptionCreateNestedManyWithoutStripeCustomerInput
  }

  export type StripeCustomerUncheckedCreateWithoutStripeCheckoutInput = {
    id?: number
    customerId: string
    userId: string
    StripeSubscription?: StripeSubscriptionUncheckedCreateNestedManyWithoutStripeCustomerInput
  }

  export type StripeCustomerCreateOrConnectWithoutStripeCheckoutInput = {
    where: StripeCustomerWhereUniqueInput
    create: XOR<StripeCustomerCreateWithoutStripeCheckoutInput, StripeCustomerUncheckedCreateWithoutStripeCheckoutInput>
  }

  export type ProductCreateWithoutStripeCheckoutInput = {
    name: string
    price: number
    checkoutType: $Enums.checkoutType
    image?: NullableJsonNullValueInput | InputJsonValue
    priceId: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ProductReview?: ProductReviewCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutStripeCheckoutInput = {
    id?: number
    name: string
    price: number
    checkoutType: $Enums.checkoutType
    image?: NullableJsonNullValueInput | InputJsonValue
    priceId: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ProductReview?: ProductReviewUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutStripeCheckoutInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutStripeCheckoutInput, ProductUncheckedCreateWithoutStripeCheckoutInput>
  }

  export type ProductReviewCreateWithoutStripeCheckoutInput = {
    text: string
    reviewer: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Product: ProductCreateNestedOneWithoutProductReviewInput
  }

  export type ProductReviewUncheckedCreateWithoutStripeCheckoutInput = {
    id?: number
    text: string
    reviewer: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
    productId: number
  }

  export type ProductReviewCreateOrConnectWithoutStripeCheckoutInput = {
    where: ProductReviewWhereUniqueInput
    create: XOR<ProductReviewCreateWithoutStripeCheckoutInput, ProductReviewUncheckedCreateWithoutStripeCheckoutInput>
  }

  export type ProductReviewCreateManyStripeCheckoutInputEnvelope = {
    data: ProductReviewCreateManyStripeCheckoutInput | ProductReviewCreateManyStripeCheckoutInput[]
    skipDuplicates?: boolean
  }

  export type StripeCustomerUpsertWithoutStripeCheckoutInput = {
    update: XOR<StripeCustomerUpdateWithoutStripeCheckoutInput, StripeCustomerUncheckedUpdateWithoutStripeCheckoutInput>
    create: XOR<StripeCustomerCreateWithoutStripeCheckoutInput, StripeCustomerUncheckedCreateWithoutStripeCheckoutInput>
    where?: StripeCustomerWhereInput
  }

  export type StripeCustomerUpdateToOneWithWhereWithoutStripeCheckoutInput = {
    where?: StripeCustomerWhereInput
    data: XOR<StripeCustomerUpdateWithoutStripeCheckoutInput, StripeCustomerUncheckedUpdateWithoutStripeCheckoutInput>
  }

  export type StripeCustomerUpdateWithoutStripeCheckoutInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutStripeCustomerNestedInput
    StripeSubscription?: StripeSubscriptionUpdateManyWithoutStripeCustomerNestedInput
  }

  export type StripeCustomerUncheckedUpdateWithoutStripeCheckoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    StripeSubscription?: StripeSubscriptionUncheckedUpdateManyWithoutStripeCustomerNestedInput
  }

  export type ProductUpsertWithoutStripeCheckoutInput = {
    update: XOR<ProductUpdateWithoutStripeCheckoutInput, ProductUncheckedUpdateWithoutStripeCheckoutInput>
    create: XOR<ProductCreateWithoutStripeCheckoutInput, ProductUncheckedCreateWithoutStripeCheckoutInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutStripeCheckoutInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutStripeCheckoutInput, ProductUncheckedUpdateWithoutStripeCheckoutInput>
  }

  export type ProductUpdateWithoutStripeCheckoutInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    checkoutType?: EnumcheckoutTypeFieldUpdateOperationsInput | $Enums.checkoutType
    image?: NullableJsonNullValueInput | InputJsonValue
    priceId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ProductReview?: ProductReviewUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutStripeCheckoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    checkoutType?: EnumcheckoutTypeFieldUpdateOperationsInput | $Enums.checkoutType
    image?: NullableJsonNullValueInput | InputJsonValue
    priceId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ProductReview?: ProductReviewUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductReviewUpsertWithWhereUniqueWithoutStripeCheckoutInput = {
    where: ProductReviewWhereUniqueInput
    update: XOR<ProductReviewUpdateWithoutStripeCheckoutInput, ProductReviewUncheckedUpdateWithoutStripeCheckoutInput>
    create: XOR<ProductReviewCreateWithoutStripeCheckoutInput, ProductReviewUncheckedCreateWithoutStripeCheckoutInput>
  }

  export type ProductReviewUpdateWithWhereUniqueWithoutStripeCheckoutInput = {
    where: ProductReviewWhereUniqueInput
    data: XOR<ProductReviewUpdateWithoutStripeCheckoutInput, ProductReviewUncheckedUpdateWithoutStripeCheckoutInput>
  }

  export type ProductReviewUpdateManyWithWhereWithoutStripeCheckoutInput = {
    where: ProductReviewScalarWhereInput
    data: XOR<ProductReviewUpdateManyMutationInput, ProductReviewUncheckedUpdateManyWithoutStripeCheckoutInput>
  }

  export type UserCreateWithoutStripeCustomerInput = {
    id?: string
    userName: string
    gender: $Enums.Gender
    country: string
    city: string
    email: string
    birthYear: string
    activated?: boolean
    invited?: boolean
    invitedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    OneTimePassword?: OneTimePasswordCreateNestedManyWithoutUserInput
    LikeGrammarQuestion?: LikeGrammarQuestionCreateNestedManyWithoutUserInput
    LikeListening?: LikeListeningCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStripeCustomerInput = {
    id?: string
    userName: string
    gender: $Enums.Gender
    country: string
    city: string
    email: string
    birthYear: string
    activated?: boolean
    invited?: boolean
    invitedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    OneTimePassword?: OneTimePasswordUncheckedCreateNestedManyWithoutUserInput
    LikeGrammarQuestion?: LikeGrammarQuestionUncheckedCreateNestedManyWithoutUserInput
    LikeListening?: LikeListeningUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStripeCustomerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStripeCustomerInput, UserUncheckedCreateWithoutStripeCustomerInput>
  }

  export type StripeCheckoutCreateWithoutStripeCustomerInput = {
    paymentId: string
    name: string
    email: string
    postCode: string
    address: string
    serialNumber: string
    status: $Enums.checkoutStatus
    manager?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Product: ProductCreateNestedOneWithoutStripeCheckoutInput
    ProductReview?: ProductReviewCreateNestedManyWithoutStripeCheckoutInput
  }

  export type StripeCheckoutUncheckedCreateWithoutStripeCustomerInput = {
    id?: number
    productId: number
    paymentId: string
    name: string
    email: string
    postCode: string
    address: string
    serialNumber: string
    status: $Enums.checkoutStatus
    manager?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ProductReview?: ProductReviewUncheckedCreateNestedManyWithoutStripeCheckoutInput
  }

  export type StripeCheckoutCreateOrConnectWithoutStripeCustomerInput = {
    where: StripeCheckoutWhereUniqueInput
    create: XOR<StripeCheckoutCreateWithoutStripeCustomerInput, StripeCheckoutUncheckedCreateWithoutStripeCustomerInput>
  }

  export type StripeCheckoutCreateManyStripeCustomerInputEnvelope = {
    data: StripeCheckoutCreateManyStripeCustomerInput | StripeCheckoutCreateManyStripeCustomerInput[]
    skipDuplicates?: boolean
  }

  export type StripeSubscriptionCreateWithoutStripeCustomerInput = {
    subscriptionId: string
    plan: string
    status: $Enums.subscriptionStatus
    periodStart: string
    periodEnd: string
    cancelAt?: string | null
    cancelAtPeriodEnd?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StripeSubscriptionUncheckedCreateWithoutStripeCustomerInput = {
    id?: number
    subscriptionId: string
    plan: string
    status: $Enums.subscriptionStatus
    periodStart: string
    periodEnd: string
    cancelAt?: string | null
    cancelAtPeriodEnd?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StripeSubscriptionCreateOrConnectWithoutStripeCustomerInput = {
    where: StripeSubscriptionWhereUniqueInput
    create: XOR<StripeSubscriptionCreateWithoutStripeCustomerInput, StripeSubscriptionUncheckedCreateWithoutStripeCustomerInput>
  }

  export type StripeSubscriptionCreateManyStripeCustomerInputEnvelope = {
    data: StripeSubscriptionCreateManyStripeCustomerInput | StripeSubscriptionCreateManyStripeCustomerInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutStripeCustomerInput = {
    update: XOR<UserUpdateWithoutStripeCustomerInput, UserUncheckedUpdateWithoutStripeCustomerInput>
    create: XOR<UserCreateWithoutStripeCustomerInput, UserUncheckedCreateWithoutStripeCustomerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStripeCustomerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStripeCustomerInput, UserUncheckedUpdateWithoutStripeCustomerInput>
  }

  export type UserUpdateWithoutStripeCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birthYear?: StringFieldUpdateOperationsInput | string
    activated?: BoolFieldUpdateOperationsInput | boolean
    invited?: BoolFieldUpdateOperationsInput | boolean
    invitedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    OneTimePassword?: OneTimePasswordUpdateManyWithoutUserNestedInput
    LikeGrammarQuestion?: LikeGrammarQuestionUpdateManyWithoutUserNestedInput
    LikeListening?: LikeListeningUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStripeCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birthYear?: StringFieldUpdateOperationsInput | string
    activated?: BoolFieldUpdateOperationsInput | boolean
    invited?: BoolFieldUpdateOperationsInput | boolean
    invitedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    OneTimePassword?: OneTimePasswordUncheckedUpdateManyWithoutUserNestedInput
    LikeGrammarQuestion?: LikeGrammarQuestionUncheckedUpdateManyWithoutUserNestedInput
    LikeListening?: LikeListeningUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StripeCheckoutUpsertWithWhereUniqueWithoutStripeCustomerInput = {
    where: StripeCheckoutWhereUniqueInput
    update: XOR<StripeCheckoutUpdateWithoutStripeCustomerInput, StripeCheckoutUncheckedUpdateWithoutStripeCustomerInput>
    create: XOR<StripeCheckoutCreateWithoutStripeCustomerInput, StripeCheckoutUncheckedCreateWithoutStripeCustomerInput>
  }

  export type StripeCheckoutUpdateWithWhereUniqueWithoutStripeCustomerInput = {
    where: StripeCheckoutWhereUniqueInput
    data: XOR<StripeCheckoutUpdateWithoutStripeCustomerInput, StripeCheckoutUncheckedUpdateWithoutStripeCustomerInput>
  }

  export type StripeCheckoutUpdateManyWithWhereWithoutStripeCustomerInput = {
    where: StripeCheckoutScalarWhereInput
    data: XOR<StripeCheckoutUpdateManyMutationInput, StripeCheckoutUncheckedUpdateManyWithoutStripeCustomerInput>
  }

  export type StripeSubscriptionUpsertWithWhereUniqueWithoutStripeCustomerInput = {
    where: StripeSubscriptionWhereUniqueInput
    update: XOR<StripeSubscriptionUpdateWithoutStripeCustomerInput, StripeSubscriptionUncheckedUpdateWithoutStripeCustomerInput>
    create: XOR<StripeSubscriptionCreateWithoutStripeCustomerInput, StripeSubscriptionUncheckedCreateWithoutStripeCustomerInput>
  }

  export type StripeSubscriptionUpdateWithWhereUniqueWithoutStripeCustomerInput = {
    where: StripeSubscriptionWhereUniqueInput
    data: XOR<StripeSubscriptionUpdateWithoutStripeCustomerInput, StripeSubscriptionUncheckedUpdateWithoutStripeCustomerInput>
  }

  export type StripeSubscriptionUpdateManyWithWhereWithoutStripeCustomerInput = {
    where: StripeSubscriptionScalarWhereInput
    data: XOR<StripeSubscriptionUpdateManyMutationInput, StripeSubscriptionUncheckedUpdateManyWithoutStripeCustomerInput>
  }

  export type StripeSubscriptionScalarWhereInput = {
    AND?: StripeSubscriptionScalarWhereInput | StripeSubscriptionScalarWhereInput[]
    OR?: StripeSubscriptionScalarWhereInput[]
    NOT?: StripeSubscriptionScalarWhereInput | StripeSubscriptionScalarWhereInput[]
    id?: IntFilter<"StripeSubscription"> | number
    subscriptionId?: StringFilter<"StripeSubscription"> | string
    plan?: StringFilter<"StripeSubscription"> | string
    status?: EnumsubscriptionStatusFilter<"StripeSubscription"> | $Enums.subscriptionStatus
    periodStart?: StringFilter<"StripeSubscription"> | string
    periodEnd?: StringFilter<"StripeSubscription"> | string
    cancelAt?: StringNullableFilter<"StripeSubscription"> | string | null
    cancelAtPeriodEnd?: BoolFilter<"StripeSubscription"> | boolean
    stripeCustomerId?: IntFilter<"StripeSubscription"> | number
    createdAt?: DateTimeFilter<"StripeSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"StripeSubscription"> | Date | string
  }

  export type StripeCustomerCreateWithoutStripeSubscriptionInput = {
    customerId: string
    User: UserCreateNestedOneWithoutStripeCustomerInput
    StripeCheckout?: StripeCheckoutCreateNestedManyWithoutStripeCustomerInput
  }

  export type StripeCustomerUncheckedCreateWithoutStripeSubscriptionInput = {
    id?: number
    customerId: string
    userId: string
    StripeCheckout?: StripeCheckoutUncheckedCreateNestedManyWithoutStripeCustomerInput
  }

  export type StripeCustomerCreateOrConnectWithoutStripeSubscriptionInput = {
    where: StripeCustomerWhereUniqueInput
    create: XOR<StripeCustomerCreateWithoutStripeSubscriptionInput, StripeCustomerUncheckedCreateWithoutStripeSubscriptionInput>
  }

  export type StripeCustomerUpsertWithoutStripeSubscriptionInput = {
    update: XOR<StripeCustomerUpdateWithoutStripeSubscriptionInput, StripeCustomerUncheckedUpdateWithoutStripeSubscriptionInput>
    create: XOR<StripeCustomerCreateWithoutStripeSubscriptionInput, StripeCustomerUncheckedCreateWithoutStripeSubscriptionInput>
    where?: StripeCustomerWhereInput
  }

  export type StripeCustomerUpdateToOneWithWhereWithoutStripeSubscriptionInput = {
    where?: StripeCustomerWhereInput
    data: XOR<StripeCustomerUpdateWithoutStripeSubscriptionInput, StripeCustomerUncheckedUpdateWithoutStripeSubscriptionInput>
  }

  export type StripeCustomerUpdateWithoutStripeSubscriptionInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutStripeCustomerNestedInput
    StripeCheckout?: StripeCheckoutUpdateManyWithoutStripeCustomerNestedInput
  }

  export type StripeCustomerUncheckedUpdateWithoutStripeSubscriptionInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    StripeCheckout?: StripeCheckoutUncheckedUpdateManyWithoutStripeCustomerNestedInput
  }

  export type StripeCustomerCreateWithoutUserInput = {
    customerId: string
    StripeCheckout?: StripeCheckoutCreateNestedManyWithoutStripeCustomerInput
    StripeSubscription?: StripeSubscriptionCreateNestedManyWithoutStripeCustomerInput
  }

  export type StripeCustomerUncheckedCreateWithoutUserInput = {
    id?: number
    customerId: string
    StripeCheckout?: StripeCheckoutUncheckedCreateNestedManyWithoutStripeCustomerInput
    StripeSubscription?: StripeSubscriptionUncheckedCreateNestedManyWithoutStripeCustomerInput
  }

  export type StripeCustomerCreateOrConnectWithoutUserInput = {
    where: StripeCustomerWhereUniqueInput
    create: XOR<StripeCustomerCreateWithoutUserInput, StripeCustomerUncheckedCreateWithoutUserInput>
  }

  export type StripeCustomerCreateManyUserInputEnvelope = {
    data: StripeCustomerCreateManyUserInput | StripeCustomerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OneTimePasswordCreateWithoutUserInput = {
    usage: $Enums.OneTimeNumberUsage
    oneTimePassword: string
    validated?: boolean
    updatedAt?: Date | string
    AdminUser?: AdminUserCreateNestedOneWithoutOneTimePasswordInput
  }

  export type OneTimePasswordUncheckedCreateWithoutUserInput = {
    id?: number
    usage: $Enums.OneTimeNumberUsage
    oneTimePassword: string
    validated?: boolean
    updatedAt?: Date | string
    adminUserId?: string | null
  }

  export type OneTimePasswordCreateOrConnectWithoutUserInput = {
    where: OneTimePasswordWhereUniqueInput
    create: XOR<OneTimePasswordCreateWithoutUserInput, OneTimePasswordUncheckedCreateWithoutUserInput>
  }

  export type OneTimePasswordCreateManyUserInputEnvelope = {
    data: OneTimePasswordCreateManyUserInput | OneTimePasswordCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LikeGrammarQuestionCreateWithoutUserInput = {
    createdAt?: Date | string
    GrammarQuestion: GrammarQuestionCreateNestedOneWithoutLikeGrammarQuestionInput
  }

  export type LikeGrammarQuestionUncheckedCreateWithoutUserInput = {
    id?: number
    grammarQuestionId: number
    createdAt?: Date | string
  }

  export type LikeGrammarQuestionCreateOrConnectWithoutUserInput = {
    where: LikeGrammarQuestionWhereUniqueInput
    create: XOR<LikeGrammarQuestionCreateWithoutUserInput, LikeGrammarQuestionUncheckedCreateWithoutUserInput>
  }

  export type LikeGrammarQuestionCreateManyUserInputEnvelope = {
    data: LikeGrammarQuestionCreateManyUserInput | LikeGrammarQuestionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LikeListeningCreateWithoutUserInput = {
    createdAt?: Date | string
    Listening: ListeningCreateNestedOneWithoutLikeListeningInput
  }

  export type LikeListeningUncheckedCreateWithoutUserInput = {
    id?: number
    listeningId: number
    createdAt?: Date | string
  }

  export type LikeListeningCreateOrConnectWithoutUserInput = {
    where: LikeListeningWhereUniqueInput
    create: XOR<LikeListeningCreateWithoutUserInput, LikeListeningUncheckedCreateWithoutUserInput>
  }

  export type LikeListeningCreateManyUserInputEnvelope = {
    data: LikeListeningCreateManyUserInput | LikeListeningCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StripeCustomerUpsertWithWhereUniqueWithoutUserInput = {
    where: StripeCustomerWhereUniqueInput
    update: XOR<StripeCustomerUpdateWithoutUserInput, StripeCustomerUncheckedUpdateWithoutUserInput>
    create: XOR<StripeCustomerCreateWithoutUserInput, StripeCustomerUncheckedCreateWithoutUserInput>
  }

  export type StripeCustomerUpdateWithWhereUniqueWithoutUserInput = {
    where: StripeCustomerWhereUniqueInput
    data: XOR<StripeCustomerUpdateWithoutUserInput, StripeCustomerUncheckedUpdateWithoutUserInput>
  }

  export type StripeCustomerUpdateManyWithWhereWithoutUserInput = {
    where: StripeCustomerScalarWhereInput
    data: XOR<StripeCustomerUpdateManyMutationInput, StripeCustomerUncheckedUpdateManyWithoutUserInput>
  }

  export type StripeCustomerScalarWhereInput = {
    AND?: StripeCustomerScalarWhereInput | StripeCustomerScalarWhereInput[]
    OR?: StripeCustomerScalarWhereInput[]
    NOT?: StripeCustomerScalarWhereInput | StripeCustomerScalarWhereInput[]
    id?: IntFilter<"StripeCustomer"> | number
    customerId?: StringFilter<"StripeCustomer"> | string
    userId?: StringFilter<"StripeCustomer"> | string
  }

  export type OneTimePasswordUpsertWithWhereUniqueWithoutUserInput = {
    where: OneTimePasswordWhereUniqueInput
    update: XOR<OneTimePasswordUpdateWithoutUserInput, OneTimePasswordUncheckedUpdateWithoutUserInput>
    create: XOR<OneTimePasswordCreateWithoutUserInput, OneTimePasswordUncheckedCreateWithoutUserInput>
  }

  export type OneTimePasswordUpdateWithWhereUniqueWithoutUserInput = {
    where: OneTimePasswordWhereUniqueInput
    data: XOR<OneTimePasswordUpdateWithoutUserInput, OneTimePasswordUncheckedUpdateWithoutUserInput>
  }

  export type OneTimePasswordUpdateManyWithWhereWithoutUserInput = {
    where: OneTimePasswordScalarWhereInput
    data: XOR<OneTimePasswordUpdateManyMutationInput, OneTimePasswordUncheckedUpdateManyWithoutUserInput>
  }

  export type LikeGrammarQuestionUpsertWithWhereUniqueWithoutUserInput = {
    where: LikeGrammarQuestionWhereUniqueInput
    update: XOR<LikeGrammarQuestionUpdateWithoutUserInput, LikeGrammarQuestionUncheckedUpdateWithoutUserInput>
    create: XOR<LikeGrammarQuestionCreateWithoutUserInput, LikeGrammarQuestionUncheckedCreateWithoutUserInput>
  }

  export type LikeGrammarQuestionUpdateWithWhereUniqueWithoutUserInput = {
    where: LikeGrammarQuestionWhereUniqueInput
    data: XOR<LikeGrammarQuestionUpdateWithoutUserInput, LikeGrammarQuestionUncheckedUpdateWithoutUserInput>
  }

  export type LikeGrammarQuestionUpdateManyWithWhereWithoutUserInput = {
    where: LikeGrammarQuestionScalarWhereInput
    data: XOR<LikeGrammarQuestionUpdateManyMutationInput, LikeGrammarQuestionUncheckedUpdateManyWithoutUserInput>
  }

  export type LikeListeningUpsertWithWhereUniqueWithoutUserInput = {
    where: LikeListeningWhereUniqueInput
    update: XOR<LikeListeningUpdateWithoutUserInput, LikeListeningUncheckedUpdateWithoutUserInput>
    create: XOR<LikeListeningCreateWithoutUserInput, LikeListeningUncheckedCreateWithoutUserInput>
  }

  export type LikeListeningUpdateWithWhereUniqueWithoutUserInput = {
    where: LikeListeningWhereUniqueInput
    data: XOR<LikeListeningUpdateWithoutUserInput, LikeListeningUncheckedUpdateWithoutUserInput>
  }

  export type LikeListeningUpdateManyWithWhereWithoutUserInput = {
    where: LikeListeningScalarWhereInput
    data: XOR<LikeListeningUpdateManyMutationInput, LikeListeningUncheckedUpdateManyWithoutUserInput>
  }

  export type PassageQuestionCreateWithoutPassageInput = {
    question1?: NullableJsonNullValueInput | InputJsonValue
    question2?: NullableJsonNullValueInput | InputJsonValue
    question3?: NullableJsonNullValueInput | InputJsonValue
    question4?: NullableJsonNullValueInput | InputJsonValue
    question5?: NullableJsonNullValueInput | InputJsonValue
    question6?: NullableJsonNullValueInput | InputJsonValue
    question7?: NullableJsonNullValueInput | InputJsonValue
    question8?: NullableJsonNullValueInput | InputJsonValue
    question9?: NullableJsonNullValueInput | InputJsonValue
    question10?: NullableJsonNullValueInput | InputJsonValue
    question11?: NullableJsonNullValueInput | InputJsonValue
    question12?: NullableJsonNullValueInput | InputJsonValue
    question13?: NullableJsonNullValueInput | InputJsonValue
    question14?: NullableJsonNullValueInput | InputJsonValue
    question15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassageQuestionUncheckedCreateWithoutPassageInput = {
    id?: number
    question1?: NullableJsonNullValueInput | InputJsonValue
    question2?: NullableJsonNullValueInput | InputJsonValue
    question3?: NullableJsonNullValueInput | InputJsonValue
    question4?: NullableJsonNullValueInput | InputJsonValue
    question5?: NullableJsonNullValueInput | InputJsonValue
    question6?: NullableJsonNullValueInput | InputJsonValue
    question7?: NullableJsonNullValueInput | InputJsonValue
    question8?: NullableJsonNullValueInput | InputJsonValue
    question9?: NullableJsonNullValueInput | InputJsonValue
    question10?: NullableJsonNullValueInput | InputJsonValue
    question11?: NullableJsonNullValueInput | InputJsonValue
    question12?: NullableJsonNullValueInput | InputJsonValue
    question13?: NullableJsonNullValueInput | InputJsonValue
    question14?: NullableJsonNullValueInput | InputJsonValue
    question15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassageQuestionCreateOrConnectWithoutPassageInput = {
    where: PassageQuestionWhereUniqueInput
    create: XOR<PassageQuestionCreateWithoutPassageInput, PassageQuestionUncheckedCreateWithoutPassageInput>
  }

  export type PassageQuestionCreateManyPassageInputEnvelope = {
    data: PassageQuestionCreateManyPassageInput | PassageQuestionCreateManyPassageInput[]
    skipDuplicates?: boolean
  }

  export type PassageSentenceCreateWithoutPassageInput = {
    sentence1?: NullableJsonNullValueInput | InputJsonValue
    sentence2?: NullableJsonNullValueInput | InputJsonValue
    sentence3?: NullableJsonNullValueInput | InputJsonValue
    sentence4?: NullableJsonNullValueInput | InputJsonValue
    sentence5?: NullableJsonNullValueInput | InputJsonValue
    sentence6?: NullableJsonNullValueInput | InputJsonValue
    sentence7?: NullableJsonNullValueInput | InputJsonValue
    sentence8?: NullableJsonNullValueInput | InputJsonValue
    sentence9?: NullableJsonNullValueInput | InputJsonValue
    sentence10?: NullableJsonNullValueInput | InputJsonValue
    sentence11?: NullableJsonNullValueInput | InputJsonValue
    sentence12?: NullableJsonNullValueInput | InputJsonValue
    sentence13?: NullableJsonNullValueInput | InputJsonValue
    sentence14?: NullableJsonNullValueInput | InputJsonValue
    sentence15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassageSentenceUncheckedCreateWithoutPassageInput = {
    id?: number
    sentence1?: NullableJsonNullValueInput | InputJsonValue
    sentence2?: NullableJsonNullValueInput | InputJsonValue
    sentence3?: NullableJsonNullValueInput | InputJsonValue
    sentence4?: NullableJsonNullValueInput | InputJsonValue
    sentence5?: NullableJsonNullValueInput | InputJsonValue
    sentence6?: NullableJsonNullValueInput | InputJsonValue
    sentence7?: NullableJsonNullValueInput | InputJsonValue
    sentence8?: NullableJsonNullValueInput | InputJsonValue
    sentence9?: NullableJsonNullValueInput | InputJsonValue
    sentence10?: NullableJsonNullValueInput | InputJsonValue
    sentence11?: NullableJsonNullValueInput | InputJsonValue
    sentence12?: NullableJsonNullValueInput | InputJsonValue
    sentence13?: NullableJsonNullValueInput | InputJsonValue
    sentence14?: NullableJsonNullValueInput | InputJsonValue
    sentence15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassageSentenceCreateOrConnectWithoutPassageInput = {
    where: PassageSentenceWhereUniqueInput
    create: XOR<PassageSentenceCreateWithoutPassageInput, PassageSentenceUncheckedCreateWithoutPassageInput>
  }

  export type PassageSentenceCreateManyPassageInputEnvelope = {
    data: PassageSentenceCreateManyPassageInput | PassageSentenceCreateManyPassageInput[]
    skipDuplicates?: boolean
  }

  export type PassageQuestionUpsertWithWhereUniqueWithoutPassageInput = {
    where: PassageQuestionWhereUniqueInput
    update: XOR<PassageQuestionUpdateWithoutPassageInput, PassageQuestionUncheckedUpdateWithoutPassageInput>
    create: XOR<PassageQuestionCreateWithoutPassageInput, PassageQuestionUncheckedCreateWithoutPassageInput>
  }

  export type PassageQuestionUpdateWithWhereUniqueWithoutPassageInput = {
    where: PassageQuestionWhereUniqueInput
    data: XOR<PassageQuestionUpdateWithoutPassageInput, PassageQuestionUncheckedUpdateWithoutPassageInput>
  }

  export type PassageQuestionUpdateManyWithWhereWithoutPassageInput = {
    where: PassageQuestionScalarWhereInput
    data: XOR<PassageQuestionUpdateManyMutationInput, PassageQuestionUncheckedUpdateManyWithoutPassageInput>
  }

  export type PassageQuestionScalarWhereInput = {
    AND?: PassageQuestionScalarWhereInput | PassageQuestionScalarWhereInput[]
    OR?: PassageQuestionScalarWhereInput[]
    NOT?: PassageQuestionScalarWhereInput | PassageQuestionScalarWhereInput[]
    id?: IntFilter<"PassageQuestion"> | number
    question1?: JsonNullableFilter<"PassageQuestion">
    question2?: JsonNullableFilter<"PassageQuestion">
    question3?: JsonNullableFilter<"PassageQuestion">
    question4?: JsonNullableFilter<"PassageQuestion">
    question5?: JsonNullableFilter<"PassageQuestion">
    question6?: JsonNullableFilter<"PassageQuestion">
    question7?: JsonNullableFilter<"PassageQuestion">
    question8?: JsonNullableFilter<"PassageQuestion">
    question9?: JsonNullableFilter<"PassageQuestion">
    question10?: JsonNullableFilter<"PassageQuestion">
    question11?: JsonNullableFilter<"PassageQuestion">
    question12?: JsonNullableFilter<"PassageQuestion">
    question13?: JsonNullableFilter<"PassageQuestion">
    question14?: JsonNullableFilter<"PassageQuestion">
    question15?: JsonNullableFilter<"PassageQuestion">
    passageId?: IntFilter<"PassageQuestion"> | number
    createdAt?: DateTimeFilter<"PassageQuestion"> | Date | string
    updatedAt?: DateTimeFilter<"PassageQuestion"> | Date | string
  }

  export type PassageSentenceUpsertWithWhereUniqueWithoutPassageInput = {
    where: PassageSentenceWhereUniqueInput
    update: XOR<PassageSentenceUpdateWithoutPassageInput, PassageSentenceUncheckedUpdateWithoutPassageInput>
    create: XOR<PassageSentenceCreateWithoutPassageInput, PassageSentenceUncheckedCreateWithoutPassageInput>
  }

  export type PassageSentenceUpdateWithWhereUniqueWithoutPassageInput = {
    where: PassageSentenceWhereUniqueInput
    data: XOR<PassageSentenceUpdateWithoutPassageInput, PassageSentenceUncheckedUpdateWithoutPassageInput>
  }

  export type PassageSentenceUpdateManyWithWhereWithoutPassageInput = {
    where: PassageSentenceScalarWhereInput
    data: XOR<PassageSentenceUpdateManyMutationInput, PassageSentenceUncheckedUpdateManyWithoutPassageInput>
  }

  export type PassageSentenceScalarWhereInput = {
    AND?: PassageSentenceScalarWhereInput | PassageSentenceScalarWhereInput[]
    OR?: PassageSentenceScalarWhereInput[]
    NOT?: PassageSentenceScalarWhereInput | PassageSentenceScalarWhereInput[]
    id?: IntFilter<"PassageSentence"> | number
    sentence1?: JsonNullableFilter<"PassageSentence">
    sentence2?: JsonNullableFilter<"PassageSentence">
    sentence3?: JsonNullableFilter<"PassageSentence">
    sentence4?: JsonNullableFilter<"PassageSentence">
    sentence5?: JsonNullableFilter<"PassageSentence">
    sentence6?: JsonNullableFilter<"PassageSentence">
    sentence7?: JsonNullableFilter<"PassageSentence">
    sentence8?: JsonNullableFilter<"PassageSentence">
    sentence9?: JsonNullableFilter<"PassageSentence">
    sentence10?: JsonNullableFilter<"PassageSentence">
    sentence11?: JsonNullableFilter<"PassageSentence">
    sentence12?: JsonNullableFilter<"PassageSentence">
    sentence13?: JsonNullableFilter<"PassageSentence">
    sentence14?: JsonNullableFilter<"PassageSentence">
    sentence15?: JsonNullableFilter<"PassageSentence">
    passageId?: IntFilter<"PassageSentence"> | number
    createdAt?: DateTimeFilter<"PassageSentence"> | Date | string
    updatedAt?: DateTimeFilter<"PassageSentence"> | Date | string
  }

  export type PassageCreateWithoutPassageQuestionInput = {
    level: $Enums.PassageLevel
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    PassageSentence?: PassageSentenceCreateNestedManyWithoutPassageInput
  }

  export type PassageUncheckedCreateWithoutPassageQuestionInput = {
    id?: number
    level: $Enums.PassageLevel
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    PassageSentence?: PassageSentenceUncheckedCreateNestedManyWithoutPassageInput
  }

  export type PassageCreateOrConnectWithoutPassageQuestionInput = {
    where: PassageWhereUniqueInput
    create: XOR<PassageCreateWithoutPassageQuestionInput, PassageUncheckedCreateWithoutPassageQuestionInput>
  }

  export type PassageUpsertWithoutPassageQuestionInput = {
    update: XOR<PassageUpdateWithoutPassageQuestionInput, PassageUncheckedUpdateWithoutPassageQuestionInput>
    create: XOR<PassageCreateWithoutPassageQuestionInput, PassageUncheckedCreateWithoutPassageQuestionInput>
    where?: PassageWhereInput
  }

  export type PassageUpdateToOneWithWhereWithoutPassageQuestionInput = {
    where?: PassageWhereInput
    data: XOR<PassageUpdateWithoutPassageQuestionInput, PassageUncheckedUpdateWithoutPassageQuestionInput>
  }

  export type PassageUpdateWithoutPassageQuestionInput = {
    level?: EnumPassageLevelFieldUpdateOperationsInput | $Enums.PassageLevel
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PassageSentence?: PassageSentenceUpdateManyWithoutPassageNestedInput
  }

  export type PassageUncheckedUpdateWithoutPassageQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: EnumPassageLevelFieldUpdateOperationsInput | $Enums.PassageLevel
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PassageSentence?: PassageSentenceUncheckedUpdateManyWithoutPassageNestedInput
  }

  export type PassageCreateWithoutPassageSentenceInput = {
    level: $Enums.PassageLevel
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    PassageQuestion?: PassageQuestionCreateNestedManyWithoutPassageInput
  }

  export type PassageUncheckedCreateWithoutPassageSentenceInput = {
    id?: number
    level: $Enums.PassageLevel
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    PassageQuestion?: PassageQuestionUncheckedCreateNestedManyWithoutPassageInput
  }

  export type PassageCreateOrConnectWithoutPassageSentenceInput = {
    where: PassageWhereUniqueInput
    create: XOR<PassageCreateWithoutPassageSentenceInput, PassageUncheckedCreateWithoutPassageSentenceInput>
  }

  export type PassageUpsertWithoutPassageSentenceInput = {
    update: XOR<PassageUpdateWithoutPassageSentenceInput, PassageUncheckedUpdateWithoutPassageSentenceInput>
    create: XOR<PassageCreateWithoutPassageSentenceInput, PassageUncheckedCreateWithoutPassageSentenceInput>
    where?: PassageWhereInput
  }

  export type PassageUpdateToOneWithWhereWithoutPassageSentenceInput = {
    where?: PassageWhereInput
    data: XOR<PassageUpdateWithoutPassageSentenceInput, PassageUncheckedUpdateWithoutPassageSentenceInput>
  }

  export type PassageUpdateWithoutPassageSentenceInput = {
    level?: EnumPassageLevelFieldUpdateOperationsInput | $Enums.PassageLevel
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PassageQuestion?: PassageQuestionUpdateManyWithoutPassageNestedInput
  }

  export type PassageUncheckedUpdateWithoutPassageSentenceInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: EnumPassageLevelFieldUpdateOperationsInput | $Enums.PassageLevel
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PassageQuestion?: PassageQuestionUncheckedUpdateManyWithoutPassageNestedInput
  }

  export type OneTimePasswordCreateManyAdminUserInput = {
    id?: number
    usage: $Enums.OneTimeNumberUsage
    oneTimePassword: string
    validated?: boolean
    updatedAt?: Date | string
    userId?: string | null
  }

  export type OneTimePasswordUpdateWithoutAdminUserInput = {
    usage?: EnumOneTimeNumberUsageFieldUpdateOperationsInput | $Enums.OneTimeNumberUsage
    oneTimePassword?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneWithoutOneTimePasswordNestedInput
  }

  export type OneTimePasswordUncheckedUpdateWithoutAdminUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    usage?: EnumOneTimeNumberUsageFieldUpdateOperationsInput | $Enums.OneTimeNumberUsage
    oneTimePassword?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OneTimePasswordUncheckedUpdateManyWithoutAdminUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    usage?: EnumOneTimeNumberUsageFieldUpdateOperationsInput | $Enums.OneTimeNumberUsage
    oneTimePassword?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlogUniversityDepartmentCreateManyBlogInput = {
    id?: number
    universityId: number
    name: string
    rikei?: boolean
    examType?: number | null
    articleYear?: string | null
  }

  export type BlogUniversityDepartmentUpdateWithoutBlogInput = {
    name?: StringFieldUpdateOperationsInput | string
    rikei?: BoolFieldUpdateOperationsInput | boolean
    examType?: NullableIntFieldUpdateOperationsInput | number | null
    articleYear?: NullableStringFieldUpdateOperationsInput | string | null
    University?: BlogUniversityUpdateOneRequiredWithoutBlogUniversityDepartmentNestedInput
  }

  export type BlogUniversityDepartmentUncheckedUpdateWithoutBlogInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    rikei?: BoolFieldUpdateOperationsInput | boolean
    examType?: NullableIntFieldUpdateOperationsInput | number | null
    articleYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlogUniversityDepartmentUncheckedUpdateManyWithoutBlogInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    rikei?: BoolFieldUpdateOperationsInput | boolean
    examType?: NullableIntFieldUpdateOperationsInput | number | null
    articleYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlogCreateManyCategoryInput = {
    id?: number
    published?: boolean
    name: string
    title: string
    keywordList: string
    description: string
  }

  export type BlogUpdateWithoutCategoryInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keywordList?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    BlogUniversityDepartment?: BlogUniversityDepartmentUpdateManyWithoutBlogNestedInput
  }

  export type BlogUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keywordList?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    BlogUniversityDepartment?: BlogUniversityDepartmentUncheckedUpdateManyWithoutBlogNestedInput
  }

  export type BlogUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keywordList?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type BlogUniversityDepartmentCreateManyUniversityInput = {
    id?: number
    blogId?: number | null
    name: string
    rikei?: boolean
    examType?: number | null
    articleYear?: string | null
  }

  export type BlogUniversityDepartmentUpdateWithoutUniversityInput = {
    name?: StringFieldUpdateOperationsInput | string
    rikei?: BoolFieldUpdateOperationsInput | boolean
    examType?: NullableIntFieldUpdateOperationsInput | number | null
    articleYear?: NullableStringFieldUpdateOperationsInput | string | null
    Blog?: BlogUpdateOneWithoutBlogUniversityDepartmentNestedInput
  }

  export type BlogUniversityDepartmentUncheckedUpdateWithoutUniversityInput = {
    id?: IntFieldUpdateOperationsInput | number
    blogId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    rikei?: BoolFieldUpdateOperationsInput | boolean
    examType?: NullableIntFieldUpdateOperationsInput | number | null
    articleYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlogUniversityDepartmentUncheckedUpdateManyWithoutUniversityInput = {
    id?: IntFieldUpdateOperationsInput | number
    blogId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    rikei?: BoolFieldUpdateOperationsInput | boolean
    examType?: NullableIntFieldUpdateOperationsInput | number | null
    articleYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GrammarCreateManyGradeInput = {
    id?: number
    unit: string
    tangen: string
    localId: number
  }

  export type GrammarUpdateWithoutGradeInput = {
    unit?: StringFieldUpdateOperationsInput | string
    tangen?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
    GrammarQuestion?: GrammarQuestionUpdateManyWithoutGrammarNestedInput
  }

  export type GrammarUncheckedUpdateWithoutGradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    tangen?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
    GrammarQuestion?: GrammarQuestionUncheckedUpdateManyWithoutGrammarNestedInput
  }

  export type GrammarUncheckedUpdateManyWithoutGradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    tangen?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
  }

  export type GrammarQuestionCreateManyGrammarInput = {
    id?: number
    title: string
    sentence: string
    question: JsonNullValueInput | InputJsonValue
    answer: string
    explanation: string
    localId: number
  }

  export type GrammarQuestionUpdateWithoutGrammarInput = {
    title?: StringFieldUpdateOperationsInput | string
    sentence?: StringFieldUpdateOperationsInput | string
    question?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
    LikeGrammarQuestion?: LikeGrammarQuestionUpdateManyWithoutGrammarQuestionNestedInput
  }

  export type GrammarQuestionUncheckedUpdateWithoutGrammarInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    sentence?: StringFieldUpdateOperationsInput | string
    question?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
    LikeGrammarQuestion?: LikeGrammarQuestionUncheckedUpdateManyWithoutGrammarQuestionNestedInput
  }

  export type GrammarQuestionUncheckedUpdateManyWithoutGrammarInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    sentence?: StringFieldUpdateOperationsInput | string
    question?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: StringFieldUpdateOperationsInput | string
    localId?: IntFieldUpdateOperationsInput | number
  }

  export type LikeGrammarQuestionCreateManyGrammarQuestionInput = {
    id?: number
    userId: string
    createdAt?: Date | string
  }

  export type LikeGrammarQuestionUpdateWithoutGrammarQuestionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutLikeGrammarQuestionNestedInput
  }

  export type LikeGrammarQuestionUncheckedUpdateWithoutGrammarQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeGrammarQuestionUncheckedUpdateManyWithoutGrammarQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeListeningCreateManyListeningInput = {
    id?: number
    userId: string
    createdAt?: Date | string
  }

  export type LikeListeningUpdateWithoutListeningInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutLikeListeningNestedInput
  }

  export type LikeListeningUncheckedUpdateWithoutListeningInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeListeningUncheckedUpdateManyWithoutListeningInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductReviewCreateManyProductInput = {
    id?: number
    text: string
    reviewer: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
    checkoutId?: number | null
  }

  export type StripeCheckoutCreateManyProductInput = {
    id?: number
    customerId?: string | null
    paymentId: string
    name: string
    email: string
    postCode: string
    address: string
    serialNumber: string
    status: $Enums.checkoutStatus
    manager?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductReviewUpdateWithoutProductInput = {
    text?: StringFieldUpdateOperationsInput | string
    reviewer?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    StripeCheckout?: StripeCheckoutUpdateOneWithoutProductReviewNestedInput
  }

  export type ProductReviewUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    reviewer?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkoutId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProductReviewUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    reviewer?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkoutId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StripeCheckoutUpdateWithoutProductInput = {
    paymentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumcheckoutStatusFieldUpdateOperationsInput | $Enums.checkoutStatus
    manager?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    StripeCustomer?: StripeCustomerUpdateOneWithoutStripeCheckoutNestedInput
    ProductReview?: ProductReviewUpdateManyWithoutStripeCheckoutNestedInput
  }

  export type StripeCheckoutUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumcheckoutStatusFieldUpdateOperationsInput | $Enums.checkoutStatus
    manager?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ProductReview?: ProductReviewUncheckedUpdateManyWithoutStripeCheckoutNestedInput
  }

  export type StripeCheckoutUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumcheckoutStatusFieldUpdateOperationsInput | $Enums.checkoutStatus
    manager?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductReviewCreateManyStripeCheckoutInput = {
    id?: number
    text: string
    reviewer: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
    productId: number
  }

  export type ProductReviewUpdateWithoutStripeCheckoutInput = {
    text?: StringFieldUpdateOperationsInput | string
    reviewer?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: ProductUpdateOneRequiredWithoutProductReviewNestedInput
  }

  export type ProductReviewUncheckedUpdateWithoutStripeCheckoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    reviewer?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductReviewUncheckedUpdateManyWithoutStripeCheckoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    reviewer?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type StripeCheckoutCreateManyStripeCustomerInput = {
    id?: number
    productId: number
    paymentId: string
    name: string
    email: string
    postCode: string
    address: string
    serialNumber: string
    status: $Enums.checkoutStatus
    manager?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StripeSubscriptionCreateManyStripeCustomerInput = {
    id?: number
    subscriptionId: string
    plan: string
    status: $Enums.subscriptionStatus
    periodStart: string
    periodEnd: string
    cancelAt?: string | null
    cancelAtPeriodEnd?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StripeCheckoutUpdateWithoutStripeCustomerInput = {
    paymentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumcheckoutStatusFieldUpdateOperationsInput | $Enums.checkoutStatus
    manager?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: ProductUpdateOneRequiredWithoutStripeCheckoutNestedInput
    ProductReview?: ProductReviewUpdateManyWithoutStripeCheckoutNestedInput
  }

  export type StripeCheckoutUncheckedUpdateWithoutStripeCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    paymentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumcheckoutStatusFieldUpdateOperationsInput | $Enums.checkoutStatus
    manager?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ProductReview?: ProductReviewUncheckedUpdateManyWithoutStripeCheckoutNestedInput
  }

  export type StripeCheckoutUncheckedUpdateManyWithoutStripeCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    paymentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumcheckoutStatusFieldUpdateOperationsInput | $Enums.checkoutStatus
    manager?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StripeSubscriptionUpdateWithoutStripeCustomerInput = {
    subscriptionId?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    status?: EnumsubscriptionStatusFieldUpdateOperationsInput | $Enums.subscriptionStatus
    periodStart?: StringFieldUpdateOperationsInput | string
    periodEnd?: StringFieldUpdateOperationsInput | string
    cancelAt?: NullableStringFieldUpdateOperationsInput | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StripeSubscriptionUncheckedUpdateWithoutStripeCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    subscriptionId?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    status?: EnumsubscriptionStatusFieldUpdateOperationsInput | $Enums.subscriptionStatus
    periodStart?: StringFieldUpdateOperationsInput | string
    periodEnd?: StringFieldUpdateOperationsInput | string
    cancelAt?: NullableStringFieldUpdateOperationsInput | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StripeSubscriptionUncheckedUpdateManyWithoutStripeCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    subscriptionId?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    status?: EnumsubscriptionStatusFieldUpdateOperationsInput | $Enums.subscriptionStatus
    periodStart?: StringFieldUpdateOperationsInput | string
    periodEnd?: StringFieldUpdateOperationsInput | string
    cancelAt?: NullableStringFieldUpdateOperationsInput | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StripeCustomerCreateManyUserInput = {
    id?: number
    customerId: string
  }

  export type OneTimePasswordCreateManyUserInput = {
    id?: number
    usage: $Enums.OneTimeNumberUsage
    oneTimePassword: string
    validated?: boolean
    updatedAt?: Date | string
    adminUserId?: string | null
  }

  export type LikeGrammarQuestionCreateManyUserInput = {
    id?: number
    grammarQuestionId: number
    createdAt?: Date | string
  }

  export type LikeListeningCreateManyUserInput = {
    id?: number
    listeningId: number
    createdAt?: Date | string
  }

  export type StripeCustomerUpdateWithoutUserInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    StripeCheckout?: StripeCheckoutUpdateManyWithoutStripeCustomerNestedInput
    StripeSubscription?: StripeSubscriptionUpdateManyWithoutStripeCustomerNestedInput
  }

  export type StripeCustomerUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: StringFieldUpdateOperationsInput | string
    StripeCheckout?: StripeCheckoutUncheckedUpdateManyWithoutStripeCustomerNestedInput
    StripeSubscription?: StripeSubscriptionUncheckedUpdateManyWithoutStripeCustomerNestedInput
  }

  export type StripeCustomerUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: StringFieldUpdateOperationsInput | string
  }

  export type OneTimePasswordUpdateWithoutUserInput = {
    usage?: EnumOneTimeNumberUsageFieldUpdateOperationsInput | $Enums.OneTimeNumberUsage
    oneTimePassword?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AdminUser?: AdminUserUpdateOneWithoutOneTimePasswordNestedInput
  }

  export type OneTimePasswordUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    usage?: EnumOneTimeNumberUsageFieldUpdateOperationsInput | $Enums.OneTimeNumberUsage
    oneTimePassword?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminUserId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OneTimePasswordUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    usage?: EnumOneTimeNumberUsageFieldUpdateOperationsInput | $Enums.OneTimeNumberUsage
    oneTimePassword?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminUserId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LikeGrammarQuestionUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GrammarQuestion?: GrammarQuestionUpdateOneRequiredWithoutLikeGrammarQuestionNestedInput
  }

  export type LikeGrammarQuestionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    grammarQuestionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeGrammarQuestionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    grammarQuestionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeListeningUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Listening?: ListeningUpdateOneRequiredWithoutLikeListeningNestedInput
  }

  export type LikeListeningUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    listeningId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeListeningUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    listeningId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassageQuestionCreateManyPassageInput = {
    id?: number
    question1?: NullableJsonNullValueInput | InputJsonValue
    question2?: NullableJsonNullValueInput | InputJsonValue
    question3?: NullableJsonNullValueInput | InputJsonValue
    question4?: NullableJsonNullValueInput | InputJsonValue
    question5?: NullableJsonNullValueInput | InputJsonValue
    question6?: NullableJsonNullValueInput | InputJsonValue
    question7?: NullableJsonNullValueInput | InputJsonValue
    question8?: NullableJsonNullValueInput | InputJsonValue
    question9?: NullableJsonNullValueInput | InputJsonValue
    question10?: NullableJsonNullValueInput | InputJsonValue
    question11?: NullableJsonNullValueInput | InputJsonValue
    question12?: NullableJsonNullValueInput | InputJsonValue
    question13?: NullableJsonNullValueInput | InputJsonValue
    question14?: NullableJsonNullValueInput | InputJsonValue
    question15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassageSentenceCreateManyPassageInput = {
    id?: number
    sentence1?: NullableJsonNullValueInput | InputJsonValue
    sentence2?: NullableJsonNullValueInput | InputJsonValue
    sentence3?: NullableJsonNullValueInput | InputJsonValue
    sentence4?: NullableJsonNullValueInput | InputJsonValue
    sentence5?: NullableJsonNullValueInput | InputJsonValue
    sentence6?: NullableJsonNullValueInput | InputJsonValue
    sentence7?: NullableJsonNullValueInput | InputJsonValue
    sentence8?: NullableJsonNullValueInput | InputJsonValue
    sentence9?: NullableJsonNullValueInput | InputJsonValue
    sentence10?: NullableJsonNullValueInput | InputJsonValue
    sentence11?: NullableJsonNullValueInput | InputJsonValue
    sentence12?: NullableJsonNullValueInput | InputJsonValue
    sentence13?: NullableJsonNullValueInput | InputJsonValue
    sentence14?: NullableJsonNullValueInput | InputJsonValue
    sentence15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassageQuestionUpdateWithoutPassageInput = {
    question1?: NullableJsonNullValueInput | InputJsonValue
    question2?: NullableJsonNullValueInput | InputJsonValue
    question3?: NullableJsonNullValueInput | InputJsonValue
    question4?: NullableJsonNullValueInput | InputJsonValue
    question5?: NullableJsonNullValueInput | InputJsonValue
    question6?: NullableJsonNullValueInput | InputJsonValue
    question7?: NullableJsonNullValueInput | InputJsonValue
    question8?: NullableJsonNullValueInput | InputJsonValue
    question9?: NullableJsonNullValueInput | InputJsonValue
    question10?: NullableJsonNullValueInput | InputJsonValue
    question11?: NullableJsonNullValueInput | InputJsonValue
    question12?: NullableJsonNullValueInput | InputJsonValue
    question13?: NullableJsonNullValueInput | InputJsonValue
    question14?: NullableJsonNullValueInput | InputJsonValue
    question15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassageQuestionUncheckedUpdateWithoutPassageInput = {
    id?: IntFieldUpdateOperationsInput | number
    question1?: NullableJsonNullValueInput | InputJsonValue
    question2?: NullableJsonNullValueInput | InputJsonValue
    question3?: NullableJsonNullValueInput | InputJsonValue
    question4?: NullableJsonNullValueInput | InputJsonValue
    question5?: NullableJsonNullValueInput | InputJsonValue
    question6?: NullableJsonNullValueInput | InputJsonValue
    question7?: NullableJsonNullValueInput | InputJsonValue
    question8?: NullableJsonNullValueInput | InputJsonValue
    question9?: NullableJsonNullValueInput | InputJsonValue
    question10?: NullableJsonNullValueInput | InputJsonValue
    question11?: NullableJsonNullValueInput | InputJsonValue
    question12?: NullableJsonNullValueInput | InputJsonValue
    question13?: NullableJsonNullValueInput | InputJsonValue
    question14?: NullableJsonNullValueInput | InputJsonValue
    question15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassageQuestionUncheckedUpdateManyWithoutPassageInput = {
    id?: IntFieldUpdateOperationsInput | number
    question1?: NullableJsonNullValueInput | InputJsonValue
    question2?: NullableJsonNullValueInput | InputJsonValue
    question3?: NullableJsonNullValueInput | InputJsonValue
    question4?: NullableJsonNullValueInput | InputJsonValue
    question5?: NullableJsonNullValueInput | InputJsonValue
    question6?: NullableJsonNullValueInput | InputJsonValue
    question7?: NullableJsonNullValueInput | InputJsonValue
    question8?: NullableJsonNullValueInput | InputJsonValue
    question9?: NullableJsonNullValueInput | InputJsonValue
    question10?: NullableJsonNullValueInput | InputJsonValue
    question11?: NullableJsonNullValueInput | InputJsonValue
    question12?: NullableJsonNullValueInput | InputJsonValue
    question13?: NullableJsonNullValueInput | InputJsonValue
    question14?: NullableJsonNullValueInput | InputJsonValue
    question15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassageSentenceUpdateWithoutPassageInput = {
    sentence1?: NullableJsonNullValueInput | InputJsonValue
    sentence2?: NullableJsonNullValueInput | InputJsonValue
    sentence3?: NullableJsonNullValueInput | InputJsonValue
    sentence4?: NullableJsonNullValueInput | InputJsonValue
    sentence5?: NullableJsonNullValueInput | InputJsonValue
    sentence6?: NullableJsonNullValueInput | InputJsonValue
    sentence7?: NullableJsonNullValueInput | InputJsonValue
    sentence8?: NullableJsonNullValueInput | InputJsonValue
    sentence9?: NullableJsonNullValueInput | InputJsonValue
    sentence10?: NullableJsonNullValueInput | InputJsonValue
    sentence11?: NullableJsonNullValueInput | InputJsonValue
    sentence12?: NullableJsonNullValueInput | InputJsonValue
    sentence13?: NullableJsonNullValueInput | InputJsonValue
    sentence14?: NullableJsonNullValueInput | InputJsonValue
    sentence15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassageSentenceUncheckedUpdateWithoutPassageInput = {
    id?: IntFieldUpdateOperationsInput | number
    sentence1?: NullableJsonNullValueInput | InputJsonValue
    sentence2?: NullableJsonNullValueInput | InputJsonValue
    sentence3?: NullableJsonNullValueInput | InputJsonValue
    sentence4?: NullableJsonNullValueInput | InputJsonValue
    sentence5?: NullableJsonNullValueInput | InputJsonValue
    sentence6?: NullableJsonNullValueInput | InputJsonValue
    sentence7?: NullableJsonNullValueInput | InputJsonValue
    sentence8?: NullableJsonNullValueInput | InputJsonValue
    sentence9?: NullableJsonNullValueInput | InputJsonValue
    sentence10?: NullableJsonNullValueInput | InputJsonValue
    sentence11?: NullableJsonNullValueInput | InputJsonValue
    sentence12?: NullableJsonNullValueInput | InputJsonValue
    sentence13?: NullableJsonNullValueInput | InputJsonValue
    sentence14?: NullableJsonNullValueInput | InputJsonValue
    sentence15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassageSentenceUncheckedUpdateManyWithoutPassageInput = {
    id?: IntFieldUpdateOperationsInput | number
    sentence1?: NullableJsonNullValueInput | InputJsonValue
    sentence2?: NullableJsonNullValueInput | InputJsonValue
    sentence3?: NullableJsonNullValueInput | InputJsonValue
    sentence4?: NullableJsonNullValueInput | InputJsonValue
    sentence5?: NullableJsonNullValueInput | InputJsonValue
    sentence6?: NullableJsonNullValueInput | InputJsonValue
    sentence7?: NullableJsonNullValueInput | InputJsonValue
    sentence8?: NullableJsonNullValueInput | InputJsonValue
    sentence9?: NullableJsonNullValueInput | InputJsonValue
    sentence10?: NullableJsonNullValueInput | InputJsonValue
    sentence11?: NullableJsonNullValueInput | InputJsonValue
    sentence12?: NullableJsonNullValueInput | InputJsonValue
    sentence13?: NullableJsonNullValueInput | InputJsonValue
    sentence14?: NullableJsonNullValueInput | InputJsonValue
    sentence15?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AdminUserCountOutputTypeDefaultArgs instead
     */
    export type AdminUserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminUserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BlogCountOutputTypeDefaultArgs instead
     */
    export type BlogCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BlogCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BlogCategoryCountOutputTypeDefaultArgs instead
     */
    export type BlogCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BlogCategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BlogUniversityCountOutputTypeDefaultArgs instead
     */
    export type BlogUniversityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BlogUniversityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GradeCountOutputTypeDefaultArgs instead
     */
    export type GradeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GradeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrammarCountOutputTypeDefaultArgs instead
     */
    export type GrammarCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrammarCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrammarQuestionCountOutputTypeDefaultArgs instead
     */
    export type GrammarQuestionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrammarQuestionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ListeningCountOutputTypeDefaultArgs instead
     */
    export type ListeningCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ListeningCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StripeCheckoutCountOutputTypeDefaultArgs instead
     */
    export type StripeCheckoutCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StripeCheckoutCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StripeCustomerCountOutputTypeDefaultArgs instead
     */
    export type StripeCustomerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StripeCustomerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PassageCountOutputTypeDefaultArgs instead
     */
    export type PassageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PassageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminUserDefaultArgs instead
     */
    export type AdminUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminUserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BlogDefaultArgs instead
     */
    export type BlogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BlogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BlogCategoryDefaultArgs instead
     */
    export type BlogCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BlogCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BlogUniversityDefaultArgs instead
     */
    export type BlogUniversityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BlogUniversityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BlogUniversityDepartmentDefaultArgs instead
     */
    export type BlogUniversityDepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BlogUniversityDepartmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GradeDefaultArgs instead
     */
    export type GradeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GradeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrammarDefaultArgs instead
     */
    export type GrammarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrammarDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrammarQuestionDefaultArgs instead
     */
    export type GrammarQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrammarQuestionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LikeGrammarQuestionDefaultArgs instead
     */
    export type LikeGrammarQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LikeGrammarQuestionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LikeListeningDefaultArgs instead
     */
    export type LikeListeningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LikeListeningDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ListeningDefaultArgs instead
     */
    export type ListeningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ListeningDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LogDefaultArgs instead
     */
    export type LogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductReviewDefaultArgs instead
     */
    export type ProductReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductReviewDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OneTimePasswordDefaultArgs instead
     */
    export type OneTimePasswordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OneTimePasswordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StripeCheckoutDefaultArgs instead
     */
    export type StripeCheckoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StripeCheckoutDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StripeCustomerDefaultArgs instead
     */
    export type StripeCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StripeCustomerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StripeSubscriptionDefaultArgs instead
     */
    export type StripeSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StripeSubscriptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PassageDefaultArgs instead
     */
    export type PassageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PassageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PassageQuestionDefaultArgs instead
     */
    export type PassageQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PassageQuestionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PassageSentenceDefaultArgs instead
     */
    export type PassageSentenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PassageSentenceDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}