
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.7.1
 * Query Engine version: 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
 */
Prisma.prismaVersion = {
  client: "5.7.1",
  engine: "0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminUserScalarFieldEnum = {
  id: 'id',
  role: 'role',
  adminName: 'adminName',
  adminEmail: 'adminEmail',
  password: 'password'
};

exports.Prisma.BlogScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  published: 'published',
  name: 'name',
  title: 'title',
  keywordList: 'keywordList',
  description: 'description'
};

exports.Prisma.BlogCategoryScalarFieldEnum = {
  id: 'id',
  category: 'category'
};

exports.Prisma.BlogUniversityScalarFieldEnum = {
  id: 'id',
  schoolName: 'schoolName',
  publicSchool: 'publicSchool',
  region: 'region',
  eikenUsable: 'eikenUsable',
  schoolUrl: 'schoolUrl'
};

exports.Prisma.BlogUniversityDepartmentScalarFieldEnum = {
  id: 'id',
  blogId: 'blogId',
  universityId: 'universityId',
  name: 'name',
  rikei: 'rikei',
  examType: 'examType',
  articleYear: 'articleYear'
};

exports.Prisma.GradeScalarFieldEnum = {
  id: 'id',
  grade: 'grade',
  gradeJp: 'gradeJp'
};

exports.Prisma.GrammarScalarFieldEnum = {
  id: 'id',
  unit: 'unit',
  tangen: 'tangen',
  localId: 'localId',
  gradeId: 'gradeId'
};

exports.Prisma.GrammarQuestionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  sentence: 'sentence',
  question: 'question',
  answer: 'answer',
  explanation: 'explanation',
  localId: 'localId',
  grammarId: 'grammarId'
};

exports.Prisma.LikeGrammarQuestionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  grammarQuestionId: 'grammarQuestionId',
  createdAt: 'createdAt'
};

exports.Prisma.LikeListeningScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  listeningId: 'listeningId',
  createdAt: 'createdAt'
};

exports.Prisma.ListeningScalarFieldEnum = {
  id: 'id',
  title: 'title',
  url: 'url',
  lap: 'lap',
  localId: 'localId'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  about: 'about',
  level: 'level',
  message: 'message',
  meta: 'meta'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  checkoutType: 'checkoutType',
  image: 'image',
  priceId: 'priceId',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductReviewScalarFieldEnum = {
  id: 'id',
  text: 'text',
  reviewer: 'reviewer',
  rating: 'rating',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  productId: 'productId',
  checkoutId: 'checkoutId'
};

exports.Prisma.OneTimePasswordScalarFieldEnum = {
  id: 'id',
  usage: 'usage',
  oneTimePassword: 'oneTimePassword',
  validated: 'validated',
  updatedAt: 'updatedAt',
  userId: 'userId',
  adminUserId: 'adminUserId'
};

exports.Prisma.StripeCheckoutScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  productId: 'productId',
  paymentId: 'paymentId',
  name: 'name',
  email: 'email',
  postCode: 'postCode',
  address: 'address',
  serialNumber: 'serialNumber',
  status: 'status',
  manager: 'manager',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StripeCustomerScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  userId: 'userId'
};

exports.Prisma.StripeSubscriptionScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  plan: 'plan',
  status: 'status',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  cancelAt: 'cancelAt',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  stripeCustomerId: 'stripeCustomerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  userName: 'userName',
  gender: 'gender',
  country: 'country',
  city: 'city',
  email: 'email',
  birthYear: 'birthYear',
  activated: 'activated',
  invited: 'invited',
  invitedUntil: 'invitedUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PassageScalarFieldEnum = {
  id: 'id',
  level: 'level',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PassageQuestionScalarFieldEnum = {
  id: 'id',
  question1: 'question1',
  question2: 'question2',
  question3: 'question3',
  question4: 'question4',
  question5: 'question5',
  question6: 'question6',
  question7: 'question7',
  question8: 'question8',
  question9: 'question9',
  question10: 'question10',
  question11: 'question11',
  question12: 'question12',
  question13: 'question13',
  question14: 'question14',
  question15: 'question15',
  passageId: 'passageId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PassageSentenceScalarFieldEnum = {
  id: 'id',
  sentence1: 'sentence1',
  sentence2: 'sentence2',
  sentence3: 'sentence3',
  sentence4: 'sentence4',
  sentence5: 'sentence5',
  sentence6: 'sentence6',
  sentence7: 'sentence7',
  sentence8: 'sentence8',
  sentence9: 'sentence9',
  sentence10: 'sentence10',
  sentence11: 'sentence11',
  sentence12: 'sentence12',
  sentence13: 'sentence13',
  sentence14: 'sentence14',
  sentence15: 'sentence15',
  passageId: 'passageId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.AdminRole = exports.$Enums.AdminRole = {
  super: 'super',
  write: 'write',
  read: 'read'
};

exports.LogAbout = exports.$Enums.LogAbout = {
  Checkout: 'Checkout',
  Subscription: 'Subscription'
};

exports.LogLevel = exports.$Enums.LogLevel = {
  Info: 'Info',
  Warn: 'Warn',
  Error: 'Error'
};

exports.checkoutType = exports.$Enums.checkoutType = {
  checkout: 'checkout',
  subscription: 'subscription'
};

exports.OneTimeNumberUsage = exports.$Enums.OneTimeNumberUsage = {
  signIn: 'signIn'
};

exports.checkoutStatus = exports.$Enums.checkoutStatus = {
  ordered: 'ordered',
  processing: 'processing',
  shipped: 'shipped',
  cancel: 'cancel'
};

exports.subscriptionStatus = exports.$Enums.subscriptionStatus = {
  trialing: 'trialing',
  active: 'active',
  canceled: 'canceled'
};

exports.Gender = exports.$Enums.Gender = {
  male: 'male',
  female: 'female',
  middle: 'middle'
};

exports.PassageLevel = exports.$Enums.PassageLevel = {
  C2: 'C2',
  C1: 'C1',
  B2: 'B2',
  B1: 'B1',
  A2: 'A2',
  A1: 'A1'
};

exports.Prisma.ModelName = {
  AdminUser: 'AdminUser',
  Blog: 'Blog',
  BlogCategory: 'BlogCategory',
  BlogUniversity: 'BlogUniversity',
  BlogUniversityDepartment: 'BlogUniversityDepartment',
  Grade: 'Grade',
  Grammar: 'Grammar',
  GrammarQuestion: 'GrammarQuestion',
  LikeGrammarQuestion: 'LikeGrammarQuestion',
  LikeListening: 'LikeListening',
  Listening: 'Listening',
  Log: 'Log',
  Product: 'Product',
  ProductReview: 'ProductReview',
  OneTimePassword: 'OneTimePassword',
  StripeCheckout: 'StripeCheckout',
  StripeCustomer: 'StripeCustomer',
  StripeSubscription: 'StripeSubscription',
  User: 'User',
  Passage: 'Passage',
  PassageQuestion: 'PassageQuestion',
  PassageSentence: 'PassageSentence'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
